#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 191
#define YY_END_OF_BUFFER 192
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1358] =
    {   0,
        0,    0,  188,  188,    2,    2,  192,  190,    4,    4,
      190,  190,  179,  186,  179,  179,  183,  179,  179,  179,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  179,  188,  189,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  170,    0,    1,    0,
      181,  180,  183,    0,    0,    0,  172,  171,    0,  169,

      173,  185,  185,  185,  185,  185,  185,   12,  185,  185,
      185,   19,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,   71,  185,  185,
       74,   83,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  101,  185,  185,  106,  109,  110,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  146,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  174,  188,
      187,    2,    2,    2,    2,    1,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  184,    0,  180,  176,

      178,  175,  177,    5,  185,    7,  185,  185,   10,  185,
       13,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,   34,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,   48,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,   59,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,   78,  185,  185,   86,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  102,  185,  185,
      185,  107,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  132,

      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  147,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,  185,
      185,  185,  185,  185,  185,  185,  185,  185,   20,  185,
       22,   23,   24,  185,  185,  185,   29,  185,  185,  185,
       32,   35,  185,  185,  185,  185,  185,   41,  185,  185,
      185,   46,   47,  185,  185,  185,  185,  185,  185,  185,

       56,  185,  185,  185,   61,   62,  185,  185,   66,  185,
       68,   69,  185,  185,  185,  185,  185,  185,   82,  185,
       85,   87,   88,  185,   90,  185,  185,   93,  185,  185,
      185,  185,  185,  104,  185,  185,  185,  185,  113,  185,
      185,  116,  185,  185,  185,  185,  121,  185,  185,  185,
      185,  126,  185,  185,  185,  185,  134,  135,  185,  185,
      185,  185,  185,  142,  143,  144,  185,  149,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  160,  185,
      162,  185,  164,  165,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,    6,    8,  185,   11,  185,   15,  185,  185,  185,
      185,  185,  185,  185,  185,  185,   31,  185,  185,  185,
      185,  185,  185,   40,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,   55,   57,  185,  185,  185,   64,
      185,   70,   72,  185,   75,   76,  185,  185,  185,  185,
       89,   91,  185,   94,   95,  185,   98,  185,  185,  185,
      185,  111,  112,  185,  185,  185,  185,  185,  120,  185,
      185,  124,  185,  185,  185,  185,  133,  185,  185,  185,
      139,  185,  185,  185,  185,  185,  152,  185,  185,  185,

      156,  185,  185,  185,  185,  163,  166,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    0,  185,   14,  185,   17,  185,
      185,  185,   25,   27,  185,   30,  185,  185,  185,  185,
      185,   39,  185,   43,  185,   45,   49,   50,  185,   52,
      185,  185,  185,   60,   63,   65,   67,   73,   77,  185,
      185,  185,   84,   92,   96,   99,  185,  103,  185,  108,
      185,  185,  185,  185,  185,  122,  185,  185,  127,  129,
      131,  185,  137,  185,  140,  185,  185,  185,  185,  185,
      153,  154,  155,  157,  185,  159,  185,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,    9,   16,   18,   21,  185,   26,   28,  185,  185,
      185,   37,   38,  185,  185,   51,   53,   54,  185,   79,
      185,  185,   97,  100,  185,  185,  185,  185,  118,  119,
      185,  185,  128,  130,  185,  138,  185,  185,  185,  185,
      185,  158,  161,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,  185,    0,   33,
      185,   42,   44,  185,  185,   81,  105,  185,  185,  185,
      123,  125,  136,  185,  185,  185,  150,  185,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,  185,    0,  185,   58,   80,  185,  115,  117,  141,
      145,  185,  151,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    0,    0,    0,   36,
      114,  185,    2,    2,    2,    2,    2,    2,    0,    0,
      167,  148,    2,    2,    2,    2,    0,    0,    2,    2,
        0,    0,    2,    2,    0,    0,    2,    2,    0,    0,
        2,    2,    0,    0,    2,    2,    0,  168,    2,    2,
        0,    2,    0,    2,  182,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    1,    8,    7,
        7,    7,    7,    7,    9,   10,    7,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,    7,    7,   21,
       22,   23,    7,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        7,    1,    7,    7,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,    7,   77,    7,   78,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[79] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    4,    1,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1,    1
    } ;

static const flex_int16_t yy_base[1365] =
    {   0,
        0,    0,  821,  820,   78,    0,  826, 8815,  155,  157,
      803,    0, 8815, 8815,  152,  151,  163,  180,  802,  799,
      232,  159,  168,  172,  206,  278,  153,  206,  262,  152,
      165,  197,  217,  283,  315,  279,    0,  329,  369,  412,
      242,  334,  219,  167,  705,    0,  772,    0,  244,  261,
      755,  768,    0,    0,  196,  398,  471,  359,  703,  689,
      491,  569,  624,  676,  724,  776,  404,  479,  819,  487,
      555,  556,  557,  870,  919,  968,  570,  626, 1014, 1066,
      624,  678,  690,  675,  620,  287, 8815,  691, 8815,  681,
     1131, 1141, 1152,  650,  618,  616, 8815, 8815,  615, 8815,

     8815,    0,  174,  217,  280,  285,  225,  279,  399,  315,
      313,    0,  357,  340,  739,  368,  333,  377,  780,  407,
      331,  339,  389,  411,  453,  825,  459,  467,  466,  475,
      471,  487,  485,  486,  554,  502,  496,    0,  550,  547,
      727,  563,  574,  592,  613,  615,  786,  602,  616,  620,
      617,  666,  670,  691,  690,    0,  693,  714,  730,  719,
      739,  830,  730,  828,  738,  825,  761,  864,  794,  781,
      792,  805,  845,  851,  866,  849,  864,  866,  895,  919,
      879,  877,  890,  884,  921,  890,  877,  929, 8815,    0,
     8815,    0,  367,    0,  632,    0,  623, 1162, 1172, 1183,

      596,  558,  557,    0,    0,  549,    0,    0,  966,  969,
     1053, 1014, 1180, 1058, 1179, 1226,  958, 1054, 1192, 1223,
     1242, 1282, 1275, 1294, 1309, 1361, 1358, 1369, 1396, 1296,
     1410, 1423, 1472, 1454, 1470, 1418, 1508, 1471, 1516, 1533,
     1536, 1552, 1565, 1578, 1596, 1613, 1616, 1665, 1632, 1618,
     1667, 1682, 1730, 1782, 1708, 1774, 1778, 1818, 1858, 1822,
     1874, 1877, 1900, 1918, 1924, 1708, 1963, 1875, 1951, 1965,
     1995, 2006, 1998, 2019, 2068, 2058, 2059, 2088, 2103, 2122,
     2127, 2148, 2161, 2187, 2199, 2225, 2272, 2186, 2240, 2244,
     2288, 2301, 2300, 2335, 2353,    0, 8815,  552, 1859, 8815,

     8815, 8815, 8815,    0,  927,    0,  931,  967,    0,  984,
        0,  972,  979,  970, 1015, 1025, 1068, 1180, 1065, 1066,
     1075, 1166, 1162, 1187, 1170, 1177, 1191, 1183, 1224, 1232,
     1247, 1284, 1246, 1246, 1232, 1253, 1242, 1281,    0, 1304,
     1333, 1341, 1333, 1345, 1341, 1341, 1363, 1368, 1380, 1385,
     1400, 1406, 1428, 1410, 1428, 1435, 1432, 1454, 1472, 1470,
     1485, 1486, 1493, 1528, 1508, 1522,    0, 1526, 1575, 1573,
     1582, 1629, 1580, 1605, 1613, 1616, 1632,    0, 1665, 1662,
     1657, 1662, 1689, 1693, 1692, 1728, 1716, 1735, 1718, 1729,
     1730, 1745, 1732, 1756, 1764, 1758, 1775, 1766, 1779,    0,

     1769, 1766, 1779, 1787, 1780, 1798, 1819, 1819, 1819, 1826,
     1839,    0, 1846, 1921, 1864, 2009, 1879, 1930, 1920, 1919,
     1944, 1935, 1950, 1981, 2061, 1994, 2017,    0,  551, 2418,
        0,    0,    0,    0, 2411, 2412, 2413, 2414, 2247, 2345,
     2456, 2351, 2462, 2464, 2467, 2476, 2501, 2510, 2559, 2518,
     2550, 2568, 2594, 2607, 2612, 2633, 2644, 2646, 2680, 2688,
     2661, 2700, 2715, 2740, 2739, 2741, 2785, 2780, 2793, 2794,
     2819, 2833, 2847, 2854, 2862, 2878, 2892, 2905, 2917, 2932,
     2948, 2951, 2962, 2993, 2997, 3011, 2995, 3044, 3056, 3068,
     3080, 3094, 3102, 3116, 3124, 3138, 3143, 3159, 3173, 3186,

     3198, 3212, 3264, 3224, 3246, 3272, 3290, 3298, 3316, 3334,
     3341, 3355, 3369, 3380, 3394, 3409, 3461, 3409, 3511, 3444,
     3487, 3428, 3539, 3498, 3547, 3560, 3583, 3595, 3600, 3603,
     3608, 3644, 3649, 3652, 3651, 3659, 3695, 3699, 3708, 3741,
     3744, 3761, 3764, 3790, 3793, 3813, 3818, 3815, 3863, 3834,
     3862, 3890, 3904, 3923, 3920, 3958, 3944, 3974,  549, 2024,
     2032, 2047, 2053, 2099, 2108, 2121, 2124, 2136,    0, 2145,
        0,    0, 2150, 2144, 2162, 2162,    0, 2162, 2164, 2200,
     2200,    0, 2209, 2212, 2209, 2217, 2268, 2276, 2300, 2311,
     2310,    0,    0, 2329, 2340, 2340, 2346, 2372, 2373, 2371,

        0, 2378, 2389, 2423,    0,    0, 2431, 2417,    0, 2420,
        0, 2416, 2473, 2465, 2487, 2503, 2508, 2551,    0, 2518,
        0,    0,    0, 2519,    0, 2533, 2562,    0, 2573, 2691,
     2572, 2570, 2588,    0, 2620, 2628, 2620, 2624,    0, 2640,
     2672,    0, 2682, 2690, 2695, 2701,    0, 2728, 2735, 2739,
     2772,    0, 2766, 2770, 2801, 2808,    0,    0, 2821, 2838,
     2844, 2852, 2849,    0,    0, 2848, 2863,    0, 2885, 2877,
     2893, 2891, 2920, 2907, 2921, 2945, 2944, 2943,    0, 2945,
        0, 3001,    0, 2995,  547, 3982, 3993, 4021, 4026, 4051,
     4031, 4056, 4083, 4085, 4100, 4130, 4135, 4138, 4160, 4184,

     4186, 4189, 4208, 4234, 4087, 4237, 4252, 4278, 4239, 4283,
     4294, 4297, 4327, 4313, 4353, 4365, 4357, 4381, 4397, 4421,
     4430, 4444, 4474, 4477, 4498, 4499, 4525, 4527, 4551, 4553,
     4575, 4577, 4603, 4605, 4617, 4632, 4646, 4660, 4671, 4699,
     4681, 4724, 4735, 4780, 4738, 4754, 4789, 4798, 4822, 4831,
     4840, 4871, 4879, 4884, 4893, 4918, 4932, 4929, 4957, 4972,
     4981, 5007, 5010, 5022, 5036, 5060, 5051, 5086, 5089, 5104,
     5134, 5139, 5142, 5164, 5183, 5198, 5212, 5217, 5242, 5219,
     5249, 5266, 5271, 5284, 5273, 5296, 5320, 5322, 5325, 5334,
     5360, 5359, 5370, 5389, 5403, 5417, 5431, 5445, 5459, 5483,

     5487, 5382, 5510, 5522, 5534, 5535, 5548, 5560, 5563, 5579,
      544,    0,    0, 2989,    0, 3019,    0, 3023, 3009, 3039,
     3056, 3060, 3056, 3055, 3098, 3110,    0, 3104, 3114, 3109,
     3136, 3149, 3164,    0, 3163, 3155, 3163, 3174, 3176, 3189,
     3195, 3206, 3223, 3232,    0,    0, 3218, 3225, 3235, 3238,
     3256,    0,    0, 3247,    0,    0, 3265, 3286, 3456, 3289,
        0,    0, 3305,    0,    0, 3306, 3298, 3326, 3309, 3337,
     3331,    0,    0, 3352, 3343, 3360, 3353, 3357,    0, 3372,
     3402,    0, 3416, 3436, 3449, 3445,    0, 3462, 3469, 3476,
     3463, 3470, 3487, 3515, 3518, 3506,    0, 3524, 3538, 3543,

        0, 3541, 3563, 3547, 3575,    0,    0,  543, 5592, 5595,
     5623, 5636, 5648, 5656, 5674, 5692, 5704, 5716, 5740, 5745,
     5759, 5772, 5784, 5798, 5803, 5816, 5828, 5846, 5853, 5854,
     5876, 5878, 5902, 5907, 5900, 5930, 5954, 5955, 5959, 5952,
     6006, 6003, 6008, 6038, 6047, 6045, 6054, 6090, 6089, 6098,
     6131, 6134, 6140, 6175, 6183, 6188, 6199, 6229, 6230, 6243,
     6271, 6274, 6282, 6287, 6318, 6329, 6342, 6370, 6373, 6384,
     6390, 6424, 6432, 6460, 6468, 6482, 6494, 6506, 6518, 6536,
     6548, 6562, 6576, 6550, 6574, 6615, 6606, 6613, 6631, 6649,
     6673, 6679, 6692, 6703, 6730, 6732, 6756, 6764, 6766, 6785,

     6809, 6818, 6837, 6851,  538, 3584,    0, 3580,    0, 3600,
     3614, 3646, 3684,    0, 3696,    0, 3692, 3703, 3714, 3709,
     3705,    0, 3735,    0, 3754,    0,    0,    0, 3762,    0,
     3758, 3754, 3772,    0,    0,    0,    0,    0,    0, 3792,
     3810, 3851,    0,    0, 3844,    0, 3857,    0, 3870,    0,
     3864, 3883, 3885, 3895, 3881,    0, 3919, 3923, 3911, 3919,
        0, 3934,    0, 3942,    0, 3959, 3988, 3988, 3982, 4006,
        0,    0,    0,    0, 4004,    0, 4028,  530, 6857, 6862,
     6867, 6891, 6905, 6911, 6930, 6940, 6946, 6959, 6982, 6995,
     7013, 7026, 7049, 7062, 7073, 7092, 7103, 7122, 7116, 7146,

     7152, 7169, 7174, 7176, 7200, 7220, 7223, 7225, 7228, 7264,
     7269, 7277, 7299, 7313, 7325, 7327, 7349, 7354, 7368, 7384,
     7392, 7398, 7422, 7428, 7445, 7457, 7471, 7479, 7493, 7507,
     7521, 7528, 7536, 7542, 7566, 7572, 7580, 7596, 7615, 7639,
     7638, 7662, 7683, 7680, 7686, 7704, 7727, 7730, 7746, 7760,
      528,    0,    0,    0,    0, 4042,    0,    0,  457, 4043,
     4051,    0,    0, 4054, 4044,    0,    0,    0, 4071,    0,
     4086, 4102,    0,    0, 4101, 4125, 4134, 4137,    0,    0,
     4134, 4145,    0,    0, 4139,    0, 4155, 4166, 4183, 4200,
     4203,    0,    0,  495, 7774, 7788, 7802, 7816, 7623, 7827,

     7841, 7865, 7856, 7890, 7891, 7904, 7905, 7919, 7943, 7944,
     7945, 7970, 7979, 7998, 8012, 8021, 8040, 8056, 8041, 8073,
     8075, 8094, 8098, 8122, 8136, 8140, 8164, 8178, 8182, 8208,
     8222, 8231, 8233, 8251, 8275, 8283,  494, 4192, 4370,    0,
     4209,    0,    0, 4240, 4228,    0,    0, 4237, 4250, 4258,
        0,    0,    0, 4246, 4310, 4348,    0, 4356,  463, 8305,
     4406, 8297, 8323, 8331, 8349, 8371, 8357, 8383, 8385, 8411,
     8420, 8426, 8450, 8456, 8464, 8489, 8503, 8508, 8511, 8533,
      450,  459, 4347, 4370,    0,    0, 4360,    0,    0,    0,
        0, 4376,    0,  443, 8572, 4397, 8557, 8569, 8571, 8576,

     8606, 8614, 8617, 8620, 8664, 8665,  437, 4523, 4391,    0,
        0, 4409,  404, 4618, 4402, 8667, 8679, 8706,  379, 4425,
     8815,    0,  371, 4427,    0, 8710,  360, 4412,  357, 4416,
      323, 4422,  320, 4445,  315, 4470,  299, 4471,  277, 4468,
      274, 4470,  269, 4493,  267, 4512,  235, 8815,  223,    0,
      221,  200,  189,  179, 8815,    0, 8815, 8784, 8789,  180,
     8794, 8799, 8804, 8809
    } ;

static const flex_int16_t yy_def[1365] =
    {   0,
     1357,    1, 1358, 1358, 1357,    5, 1357, 1357, 1357, 1357,
     1357, 1359, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1357, 1361, 1357, 1362, 1362, 1357,
     1362, 1363, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1364, 1364,   62,   62,   62,   63,   65,   62,   65,   62,
       62,   62,   62,   63,   63,   63,   62,   62,   62,   62,
       65,   62,   62,   62, 1362, 1357, 1357, 1359, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,

     1357, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1357, 1361,
     1357, 1362, 1362, 1362, 1363, 1362, 1362, 1362, 1362, 1362,

     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,   62,   62,
       62,   65,   65,   65,   65,   65,   65,   62,   62,   65,
       65,   65,   62,   62,   62,   65,   65,   65,   62,   65,
       65,   65,   62,   65,   65,   62,   65,   62,   65,   62,
       62,   65,   65,   65,   65,   62,   62,   65,   65,   62,
       62,   62,   62,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   62,   62,   62,   62,   65,
       65,   65,   65,   65,   65,   62,   62,   62,   62,   62,
       62,   65,   62,   62,   62,   63,   62,   62,   62,   65,
       65,   62,   62,   62,   62, 1362, 1357, 1357, 1357, 1357,

     1357, 1357, 1357, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,

     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1362, 1362, 1362,
     1362, 1362, 1362, 1362,   62,   62,   62,   62,   65,   65,
       65,   65,   62,   62,   62,   62,   65,   65,   62,   62,
       62,   62,   62,   62,   62,   65,   65,   62,   65,   65,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   65,   65,   65,   65,   62,   62,   65,
       65,   65,   65,   65,   65,   65,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   65,   65,   65,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       65,   65,   65,   62,   62,   62,   62,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   62,   62,   62,
       62,   62,   62,   62,   65,   65,   65,   65,   65,   65,
       65,   62,   62,   65,   65,   62,   62,   62,   62,   65,
       65,   65,   65,   65,   65,   65,   65,   65, 1357, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,

     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1362,   65,   65,   62,   62,   62,
       65,   62,   65,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   65,   62,   62,   62,   65,   65,
       65,   65,   65,   65,   65,   62,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   65,   65,   65,   62,   62,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   62,   62,   62,   65,   65,   65,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   65,
       65,   62,   62,   62,   65,   62,   62,   62,   62,   62,
       62,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   62,   62,   62,   62,   62,   62,   62,   62,   65,
     1357, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,

     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1362,   65,   65,
       65,   65,   62,   62,   62,   62,   62,   62,   62,   65,
       65,   62,   62,   62,   65,   62,   62,   62,   65,   62,
       62,   62,   62,   65,   62,   62,   62,   62,   65,   62,
       62,   62,   62,   62,   62,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   62,   65,   65,   65,   65,   65,
       65,   65,   62,   65,   65,   65,   65,   65,   65,   65,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   65,   65,   65,
       65,   65,   65,   65,   62,   62,   62,   62,   65,   65,

       65,   65,   65,   65, 1357, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1362,   62,   62,
       65,   65,   65,   62,   62,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   62,   62,   65,   65,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   65,   65,   65,
       65,   65,   65,   65,   62,   62,   62,   62,   62,   62,
       62,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
     1357, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1362,   65,   65,   65,   65,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   65,   65,   65,   65,   65,   65,   65,   62,   62,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   62,   62,   62,   62, 1357, 1360, 1357, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1362,   62,
     1362,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       65,   65,   65,   65,   65,   62,   62,   62,   62,   62,
     1357, 1360, 1357, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1362,   62, 1362,   62,   62,   62,   65,

       65,   65,   65,   65,   62,   62, 1357, 1357, 1357, 1360,
     1360, 1360, 1362, 1362, 1362,   62,   62,   65, 1357, 1357,
     1357, 1360, 1362, 1362, 1362,   65, 1357, 1357, 1362, 1362,
     1357, 1357, 1362, 1362, 1357, 1357, 1362, 1362, 1357, 1357,
     1362, 1362, 1357, 1357, 1362, 1362, 1357, 1357, 1362, 1362,
     1357, 1362, 1357, 1362, 1357, 1362,    0, 1357, 1357, 1357,
     1357, 1357, 1357, 1357
    } ;

static const flex_int16_t yy_nxt[8894] =
    {   0,
        8,    9,   10,   11,   12,    8,   13,   14,   15,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   37,   45,    8,   48,   49,
       50,   51,   52,   48,   53,   54,   55,   56,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   58,   59,

       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   82,   83,   77,   84,   77,   48,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   77,   84,   77,   85,   48,   86,   86,   86,   86,
       89,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   90,   92,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   94,  102,   95,  109,  133,   96,  143,
      110,  113,  144,  134,  188,  118,  111, 1356,  114,  119,

      304,   97,   98,  120,  196,  115,  112, 1355,  116,  121,
     1354,  117,  122,  109,  133,  197,  143,  110,  113,  144,
      134,  188,  118,  111,  145,  114,  119,  304,  146,  135,
      120, 1353,  115,  112,  147,  116,  121,  136,  117,  122,
      123, 1352,  124,  137,  148,  193,   86,  125,  149,  186,
      187,  145,  126, 1351,  150,  146,  135,   99,  103,  305,
      104,  147,   86,   86,  136,  310,  105,  123,  106,  124,
      137,  148,  107,  108,  125,  149,  186,  187,  180,  126,
      181,  150, 1349,  182, 1347,  103,  305,  104,   86,   86,
      138, 1345,  310,  105, 1343,  106,  139,  140,  141,  107,

      108,  127,  160,  142,  311,  180,  151,  181,  308,  128,
      182,  309,  129,  161,  306,  130, 1341,  138,  131,  162,
      152,  132,  307,  139,  140,  141,  153,  154,  127,  160,
      142,  311, 1339,  151, 1337,  308,  128, 1335,  309,  129,
      161,  306,  130,  155,  315,  131,  162,  152,  132,  307,
      316,  156,  163,  153,  154,  157,  164,  183,  158,  159,
      165,  184,  201,  319,  202,  185,  166,  203,  193,   86,
      155,  315, 1333,  326,  336, 1331,  337,  316,  156,  163,
      204,  205,  157,  164,  183,  158,  159,  165,  184, 1329,
      319,  317,  185,  166,  167,  324,  168, 1327,  318,  169,

      326,  336,  170,  337,  171,  325,  172,  173,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  317,  327,
     1323,  167,  324,  168,  328,  318,  169,  312,  313,  170,
      338,  171,  325,  172,  173,  174,  206,  339,  240,  175,
      209,  314,  176,  177,  241,  209,  327,  334,  335,  178,
      209,  328,  179, 1319,  312,  313, 1313,  338, 1239, 1239,
     1308, 1308,  174, 1307,  339,  240,  175,  209,  314,  176,
      177,  241,  209, 1294,  334,  335,  178,  209,  340,  179,
      199,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  192,  192,  346,  192,  192,  192,  192,  192,  192,

      192,  347,  242,  348, 1281,  340,  209, 1259,  351,  349,
      243,  192,  192,  192,  209,  350,  244,  210,  209,  211,
      346,  352,  353,  354,  250,  212,  209,  213,  347,  242,
      348,  214,  215,  209,  209,  351,  349,  243,  357,  358,
     1237,  209,  350,  244,  210,  209,  211, 1194,  352,  353,
      354,  250,  212,  209,  213, 1151, 1078, 1005,  214,  215,
      908,  209,  811,  685,  559,  357,  358,  192,  192,  192,
      192,  434,  192,  192,  192,  192,  192,  192,  192,  433,
      432,  359,  251,  252,  255,  360,  209,  253,  256,  192,
      192,  192,  209,  254,  257,  355,  216,  209,  356,  365,

      217,  209,  209,  209,  209,  366,  218,  209,  359,  251,
      252,  255,  360,  209,  253,  256,  219,  209,  431,  209,
      254,  257,  355,  216,  209,  356,  365,  217,  209,  209,
      209,  209,  366,  218,  209,  429,  428,  303,  302,  367,
      301,  368,  374,  219,  209,  192,  192,  220,  369,  270,
      370,  209,  375,  271,  221,  209,  376,  272,  209,  377,
      287,  222,  288,  273,  223,  289,  367,  224,  368,  374,
      209,  209,  300,  209,  220,  369,  270,  370,  209,  375,
      271,  221,  209,  376,  272,  209,  377,  287,  222,  288,
      273,  223,  289,  298,  224,  297,  296,  209,  209,  225,

      209,  290,  295,  226,  380,  291,  209,  227,  378,  292,
      208,  379,  209,  228,  381,  209,  229,  209,  382,  383,
      293,  294,  209,  209,  207,  209,  225,  209,  290,  295,
      226,  380,  291,  209,  227,  378,  292,  209,  379,  209,
      228,  381,  209,  229,  209,  382,  383,  293,  294,  209,
      209,  209,  209,  361,  209,  209,  384,  385,  230,  386,
      231,  209,  387,  362,  209,  232,  390,  394,  363,  364,
      233,  209,  192,  320,  321,  322,  194,  323,  209,  191,
      361,  189,  209,  384,  385,  230,  386,  231,  209,  387,
      362,  397,  232,  390,  394,  363,  364,  233,  209,  234,

      320,  321,  322,  329,  323,  330,  209,  235,  331,  371,
      236,  372,  403,  237,  332,  404,  238,  401,  397,  239,
      101,  333,  373,  100,   87, 1357,  234,   47,   47, 1357,
      329,  402,  330,  209,  235,  331,  371,  236,  372,  403,
      237,  332,  404,  238,  401,  405,  239,  245,  333,  373,
      341,  391,  342,  246,  247,  248,  343,  388,  402,  395,
      249,  389, 1357,  344,  392,  209, 1357,  345,  406,  393,
      396, 1357,  405, 1357,  245,  407,  410,  341,  391,  342,
      246,  247,  248,  343,  388, 1357,  395,  249,  389,  398,
      344,  392,  209,  258,  345,  406,  393,  396,  399,  411,

      209,  408,  407,  410,  412,  418,  400,  259,  419,  422,
      209, 1357,  409,  260,  261, 1357,  398,  425,  413,  426,
      258, 1357, 1357, 1357,  420,  399,  411,  209,  408, 1357,
      421,  412,  418,  400,  259,  419,  422,  209,  414,  409,
      260,  261,  209,  415,  425,  413,  426,  262,  423,  209,
      416,  420,  427,  417,  560,  263,  209,  421,  561,  264,
     1357,  424,  265,  266, 1357,  414, 1357, 1357, 1357,  209,
      415, 1357, 1357, 1357,  262,  423,  209,  416, 1357,  427,
      417,  560,  263,  209, 1357,  561,  264,  446,  424,  265,
      266,  267,  209,  209,  209,  435,  209,  209,  209,  209,

      209,  562,  268,  209,  209,  209,  209,  563,  269,  564,
      565,  209, 1357,  209,  446,  566,  209, 1357,  267,  209,
      209,  209,  435,  209,  209,  209,  209,  209,  562,  268,
      209,  209,  209,  209,  563,  269,  564,  565,  209,  274,
      209,  275,  566,  209,  276,  209,  567,  277,  437,  278,
      209,  279,  280, 1357, 1357,  209,  438, 1357, 1357,  568,
      209,  209, 1357, 1357, 1357, 1357,  274, 1357,  275, 1357,
     1357,  276,  209,  567,  277,  437,  278,  209,  279,  280,
      209,  209,  209,  438,  209,  209,  568,  209,  209,  281,
      209,  447,  209,  282,  209,  436,  283,  284,  441,  209,

      209,  209,  569,  285,  209,  573,  286,  209,  209,  574,
      575,  209,  209,  209, 1357, 1357,  281,  209,  447,  209,
      282,  209,  436,  283,  284,  441,  209,  209,  209,  569,
      285,  209,  573,  286, 1357, 1357,  574,  575, 1357, 1357,
      209,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,   92,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  199,  200,  200,  200,  200,  200,  200,  200,

      200,  200,  200,  439,  442,  570,  440,  571,  576,  577,
      578,  579, 1357,  209,  209,  209,  209,  580,  581,  209,
      209,  209,  572,  209,  582,  209,  209, 1357, 1357,  209,
      439,  442,  570,  440,  571,  576,  577,  578,  579,  209,
      209,  209,  209,  209,  580,  581,  209,  209,  209,  572,
      209,  582,  209,  209,  443,  444,  209,  448,  583,  209,
      209, 1357,  209,  584,  449,  450,  209,  209,  445,  209,
      585,  588,  209,  589,  590, 1357,  209,  591,  209, 1357,
      592,  443,  444,  209,  448,  583,  209,  209,  209,  209,
      584,  449,  450, 1357,  209,  445,  209,  585,  588,  209,

      589,  590,  455,  209,  591,  209,  209,  592,  593, 1357,
      209,  586,  456, 1357, 1357,  209,  451,  452,  453, 1357,
      454,  209,  209,  209, 1357,  209,  587,  594,  209,  455,
      209,  209,  209,  209,  457,  593,  209,  469,  586,  456,
      209,  209,  209,  451,  452,  453,  209,  454,  209,  209,
      209,  458,  209,  587,  594,  209,  459,  209,  209,  209,
      595,  457, 1357,  209,  469, 1357,  596,  209,  209,  209,
     1357, 1357, 1357,  209,  597, 1357, 1357, 1357,  458,  598,
     1357,  599,  600,  459,  460, 1357,  461,  595, 1357,  462,
      601,  602,  209,  596,  209,  463, 1357,  209,  465,  466,

     1357,  597,  464,  209,  209,  209,  598,  209,  599,  600,
      209,  460,  467,  461,  603,  209,  462,  601,  602,  209,
      604,  209,  463,  209,  209,  465,  466,  209, 1357,  464,
      209,  209,  209,  468,  209,  605,  470,  209, 1357,  467,
      606,  603,  209,  209,  209,  209,  209,  604,  471,  209,
      209,  209,  607,  608,  209,  479,  209,  209,  609,  209,
      468, 1357,  605,  470,  209,  209,  610,  606, 1357,  209,
      209,  209,  209,  209,  611,  471,  209, 1357,  209,  607,
      608, 1357,  479,  209,  209,  609,  209, 1357,  477, 1357,
      209,  209,  209,  610,  612,  209,  209,  472,  209,  473,

      209,  611,  209,  474,  478,  613,  209,  614,  482,  209,
      475,  209,  615,  616,  476,  477,  209,  209,  209,  209,
      617,  612,  209, 1357,  472,  209,  473,  209, 1357,  209,
      474,  478,  613,  209,  614,  482,  209,  475,  209,  615,
      616,  476,  480,  209,  209,  209,  209,  617,  481,  209,
      483,  620,  209, 1357,  209,  618, 1357,  209,  621, 1357,
      209, 1357,  209,  209,  209,  619, 1357,  209,  622,  480,
      484,  209, 1357,  485, 1357,  481,  209,  483,  620,  209,
      209,  209,  618,  209,  209,  621,  209,  209,  209,  209,
      209,  209,  619,  486,  209,  622,  487,  484,  209,  209,

      485,  488,  623, 1357,  624, 1357,  209,  209,  625,  628,
      209,  209,  209,  209,  209,  209, 1357, 1357, 1357,  209,
      486,  489, 1357,  487,  209,  209,  209, 1357,  488,  623,
      209,  624,  209,  209,  629,  625,  628,  209,  209,  209,
      209,  209,  209,  209,  490,  209,  209,  209,  489,  497,
      209,  209,  626,  209,  491,  209,  630,  209,  631,  209,
      209,  629,  627,  209,  209,  209,  209,  209,  496,  209,
      209,  490,  209,  209,  209,  632,  497,  209,  209,  626,
      209,  491,  209,  630, 1357,  631, 1357,  209,  633,  627,
      209,  492,  209,  209,  209,  496,  634,  635,  209,  209,

      209,  493,  632,  636,  209,  209,  494,  495, 1357,  209,
      499,  209, 1357,  209,  498,  633,  637, 1357,  492,  209,
      638,  209, 1357,  634,  635,  209,  209, 1357,  493,  209,
      636,  209,  639,  494,  495,  516,  209,  499,  209,  209,
      209,  498,  209,  637,  209,  209,  209,  638,  505,  209,
     1357,  640,  642,  645,  209,  209,  209,  209,  646,  639,
      643,  209,  516,  500,  647,  501,  209,  209,  648,  209,
      641,  209,  209,  644,  649,  505,  209,  209,  640,  642,
      645,  209,  209, 1357,  209,  646,  650,  643,  209, 1357,
      500,  647,  501, 1357,  209,  648, 1357,  641,  651,  652,

      644,  649,  653,  654,  209,  502,  655,  503,  209,  656,
      506,  657,  209,  650,  507,  209,  209,  658,  504,  209,
      209,  659,  660,  209,  209,  651,  652, 1357,  209,  653,
      654, 1357,  502,  655,  503,  209,  656,  506,  657,  209,
      661,  507,  209,  209,  658,  504,  209,  209,  659,  660,
      209,  209,  209,  662,  209,  209,  511,  663,  209,  209,
      508,  664,  665,  209,  209, 1357,  666,  661,  209,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  209,
      662,  209,  667,  511,  663,  209,  209,  508,  664,  665,
      209,  209,  209,  666,  209,  209, 1357,  512,  518,  209,

      509,  670,  209,  510,  209,  513,  209, 1357,  209,  667,
      209,  209,  209,  209, 1357,  209,  673, 1357,  209,  209,
      209,  209,  209,  209,  512,  518,  209,  509,  670,  209,
      510,  209,  513,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  673,  514,  209,  209,  209,  668,  209,
      209, 1357,  209,  674,  209, 1357,  675,  669,  209,  209,
      209,  209,  676,  209,  209,  209,  515, 1357,  209,  677,
      209,  514, 1357,  209, 1357,  668, 1357,  678,  519,  209,
      674,  209,  520,  675,  669,  209,  209,  209,  209,  676,
      209,  209,  209,  515,  209,  679,  677,  209,  209,  209,

      209,  521, 1357,  517,  678,  519,  209, 1357, 1357,  520,
      209,  209, 1357, 1357, 1357,  209, 1357,  209,  522, 1357,
     1357,  209,  679,  680,  683,  209,  209,  209,  521,  209,
      517,  523,  526,  209,  209,  525,  524,  209,  209,  209,
      209,  209,  209,  527,  209,  522,  671,  209,  672,  528,
      680,  683,  209,  209, 1357,  209,  209,  684,  523,  526,
      209,  209,  525,  524,  812,  209,  209,  209,  209,  209,
      527,  209,  813,  671,  209,  672,  528, 1357, 1357,  209,
      209,  532,  209, 1357,  684,  209,  209,  209, 1357,  209,
      534,  812,  209,  529,  814,  533,  209,  681, 1357,  813,

      815,  682,  530, 1357,  209,  209,  209, 1357,  532,  209,
      531,  535,  209,  209,  209,  209,  209,  534, 1357,  209,
      529,  814,  533,  209,  681,  209, 1357,  815,  682,  530,
      209,  209,  209,  209,  209,  209,  209,  531,  535,  816,
      209,  209,  209,  536,  817,  537,  209, 1357,  818,  209,
      209,  538,  209,  209,  209, 1357, 1357,  209,  209,  209,
      819,  209,  209,  820,  209, 1357,  816,  209,  821,  209,
      536,  817,  537,  822,  209,  818,  209,  209,  538,  823,
      209,  209,  209,  539,  209,  209,  209,  819,  541,  209,
      820,  209,  209,  824,  540,  821,  209, 1357,  209, 1357,

      822,  209,  825, 1357,  826,  827,  823, 1357,  209,  209,
      539,  209,  549,  209,  209,  541,  209,  209,  209,  209,
      824,  540,  542,  209,  209,  209,  209,  828, 1357,  825,
      209,  826,  827,  209,  209,  209,  209,  543, 1357,  549,
      209,  209,  829,  830,  209,  209,  209,  831,  544,  542,
      209,  209,  832,  209,  828,  209, 1357,  209, 1357,  833,
      209,  209,  209,  209,  543,  209, 1357,  209,  545,  829,
      830,  550, 1357,  209,  831,  544, 1357,  209,  551,  832,
      209,  688,  209,  209,  552,  209,  833,  209,  209,  209,
      209,  834,  209,  209,  209,  545,  546, 1357,  550,  209,

     1357, 1357, 1357,  547,  209,  551,  548,  209,  688,  209,
      209,  552,  209,  553,  209,  209,  835,  209,  834,  209,
      209, 1357,  209,  546,  209,  836,  209,  556,  554,  209,
      547,  209,  209,  548,  209, 1357,  209,  209,  209, 1357,
      553,  555,  837,  835,  838, 1357,  209,  209,  209,  209,
     1357,  209,  836, 1357,  556,  554,  209, 1357,  209,  209,
     1357,  209,  209, 1357,  209,  209,  209,  839,  555,  837,
     1357,  838,  209, 1357,  209,  209,  558,  557,  840,  209,
      209,  209,  209,  841,  209,  209,  209,  209,  842,  209,
      209,  209,  209,  209,  839,  843,  844,  209,  845,  209,

      209, 1357, 1357,  558,  557,  840,  209,  209,  209,  209,
      841,  209,  209,  209,  209,  842, 1357,  209,  209,  209,
      846, 1357,  843,  844,  209,  845,  847,  209,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  209,  686,
      209,  687,  209,  209,  209,  209,  848,  846,  209,  209,
      209,  209, 1357,  847,  849,  850,  851,  852,  209,  209,
      209,  209, 1357, 1357, 1357,  209,  686,  209,  687,  209,
      209,  209,  209,  848, 1357,  209,  209,  209,  209,  689,
     1357,  849,  850,  851,  852,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  691, 1357,  209,  209,  690,

      853,  209,  209,  209,  209,  854,  689,  693, 1357,  209,
     1357,  209,  692,  209,  209, 1357,  209,  209,  209,  209,
      209,  209,  691,  209,  209,  209,  690,  853,  209,  209,
      209,  209,  854,  855,  693,  694,  209,  209,  209,  692,
      209,  209,  209,  856,  695,  209,  209,  209,  857,  209,
      209,  209,  860, 1357, 1357,  209,  209, 1357,  699, 1357,
      855,  861,  694, 1357,  209,  209, 1357,  862, 1357,  209,
      856,  695,  209,  209,  209,  857,  209,  209,  209,  860,
      858,  209,  209,  209,  696,  699,  697,  209,  861,  863,
      209,  859,  209,  700,  862,  209,  209,  209, 1357,  209,

      864,  698,  867,  701,  209,  209,  209,  858,  209, 1357,
      868,  696, 1357,  697,  209,  209,  863,  209,  859,  869,
      700,  209,  209,  209,  209,  209,  209,  864,  698,  867,
      701,  209,  209,  209,  209,  704,  702,  868,  209,  209,
     1357,  209,  209,  209,  209,  870,  869, 1357,  209,  209,
     1357, 1357,  209, 1357,  703,  871, 1357, 1357,  209,  209,
      872,  209,  704,  702,  873,  209,  209,  209,  209,  209,
      209,  209,  870,  707,  705,  874,  209,  209,  209,  209,
      209,  703,  871,  209,  706,  209,  209,  872,  209, 1357,
      209,  873,  710,  209,  209, 1357,  209, 1357,  209, 1357,

      707,  705,  874,  875,  209,  209,  209,  209,  209,  876,
      209,  706,  209,  877,  209,  209,  209,  209,  878,  710,
      209,  708,  709,  711,  209,  209,  209,  209,  879,  209,
      875,  209,  865,  866,  209,  209,  876,  209, 1357, 1357,
      877,  209,  712,  209, 1357,  878,  209,  209,  708,  709,
      711,  209,  209,  209,  209,  879,  209,  713,  209,  865,
      866,  209,  209,  880,  209,  714,  715,  209,  209,  712,
      209,  209,  209,  209,  209,  881,  209,  209,  209,  209,
     1357,  882, 1357,  716,  713, 1357,  209,  209,  209,  209,
      880, 1357,  714,  715,  209,  209,  883,  209,  209,  209,

     1357,  884,  881,  209,  209,  209,  885,  209,  882,  717,
      716,  209,  209,  209,  209,  209,  209,  209,  718, 1357,
      719,  209,  209,  883,  209,  209,  886,  209,  884, 1357,
      209,  209,  209,  885,  209,  887,  717, 1357,  209,  209,
      209,  209,  720,  209,  209,  718,  209,  719,  209,  209,
      209,  209,  209,  886,  209,  888,  209,  209,  209,  209,
      721, 1357,  887, 1357,  209,  889,  209,  209,  209,  720,
      209, 1357,  722,  209,  209,  890, 1357,  209,  209,  891,
      209, 1357,  888,  209,  209, 1357,  892,  721,  209,  893,
      209,  209,  889,  209,  209,  723,  724,  209,  209,  722,

      209,  209,  890,  209,  894,  209,  891,  209,  209, 1357,
      895,  209,  209,  892,  209,  209,  893,  209,  725,  209,
      896,  209,  723,  724,  209,  209,  209,  209,  209,  897,
      209,  894,  727,  726,  898,  209,  209,  895,  209,  209,
      728,  209,  209,  899,  209,  725,  209,  896,  209,  900,
      901,  209,  209,  209,  209,  209,  897, 1357, 1357,  727,
      726,  898, 1357,  209,  209,  209,  729,  728,  209,  209,
      899,  209,  902,  209,  903,  209,  900,  901,  209,  209,
      904,  209,  209,  730,  209,  209,  731,  209,  905,  209,
     1357,  209,  209,  729,  209,  209,  732,  209,  209,  902,

      209,  903, 1357,  209, 1357,  209, 1357,  904,  209,  209,
      730,  209,  209,  731,  209,  905,  209,  733, 1357,  209,
     1357,  209,  209,  732,  209,  209,  736,  209,  906,  209,
      209,  209,  209,  209,  209,  209,  907, 1006,  209,  209,
      734,  735,  209,  209,  733,  209, 1007,  209, 1357,  209,
     1008, 1009,  209,  736,  209,  906,  209,  209,  209,  209,
      209,  209, 1010,  907, 1006,  209,  209,  734,  735,  209,
      209,  209,  209, 1007,  209,  209, 1357, 1008, 1009,  209,
     1357,  209, 1011,  209,  209, 1012,  737,  209, 1357, 1010,
     1357,  209, 1013,  209, 1357,  209,  738, 1014,  209,  209,

     1357,  739,  209,  209, 1357,  209, 1357,  209,  209, 1011,
      209,  209, 1012,  737,  209,  209, 1357,  740,  209, 1013,
      209,  741,  209,  738, 1014,  209,  209,  209,  739,  742,
      209,  209,  209,  209,  209, 1015, 1357, 1016,  209,  209,
     1017,  209,  209,  743,  740, 1018, 1019,  209,  741,  209,
     1357,  744,  209,  209,  209,  209,  742, 1357,  209, 1020,
      209,  745, 1015,  209, 1016,  209,  209, 1017,  209,  209,
      743,  209, 1018, 1019,  209,  209,  209,  209,  744,  747,
      209,  746,  209, 1021,  209,  209, 1020, 1357,  745,  209,
      209, 1022,  209,  209, 1023,  209,  209, 1024,  209, 1025,

      209, 1026,  209, 1027,  209,  209,  747,  209,  746,  209,
     1021,  209,  209,  749,  209,  748,  209,  209, 1022,  209,
      209, 1023,  209,  209, 1024,  209, 1025,  209, 1026,  750,
     1027, 1028,  209,  209,  209,  209,  209, 1029,  751,  209,
      749,  209,  748,  209,  209,  209,  209, 1030, 1357,  209,
      209,  209,  209,  754, 1031,  209,  750, 1032, 1028,  209,
      209,  209,  209, 1033, 1029,  751,  209, 1034, 1357, 1035,
      209,  209,  209,  209, 1030,  755,  209,  209,  209, 1036,
      754, 1031,  209,  209, 1032, 1037,  209,  752,  209, 1038,
     1033,  209, 1357,  209, 1034,  209, 1035,  753,  209,  209,

      209,  209,  755,  209,  209, 1357, 1036, 1039, 1357,  209,
      209,  209, 1037, 1040,  752,  756, 1038,  209,  209,  209,
      209,  209,  209, 1043,  753,  209,  209,  209,  209,  209,
      209, 1044,  757, 1045, 1039,  209,  209,  209,  209, 1046,
     1040,  758,  756,  209,  209,  209,  209,  209,  209, 1047,
     1043, 1048,  209,  209,  209, 1357,  209,  759, 1044,  757,
     1045,  209,  209,  209,  209,  209, 1046, 1049,  758, 1357,
      209,  209,  209, 1050,  209,  760, 1047,  209, 1048, 1051,
      209,  209,  209, 1357,  759, 1052, 1053,  209,  209,  209,
      209,  209,  209, 1054, 1049,  761,  209, 1055,  209, 1056,

     1050,  209,  760,  209,  209,  209, 1051,  763,  209,  209,
      762,  209, 1052, 1053,  209,  209,  209,  209,  209, 1357,
     1054,  764,  761,  209, 1055,  209, 1056,  209,  209, 1357,
      209,  209,  209, 1057,  763, 1357,  209,  762,  209, 1058,
      209,  209,  209,  209,  209,  768,  209, 1357,  764,  765,
      209, 1357,  209, 1357,  209,  209,  209, 1357,  209, 1059,
     1057, 1357,  773,  209,  209, 1357, 1058,  209,  209,  209,
      209, 1357,  768,  209,  209, 1060,  765,  209,  209,  771,
      209, 1357,  209,  209,  766,  209, 1059, 1061,  209,  773,
      209,  209,  209, 1062, 1357, 1063,  209, 1041,  209, 1064,

     1042,  209, 1060,  767, 1065,  209,  771,  209,  209, 1357,
     1066,  766,  209, 1357, 1061,  209,  772,  209, 1357,  209,
     1062,  209, 1063,  209, 1041,  209, 1064, 1042,  209, 1067,
      767, 1065,  209,  209,  209,  209,  769, 1066, 1068,  209,
      775, 1069, 1070,  772,  209,  209, 1357,  209,  209,  770,
      209, 1071,  209, 1357, 1357,  209, 1067,  209, 1357,  209,
      209,  209,  774,  769, 1072, 1068,  209,  775, 1069, 1070,
     1073,  209,  209,  209,  209,  209,  770,  776, 1071,  209,
      209,  209, 1074,  209,  209,  209, 1075, 1076,  209,  774,
     1357, 1072, 1357,  209,  777, 1357,  209, 1073, 1077, 1357,

      209,  209,  209, 1357,  776, 1357,  209,  209,  209, 1074,
      209, 1152,  209, 1075, 1076,  209, 1153,  209, 1357,  209,
      209,  777,  779,  209,  778, 1077,  209,  209,  209,  209,
      781,  209,  209,  209,  209,  209, 1154,  780, 1152,  209,
      209, 1155,  209, 1153,  209,  209,  209,  209, 1357,  779,
      209,  778, 1357,  209,  209,  209,  209,  781,  209,  209,
     1357,  209,  209, 1154,  780, 1357,  209,  209, 1155,  209,
     1357,  209,  209, 1357,  209,  209,  209,  209, 1357,  209,
      209,  209,  209,  209,  782,  785,  209,  209, 1156,  209,
      784,  209,  209,  209,  783,  209,  209,  209,  209,  209,

      209,  786,  209,  209, 1357,  209,  209,  209,  209, 1357,
      209,  782,  785,  209,  209, 1156,  209,  784,  209,  209,
      209,  783,  209,  209,  209, 1157,  209,  209,  786,  209,
     1158,  209,  209,  788, 1159,  209,  209,  787, 1160, 1161,
      209,  209,  209, 1162,  209,  209,  789, 1163, 1357,  209,
     1357, 1357, 1157, 1357,  209, 1357,  209, 1158,  209, 1164,
      788, 1159,  209,  209,  787, 1160, 1161,  209,  209,  209,
     1162,  209,  209,  789, 1163,  209,  209,  209,  209, 1165,
      791,  209,  209,  790, 1357,  209, 1164,  209,  792, 1166,
      209,  209,  209, 1357, 1167,  209, 1168, 1357,  209, 1357,

     1357,  209,  209, 1169,  209,  209, 1165,  791,  209,  209,
      790,  209,  209, 1357,  209,  792, 1166,  209,  209,  209,
      794, 1167,  209, 1168,  209,  209,  793,  209,  209,  795,
     1169,  209, 1170, 1357,  209,  209,  209, 1171,  209,  209,
      209, 1357,  209, 1357,  209,  209,  209,  794, 1357,  209,
      796,  209,  799,  793,  209,  797,  795,  798,  209, 1170,
      209,  209,  209,  209, 1171,  209,  209,  209,  209,  209,
      801,  209,  209,  209, 1172,  209,  209,  796, 1357,  799,
      209, 1357,  797, 1357,  798, 1173,  800,  209, 1357,  209,
      209, 1174,  209, 1175,  209,  209,  209,  801,  209, 1357,

      209, 1172,  209,  209, 1357,  802, 1176,  209,  209, 1357,
      209, 1357, 1173,  800, 1177,  803, 1178,  209, 1174, 1357,
     1175,  209, 1179,  209,  209,  209,  209,  209, 1180, 1357,
      209,  209,  802, 1176, 1357,  209,  209,  209,  209, 1357,
      209, 1177,  803, 1178, 1181,  209,  804, 1357, 1182, 1179,
      209,  209, 1183,  209,  209, 1180,  209,  209,  209,  209,
     1184,  209,  806,  209,  209,  209,  209,  209,  805,  209,
     1185, 1181,  209,  804,  809, 1182, 1186,  209,  209, 1183,
      209,  209, 1187,  209,  209,  209,  209, 1184,  209,  806,
      209,  209,  209,  209,  807,  805,  209, 1185,  808,  209,

     1357,  809, 1357, 1186,  209,  209, 1357,  209,  209, 1187,
      209, 1188,  209, 1189,  810,  209,  209,  209,  209,  209,
      209,  807,  909,  209, 1190,  808,  209,  209,  209,  209,
     1357,  209, 1191,  910,  209,  209, 1357,  209, 1188,  209,
     1189,  810,  209,  209, 1192,  209, 1357,  209,  209,  909,
      209, 1190,  209,  209,  209,  209,  209,  209,  209, 1191,
      910,  209, 1193,  209, 1357,  209,  209,  914,  911, 1238,
     1240, 1192,  209,  912, 1241,  209, 1357,  209,  209,  209,
      209, 1242,  209,  915,  209,  209, 1243,  209,  209, 1193,
      209,  913,  209,  209,  914,  911, 1238, 1240,  209,  209,

      912, 1241, 1357,  209,  209,  209, 1357, 1244, 1242,  209,
      915, 1245,  917, 1243,  209,  209,  209,  209,  913,  916,
      209,  209,  209,  209,  209,  209, 1357,  209,  924,  209,
      209,  209,  209,  209, 1244, 1357, 1246,  209, 1245,  917,
     1357, 1247, 1357,  209,  209, 1357,  916,  209,  209,  209,
      209,  209, 1248,  918,  209,  924,  209,  209,  209,  209,
      209,  209,  209, 1246,  209,  209,  209,  209, 1247,  209,
     1357, 1249,  209, 1250,  209,  209, 1251,  209, 1252, 1248,
      918, 1253,  209,  919,  209,  209, 1357,  209,  209,  209,
     1357,  209,  209,  209,  209, 1254,  209,  209, 1249,  209,

     1250, 1255,  209, 1251,  209, 1252, 1357,  209, 1253,  209,
      919,  209,  209,  209,  209,  209,  209,  921,  209,  920,
      209,  209, 1254,  209,  209, 1256,  209, 1257, 1255,  922,
     1258,  209, 1282,  209,  209,  209,  209, 1357,  209,  209,
      209, 1357,  209,  209,  921,  209,  920,  209,  209, 1357,
      209, 1284, 1256,  209, 1257,  209,  922, 1258,  209, 1282,
      209,  209,  209,  209,  925,  209,  209, 1357,  209, 1285,
     1286,  209,  209,  927,  209,  209,  923, 1287, 1284,  209,
      209,  209,  209,  209,  209,  209, 1288, 1289,  209,  209,
     1357,  925,  209, 1290,  926,  209, 1285, 1286,  209,  209,

      927,  209,  209,  923, 1287,  209,  209,  209,  209,  209,
      209,  209,  209, 1288, 1289,  209,  209,  209,  928,  209,
     1290,  926, 1357, 1357,  209,  209,  209, 1357,  209,  209,
      209,  209,  209,  209, 1357,  209,  209,  929,  209,  930,
      209, 1357,  209,  209,  209,  928,  209,  209, 1291,  209,
      931,  209,  209,  932,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  929,  209,  930,  209,  209, 1357,
      209, 1239, 1239,  209,  209, 1291,  209,  931,  933, 1292,
      932,  209, 1293, 1357, 1309, 1357,  209,  209,  209,  209,
      209,  935,  209,  209,  209,  209,  934, 1310,  209,  209,

      209, 1311,  209,  209, 1357,  933, 1292, 1261, 1239, 1293,
     1283, 1309,  209, 1312,  209,  209,  209,  209,  935,  209,
      209,  209,  209,  934, 1310,  209,  209,  209, 1311,  209,
      209,  209, 1357,  209, 1315, 1357, 1321, 1283,  209,  209,
     1312, 1357,  209,  209,  209, 1322, 1296, 1325, 1328,  209,
     1330, 1357, 1332, 1357,  209,  209, 1334,  209,  209,  936,
      209, 1315,  209, 1321,  209,  209,  209,  209,  937, 1336,
      209,  209, 1322, 1296, 1325, 1328,  209, 1330,  209, 1332,
      209, 1357,  209, 1334,  209,  209,  936,  938, 1357,  209,
      209,  209, 1338,  209,  209,  937, 1336, 1357,  209, 1357,

      940, 1340, 1342,  209, 1344,  209, 1346,  209,  209, 1357,
      209,  209,  209,  209,  938,  209,  939,  209,  209, 1338,
      209,  941, 1348,  209, 1308, 1308,  942,  940, 1340, 1342,
      209, 1344,  209, 1346,  209,  209,  209,  209,  209,  209,
      209, 1350,  209,  939,  209,  209,  209,  209,  941, 1348,
      209, 1357,  209,  942,  209, 1357,  209,  209,  209,  209,
     1357,  209,  209,  209,  209, 1357,  209, 1320, 1350,  943,
     1357,  209,  209,  209,  209, 1357,  945, 1357,  209,  209,
      209,  209,  209,  209,  209,  209, 1357, 1357,  944,  209,
      209,  209, 1357, 1357, 1320, 1357,  943, 1357,  209,  209,

      209,  209,  209,  945,  209,  209,  209,  209,  209,  209,
     1357,  209,  209, 1357,  209,  944, 1357,  209, 1357, 1314,
     1308, 1357,  209, 1357,  209,  209,  946,  209, 1357,  209,
      209,  209,  209,  209,  209,  209,  209, 1357, 1357,  209,
      209,  209,  209,  947,  209, 1357, 1357, 1357,  209,  209,
      209,  209,  209,  946,  209, 1357, 1357,  209, 1357,  209,
     1357,  209, 1324,  209,  209, 1357,  209,  209,  948,  209,
      947,  209, 1357,  209, 1357,  209, 1357,  209,  209,  209,
      209,  209,  209, 1357, 1357, 1357, 1357,  209, 1357, 1324,
     1357,  209,  209,  209,  209,  948,  209, 1357,  950, 1357,

      209,  949,  209, 1357, 1357,  209,  209,  209,  209,  209,
     1357, 1357, 1357, 1357,  209,  209, 1357,  209,  209,  209,
     1357,  209,  209,  209, 1357,  950,  209,  952,  949,  209,
      209, 1357, 1357,  209, 1357,  209,  209, 1357, 1357,  951,
     1357, 1357,  209, 1357,  209,  209,  209, 1357, 1357,  209,
     1357, 1357, 1357,  209,  952, 1357, 1357,  209,  209, 1357,
      209, 1357, 1357,  209,  953,  209,  951, 1357, 1357,  209,
      209,  209,  209,  209,  209,  954,  209, 1357, 1357,  209,
     1357,  209, 1357, 1357,  209,  209, 1357,  209,  957, 1357,
      209,  953,  209, 1357, 1357,  209,  209,  209,  209,  209,

      209,  209,  954,  209, 1357, 1357,  209, 1357,  209,  955,
     1357,  209, 1357, 1357,  209,  957,  209,  209, 1357, 1357,
      956,  209,  209,  209, 1357,  209,  209,  209, 1357, 1357,
      209, 1357,  209, 1357,  209,  209,  955, 1357, 1357,  209,
     1357,  209, 1357,  209,  209, 1357, 1357,  956,  209, 1357,
      209, 1357,  209,  209, 1357, 1357,  209,  209,  209,  209,
     1357,  209,  209,  209, 1357,  209,  209,  209,  209, 1357,
     1357,  209,  209,  958,  209, 1357,  209,  209, 1357, 1357,
     1357,  209, 1357,  209, 1357,  209,  209, 1357, 1357, 1357,
      209, 1357,  209, 1357,  209,  209, 1357, 1357, 1357,  209,

      958,  209, 1357,  209,  209,  959,  960,  209,  209, 1357,
      209,  209,  209,  209, 1357,  209,  209,  209, 1357, 1357,
      961,  209, 1357, 1357,  209, 1357,  209, 1357, 1357, 1357,
      209,  209,  959,  960,  209, 1357, 1357,  209,  209,  209,
      209, 1357,  209,  209,  209, 1357, 1357,  961,  209, 1357,
     1357,  209,  209,  209,  209, 1357, 1357,  209,  209,  962,
      963, 1357,  964,  209,  209,  209,  209,  209,  209,  965,
      209, 1357, 1357,  209, 1357,  209, 1357, 1357,  209,  209,
     1357,  209, 1357, 1357,  209, 1357,  962,  963,  966,  964,
      209,  209,  209,  209,  209,  209,  965,  209, 1357,  209,

      209, 1357,  209,  209,  209,  209,  967, 1357,  209,  209,
     1357,  209,  209, 1357, 1357,  966, 1357, 1357,  209,  209,
     1357,  209, 1357, 1357, 1357, 1357,  209, 1357,  209, 1357,
      209,  209, 1357,  967,  968,  209,  209,  209,  209,  209,
     1357,  209, 1357, 1357,  209,  209,  209,  209, 1357,  209,
      969, 1357, 1357,  209,  209,  209, 1357,  209, 1357,  209,
     1357,  968,  970,  209,  209,  209, 1357,  209,  209,  209,
     1357,  209, 1357,  209,  209, 1357,  209,  969,  209, 1357,
      209,  209,  972,  209,  209, 1357,  209,  209,  209,  970,
      209,  209, 1357, 1357,  209,  971,  209,  209,  209, 1357,

      209, 1357, 1357, 1357, 1357,  209, 1357,  209, 1357,  972,
      209, 1357, 1357,  209,  209,  209,  973,  209,  209, 1357,
      209, 1357,  971,  209,  209,  209,  209,  974, 1357, 1357,
     1357,  209, 1357,  209,  209,  209,  209, 1357, 1357, 1357,
      209,  209, 1357,  973,  209, 1357, 1357,  209, 1357, 1357,
      209,  209, 1357,  209,  974, 1357, 1357,  975,  209, 1357,
      209,  209,  209,  209, 1357,  209,  976, 1357,  209,  209,
      209,  209, 1357,  209, 1357, 1357,  209, 1357,  209,  209,
     1357,  209, 1357, 1357,  975, 1357,  209, 1357,  209,  209,
     1357,  209,  209,  976, 1357,  209,  209,  209,  209,  977,

      209,  209, 1357,  209, 1357, 1357,  209, 1357,  209, 1357,
      209,  209, 1357,  209,  209, 1357,  209, 1357,  209, 1357,
      209, 1357,  209,  978, 1357,  209,  977, 1357,  209,  209,
      209, 1357, 1357, 1357, 1357,  209,  980,  209,  209,  209,
      979,  209, 1357,  209,  209,  209, 1357,  209,  209,  209,
      978, 1357,  209,  209,  209,  982,  209,  209, 1357,  209,
      209, 1357,  209,  980,  209,  209,  209,  979, 1357,  209,
      209,  209,  209,  209,  983,  209,  209,  981, 1357,  209,
      209,  209,  982,  209, 1357,  209,  209,  209, 1357,  209,
      209,  209,  209,  984, 1357,  209,  209,  209,  209, 1357,

      209,  983,  209,  209,  981, 1357,  209,  985,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      984,  209,  209,  986,  209,  209, 1357,  209, 1357,  209,
      209,  209, 1357,  209,  985,  209,  209, 1357,  209, 1357,
      209,  209,  209,  209, 1357,  209,  209,  209,  209,  988,
      986,  987,  209,  209,  209, 1357,  209,  209,  209,  209,
      209,  209,  989, 1357, 1357,  209, 1357,  209, 1357,  209,
      209,  209,  209, 1357,  209, 1357,  988, 1357,  987,  209,
      209,  209, 1357,  209,  209, 1357,  209,  209,  209,  989,
     1357,  209,  209,  209,  209,  209,  209,  209,  209,  209,

      990, 1357, 1357, 1357,  209,  209,  209,  209,  209,  999,
     1357,  991, 1357,  209,  209, 1357,  209, 1357,  209,  209,
      209, 1357,  209,  209,  209,  209, 1357,  990,  992,  209,
      209,  209,  209,  209,  209,  209,  999,  209,  991,  209,
      209, 1357, 1357,  209,  209, 1357,  209, 1357, 1357,  209,
      209,  209,  209,  209, 1357,  992,  209,  209,  209, 1357,
      993, 1357,  209,  209,  209,  209,  209,  994, 1357, 1357,
     1357,  209,  209, 1357, 1357, 1357,  209,  209,  209,  209,
      209,  209,  996, 1357, 1357,  209,  209,  993,  995, 1357,
      209,  209,  209,  209,  994,  209, 1357, 1357, 1357,  209,

      209, 1357, 1357, 1357,  209,  209,  209, 1357,  209,  996,
     1357, 1357, 1357,  209, 1357,  995,  998,  209,  209,  209,
      209,  209,  209,  209,  209,  997, 1357,  209,  209,  209,
     1357, 1357,  209,  209, 1357, 1357, 1357,  209, 1357, 1357,
     1000,  209, 1357,  998,  209, 1357,  209,  209,  209,  209,
      209,  209,  997,  209, 1357,  209,  209,  209, 1357, 1001,
      209,  209,  209, 1357,  209,  209,  209, 1000,  209,  209,
     1357,  209,  209, 1357,  209,  209,  209, 1357, 1002,  209,
      209,  209,  209, 1357,  209,  209, 1001, 1003,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,

      209, 1357,  209, 1357, 1357, 1002,  209,  209,  209,  209,
      209, 1357,  209,  209, 1003,  209, 1357,  209,  209, 1357,
     1004,  209,  209, 1357,  209,  209,  209,  209,  209,  209,
     1357,  209, 1357,  209,  209, 1357,  209,  209,  209, 1357,
      209,  209,  209, 1357, 1357, 1357, 1357, 1004, 1357, 1357,
     1357, 1357,  209,  209, 1357,  209,  209,  209,  209,  209,
      209, 1357, 1357,  209,  209,  209, 1357, 1357,  209,  209,
      209, 1079,  209, 1357, 1357, 1080, 1357,  209, 1357,  209,
     1357, 1357,  209,  209,  209,  209,  209,  209, 1357, 1357,
     1357,  209, 1357,  209, 1357,  209,  209,  209, 1079,  209,

     1357, 1081, 1080,  209,  209,  209,  209, 1357, 1357,  209,
      209,  209,  209, 1357,  209, 1357, 1357, 1357, 1357,  209,
      209,  209,  209,  209, 1357, 1357, 1357, 1083, 1081,  209,
      209,  209,  209, 1357, 1082,  209, 1357, 1357,  209,  209,
     1357,  209, 1084,  209, 1357, 1357,  209,  209,  209, 1357,
      209,  209, 1357,  209, 1083, 1357,  209, 1357,  209, 1357,
     1357, 1082,  209,  209, 1357, 1085,  209,  209,  209, 1084,
      209,  209, 1357, 1357,  209, 1357, 1357,  209,  209,  209,
      209, 1086, 1357, 1357, 1357, 1357,  209,  209, 1357, 1357,
      209,  209, 1085,  209,  209,  209, 1357, 1357,  209,  209,

      209, 1087, 1357,  209,  209,  209,  209, 1357, 1086, 1088,
     1357, 1089, 1357,  209,  209,  209, 1357, 1357,  209,  209,
      209,  209,  209, 1357, 1357,  209,  209,  209, 1087,  209,
      209,  209,  209, 1357, 1357,  209, 1088,  209, 1089, 1090,
     1357, 1357,  209,  209,  209,  209,  209, 1091,  209,  209,
     1357, 1357,  209,  209, 1357,  209,  209, 1357,  209,  209,
     1357, 1357,  209,  209,  209, 1092, 1090, 1357, 1357, 1093,
      209,  209,  209,  209, 1091,  209,  209,  209, 1357, 1357,
      209, 1095,  209,  209, 1357,  209,  209, 1094, 1357,  209,
      209,  209, 1092,  209,  209, 1357, 1093, 1357, 1357,  209,

      209,  209,  209,  209,  209,  209, 1357,  209, 1095, 1096,
      209, 1357,  209,  209, 1094,  209,  209, 1357,  209, 1357,
      209,  209, 1357,  209, 1357,  209,  209, 1099,  209,  209,
      209,  209,  209,  209,  209, 1357, 1096,  209, 1357,  209,
      209,  209,  209, 1098, 1097, 1357, 1357,  209,  209,  209,
      209, 1357,  209,  209, 1099, 1357,  209, 1100,  209, 1357,
      209,  209, 1357, 1357,  209, 1357,  209,  209,  209, 1357,
     1098, 1097, 1357, 1357,  209,  209,  209,  209, 1357,  209,
      209,  209,  209, 1104, 1100,  209,  209, 1357,  209,  209,
     1357,  209,  209,  209,  209,  209, 1101, 1102, 1357,  209,

     1103,  209,  209, 1357,  209,  209,  209, 1357,  209,  209,
     1104, 1357,  209,  209, 1357, 1357,  209, 1357,  209,  209,
      209, 1357,  209, 1101, 1102, 1357,  209, 1103,  209,  209,
      209, 1105,  209,  209,  209,  209, 1357,  209, 1357,  209,
      209, 1357, 1357,  209, 1357,  209, 1357, 1357, 1357, 1357,
      209, 1357, 1357,  209, 1357,  209, 1357,  209, 1105, 1357,
      209,  209,  209, 1357,  209,  209,  209,  209, 1357,  209,
      209, 1357,  209, 1357,  209,  209, 1357,  209,  209, 1108,
      209,  209,  209, 1106,  209,  209,  209, 1357,  209, 1107,
      209,  209,  209, 1357,  209, 1109,  209, 1357, 1357, 1357,

      209,  209,  209, 1357, 1357,  209, 1108, 1357,  209, 1357,
     1106,  209,  209,  209, 1357,  209, 1107,  209,  209, 1110,
     1357,  209, 1109,  209,  209,  209,  209,  209, 1357, 1357,
      209,  209,  209, 1357,  209,  209,  209, 1357, 1357,  209,
     1357, 1357, 1357, 1357,  209, 1357, 1110, 1357, 1357, 1357,
      209,  209,  209,  209, 1357, 1357, 1357,  209,  209,  209,
     1357,  209,  209,  209, 1357,  209,  209,  209,  209, 1357,
      209,  209,  209, 1111,  209,  209,  209,  209, 1357, 1357,
      209,  209, 1357, 1357, 1357, 1357,  209, 1357, 1357, 1357,
     1357, 1357,  209, 1357,  209,  209, 1357,  209, 1357,  209,

     1111,  209,  209,  209,  209, 1357, 1357,  209,  209,  209,
     1113,  209, 1357,  209,  209, 1357,  209, 1112, 1357, 1357,
      209,  209,  209, 1357,  209, 1357, 1357, 1357, 1357, 1114,
      209, 1357, 1115, 1116,  209,  209,  209, 1113,  209, 1357,
      209,  209, 1357,  209, 1112,  209, 1357,  209,  209,  209,
     1357,  209, 1357, 1357, 1357, 1357, 1114,  209, 1357, 1115,
     1116,  209,  209,  209,  209,  209,  209,  209, 1357, 1117,
      209,  209,  209, 1357, 1357,  209,  209,  209, 1357,  209,
     1357, 1357, 1357, 1357,  209, 1357, 1357, 1357, 1357,  209,
      209,  209,  209,  209, 1357, 1357, 1117,  209,  209, 1357,

     1357, 1357,  209,  209,  209,  209,  209,  209,  209, 1118,
      209,  209,  209,  209, 1357,  209,  209,  209, 1357,  209,
      209,  209, 1357,  209, 1357, 1357, 1357, 1357, 1119,  209,
     1357, 1357,  209,  209,  209,  209, 1118,  209, 1357,  209,
      209, 1120,  209, 1357,  209, 1357,  209,  209,  209, 1357,
      209, 1357,  209, 1357,  209, 1119,  209, 1357, 1357,  209,
      209, 1357, 1357,  209,  209,  209, 1357, 1357, 1120, 1357,
      209, 1121, 1122, 1357, 1357,  209,  209, 1357,  209,  209,
     1357,  209, 1357,  209, 1357, 1357,  209, 1357,  209, 1357,
      209,  209,  209, 1357, 1357, 1357, 1357,  209, 1121, 1122,

     1357, 1357,  209,  209,  209,  209,  209,  209, 1357,  209,
      209,  209, 1123, 1357,  209,  209,  209, 1124,  209,  209,
      209,  209, 1357, 1357, 1357,  209, 1357,  209, 1357, 1357,
      209,  209, 1357,  209,  209, 1357,  209,  209,  209, 1123,
     1357,  209, 1357,  209, 1124,  209,  209,  209,  209, 1357,
     1357,  209,  209, 1357,  209,  209, 1357,  209, 1126,  209,
     1357,  209, 1357,  209,  209, 1357, 1125, 1357, 1357,  209,
     1357,  209, 1357, 1357, 1357, 1357, 1357, 1357,  209,  209,
     1357, 1357,  209, 1357, 1357, 1126,  209,  209,  209, 1357,
      209,  209, 1357, 1125, 1357,  209,  209,  209,  209,  209,

     1127, 1357, 1357, 1357, 1357,  209,  209,  209, 1128,  209,
     1357, 1357, 1357,  209,  209,  209, 1357, 1357,  209,  209,
     1357, 1129,  209, 1357,  209,  209,  209, 1127, 1357,  209,
     1357,  209,  209,  209,  209, 1128,  209, 1130, 1357, 1357,
      209,  209,  209,  209, 1357,  209,  209, 1357, 1129,  209,
     1357, 1357,  209,  209, 1357,  209,  209, 1357,  209, 1131,
      209, 1357, 1357,  209, 1130,  209, 1357,  209,  209, 1357,
      209, 1132,  209,  209, 1357,  209,  209,  209, 1357,  209,
      209,  209,  209,  209, 1357,  209, 1131,  209, 1133,  209,
      209, 1357,  209,  209,  209,  209, 1357,  209, 1132,  209,

      209,  209,  209,  209,  209, 1135,  209,  209,  209,  209,
      209,  209,  209,  209,  209, 1133,  209, 1357, 1134, 1357,
      209,  209,  209,  209,  209, 1357,  209, 1357,  209, 1137,
      209, 1357, 1135,  209,  209, 1357,  209,  209,  209, 1357,
      209, 1136,  209,  209, 1357, 1134,  209,  209,  209,  209,
      209, 1357,  209,  209, 1138, 1357, 1137, 1357, 1357,  209,
      209, 1357,  209, 1357,  209,  209, 1357,  209, 1136,  209,
      209, 1139,  209,  209,  209, 1357,  209,  209, 1357,  209,
      209, 1138, 1357,  209, 1357,  209,  209, 1357, 1357,  209,
      209, 1140,  209, 1357,  209,  209, 1141, 1357, 1139,  209,

     1357, 1357, 1142, 1357,  209, 1357, 1357,  209, 1357,  209,
      209, 1357,  209,  209,  209,  209, 1357,  209, 1140,  209,
      209, 1357,  209, 1141, 1357,  209,  209, 1357, 1143, 1142,
     1357, 1357, 1357,  209,  209, 1357,  209,  209,  209,  209,
      209,  209,  209, 1357,  209, 1357,  209,  209, 1357,  209,
     1357, 1357,  209,  209, 1357, 1143, 1357, 1144, 1145,  209,
      209,  209, 1357,  209,  209,  209,  209,  209, 1357,  209,
     1357,  209, 1357, 1357, 1357, 1357,  209,  209, 1357,  209,
     1357, 1357, 1357, 1146, 1144, 1145,  209,  209,  209, 1357,
      209,  209, 1357,  209,  209,  209,  209, 1357, 1357, 1357,

      209,  209,  209,  209,  209, 1357,  209, 1147, 1148, 1357,
     1146,  209,  209, 1357,  209, 1357, 1357, 1357,  209,  209,
      209,  209,  209, 1357, 1357, 1357,  209,  209,  209,  209,
      209,  209, 1357, 1357, 1147, 1148, 1357, 1357,  209,  209,
     1357, 1150, 1357,  209, 1357,  209,  209, 1357,  209, 1149,
      209, 1357,  209,  209,  209,  209, 1357, 1357,  209,  209,
     1357, 1357, 1357, 1357,  209, 1357, 1357, 1357, 1150, 1357,
      209,  209,  209,  209, 1357, 1357, 1149,  209,  209,  209,
     1357,  209,  209,  209, 1195,  209,  209,  209,  209,  209,
     1357,  209,  209,  209,  209, 1357, 1357,  209,  209,  209,

      209,  209, 1357, 1196,  209,  209, 1357, 1357,  209,  209,
      209, 1195,  209,  209,  209,  209,  209, 1357, 1357,  209,
      209,  209, 1357, 1357,  209,  209,  209,  209,  209, 1357,
     1196,  209,  209, 1357, 1357,  209,  209,  209, 1198,  209,
      209, 1197,  209, 1357, 1357, 1357,  209, 1357,  209, 1357,
     1357,  209,  209, 1357,  209, 1357, 1357,  209,  209,  209,
     1357,  209, 1357, 1357,  209, 1198,  209,  209, 1197,  209,
     1357, 1357, 1199,  209,  209,  209,  209,  209,  209, 1357,
      209, 1200,  209, 1357,  209,  209,  209,  209,  209, 1357,
     1357, 1357,  209, 1201,  209,  209, 1357, 1357, 1357, 1199,

      209,  209, 1357,  209,  209,  209, 1357,  209, 1200,  209,
     1357, 1357, 1357,  209,  209, 1357,  209, 1357,  209,  209,
     1201, 1357,  209,  209, 1357, 1357, 1357,  209,  209,  209,
     1357,  209,  209, 1357, 1357, 1357,  209, 1202, 1357, 1357,
     1357,  209, 1357,  209, 1357,  209, 1357,  209, 1203,  209,
      209, 1204, 1357, 1357,  209,  209,  209, 1357,  209,  209,
      209, 1357,  209,  209, 1202, 1357, 1357,  209,  209, 1357,
     1357, 1357,  209, 1357,  209, 1203,  209, 1357, 1204, 1357,
     1357,  209, 1357, 1205, 1357,  209,  209,  209, 1357,  209,
      209, 1357, 1357, 1357,  209,  209,  209, 1357,  209,  209,

     1357, 1357, 1357,  209, 1206, 1357, 1357,  209,  209,  209,
     1205, 1357,  209, 1357,  209, 1357, 1207,  209, 1357,  209,
     1357, 1357,  209,  209, 1357,  209,  209, 1357,  209, 1357,
      209, 1206, 1357,  209,  209,  209,  209,  209,  209,  209,
     1357,  209, 1357, 1207,  209, 1357,  209, 1208, 1357,  209,
      209, 1357,  209,  209, 1357,  209,  209,  209,  209, 1357,
      209, 1357,  209,  209,  209,  209,  209, 1357,  209, 1357,
     1357,  209, 1357, 1357, 1208, 1357,  209,  209, 1357,  209,
      209, 1357,  209,  209,  209,  209,  209,  209,  209,  209,
      209, 1357,  209,  209, 1357,  209, 1209, 1357,  209, 1357,

      209,  209, 1357, 1357, 1357,  209,  209,  209, 1357,  209,
      209,  209, 1210,  209,  209,  209,  209,  209, 1357,  209,
      209,  209,  209, 1209, 1357,  209, 1357,  209,  209, 1357,
     1357, 1357,  209,  209,  209, 1357,  209,  209,  209, 1210,
     1357,  209, 1211,  209,  209, 1357,  209,  209,  209,  209,
      209, 1212,  209, 1357,  209,  209,  209,  209, 1357,  209,
      209,  209,  209,  209, 1357,  209, 1357,  209,  209, 1211,
      209, 1357,  209,  209,  209,  209, 1357,  209, 1212,  209,
     1357,  209,  209,  209,  209, 1357,  209,  209, 1357,  209,
     1357,  209,  209, 1357,  209,  209,  209,  209, 1357,  209,

      209,  209,  209, 1357,  209, 1357,  209, 1357,  209, 1357,
     1357,  209, 1357, 1357,  209, 1357,  209, 1357,  209, 1357,
     1357, 1357,  209,  209,  209, 1357,  209,  209,  209, 1357,
      209,  209, 1357,  209, 1357,  209,  209, 1357,  209, 1213,
     1214,  209, 1357,  209,  209, 1357,  209, 1357, 1215, 1357,
      209,  209,  209,  209,  209, 1357,  209,  209,  209, 1357,
      209, 1357,  209,  209,  209, 1357, 1213, 1214, 1357, 1357,
     1357,  209,  209,  209,  209, 1215,  209,  209, 1357,  209,
      209,  209, 1357,  209, 1357,  209,  209,  209,  209,  209,
      209,  209, 1357, 1357, 1357, 1216,  209, 1357, 1357,  209,

      209,  209,  209,  209,  209, 1357, 1357,  209, 1357,  209,
     1357, 1357, 1357,  209,  209,  209, 1357,  209, 1217, 1357,
      209, 1218, 1216,  209, 1357,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209, 1357,  209, 1357,  209,  209,
     1357,  209, 1357, 1357,  209, 1217, 1357,  209, 1218, 1357,
     1357, 1357,  209,  209, 1357,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209, 1357,  209,  209,
     1219,  209,  209, 1357,  209, 1357, 1220, 1357, 1357, 1357,
     1357, 1357,  209,  209,  209,  209, 1357, 1357, 1221,  209,
      209,  209,  209, 1357,  209,  209,  209, 1219, 1222,  209,

     1357,  209,  209, 1220,  209, 1357,  209, 1357,  209,  209,
      209,  209, 1357, 1357, 1357, 1221,  209, 1357,  209,  209,
      209,  209, 1357, 1357,  209, 1222, 1223, 1357, 1357,  209,
      209,  209, 1224,  209,  209,  209, 1357,  209,  209, 1357,
      209, 1357, 1357,  209,  209,  209, 1225,  209,  209, 1357,
     1357,  209,  209, 1223,  209, 1357, 1357,  209,  209, 1224,
     1357,  209,  209, 1357,  209,  209, 1357,  209,  209, 1226,
      209,  209,  209, 1225,  209,  209,  209, 1227,  209,  209,
     1357,  209,  209,  209, 1357,  209, 1357, 1357,  209,  209,
     1357,  209, 1357, 1357, 1357,  209, 1226,  209, 1357,  209,

      209,  209, 1228,  209, 1227,  209,  209,  209,  209,  209,
      209, 1357,  209,  209, 1229,  209,  209, 1357,  209, 1357,
     1357,  209, 1357, 1357, 1357, 1357,  209,  209, 1357, 1228,
      209, 1357,  209,  209,  209,  209, 1357,  209, 1230,  209,
      209, 1229,  209,  209, 1357,  209, 1357, 1357,  209,  209,
     1260,  209, 1357,  209,  209, 1357,  209,  209, 1357,  209,
      209,  209, 1231, 1232,  209, 1230, 1357, 1357, 1357,  209,
      209, 1357,  209,  209,  209,  209,  209, 1260,  209,  209,
      209,  209, 1357,  209,  209,  209, 1357,  209,  209, 1231,
     1232, 1357, 1357, 1357, 1357, 1357,  209,  209,  209,  209,

      209,  209,  209,  209, 1233, 1357,  209,  209,  209, 1234,
     1357,  209,  209, 1357,  209, 1357,  209,  209, 1357,  209,
      209,  209,  209,  209,  209,  209,  209,  209, 1357,  209,
      209, 1233,  209, 1357, 1357,  209, 1234, 1357,  209, 1357,
      209,  209, 1357,  209,  209,  209,  209,  209,  209,  209,
      209,  209, 1357,  209,  209, 1357,  209, 1357, 1357,  209,
     1357,  209, 1357,  209,  209,  209,  209,  209,  209, 1357,
     1235,  209,  209,  209, 1357, 1357,  209,  209, 1357, 1357,
      209, 1357,  209, 1357, 1357, 1357, 1357,  209,  209, 1357,
      209,  209,  209,  209, 1236,  209,  209, 1235,  209, 1357,

      209,  209, 1357,  209, 1357, 1357,  209,  209,  209,  209,
      209, 1357, 1357, 1357,  209,  209, 1357, 1357, 1357,  209,
      209, 1236,  209,  209,  209, 1357, 1357, 1357,  209,  209,
     1357, 1357, 1357,  209,  209,  209,  209,  209,  209, 1357,
     1357, 1357,  209,  209, 1357, 1357, 1357,  209,  209,  209,
      209,  209,  209, 1357,  209, 1357,  209,  209,  209, 1357,
     1357,  209,  209,  209,  209,  209, 1261, 1239,  209, 1357,
      209, 1357,  209, 1357,  209,  209, 1357,  209,  209,  209,
     1357,  209, 1357, 1262,  209,  209, 1357,  209,  209,  209,
     1357,  209,  209,  209, 1357,  209,  209, 1357, 1357,  209,

     1357,  209,  209,  209, 1357,  209, 1357, 1357, 1357, 1357,
     1262, 1357,  209, 1263,  209,  209, 1357,  209,  209,  209,
      209,  209,  209,  209, 1357, 1357, 1357,  209,  209,  209,
      209,  209, 1264, 1357, 1357,  209,  209,  209,  209,  209,
     1263,  209,  209, 1357,  209,  209,  209, 1357,  209,  209,
      209,  209,  209, 1357,  209,  209,  209, 1357,  209, 1264,
     1357, 1265,  209,  209,  209,  209,  209, 1357,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209, 1357, 1357, 1357, 1357, 1265, 1357,
      209,  209,  209,  209, 1357, 1357, 1357,  209,  209,  209,

     1357,  209,  209,  209,  209, 1357, 1266,  209,  209,  209,
     1357,  209, 1357,  209, 1357,  209,  209,  209,  209,  209,
      209, 1357, 1357, 1267, 1357,  209, 1357, 1357, 1357, 1357,
     1357,  209,  209, 1266,  209, 1357, 1357, 1357,  209,  209,
      209, 1357,  209,  209,  209, 1357, 1268,  209,  209, 1357,
     1267, 1357,  209,  209, 1357,  209, 1357,  209,  209,  209,
     1357,  209,  209, 1357, 1357, 1357,  209,  209, 1270, 1357,
     1357,  209,  209, 1268,  209,  209,  209, 1357,  209, 1357,
      209,  209,  209, 1357,  209,  209,  209, 1357,  209,  209,
      209, 1357,  209, 1357,  209, 1270, 1269,  209, 1357,  209,

      209,  209,  209,  209,  209,  209, 1357, 1357,  209,  209,
     1271, 1272, 1357,  209, 1357,  209,  209,  209, 1357,  209,
      209,  209, 1357, 1269,  209, 1357, 1357,  209,  209,  209,
      209,  209,  209, 1357,  209,  209,  209, 1271, 1272,  209,
      209, 1357, 1357,  209,  209, 1357, 1357,  209,  209, 1357,
     1357, 1357, 1357, 1357, 1357,  209,  209,  209,  209,  209,
     1357,  209,  209,  209, 1273, 1357,  209,  209,  209, 1274,
      209,  209,  209, 1357,  209, 1357,  209,  209, 1357, 1357,
     1357,  209,  209,  209, 1357,  209,  209, 1357, 1357, 1357,
      209, 1273, 1357, 1357, 1357,  209, 1274,  209,  209,  209,

      209,  209, 1357,  209,  209,  209, 1357, 1357,  209,  209,
      209, 1357,  209,  209,  209, 1357,  209, 1357,  209,  209,
     1275, 1357, 1357,  209,  209,  209, 1357,  209,  209, 1357,
     1357, 1357,  209, 1357, 1357, 1357, 1357,  209, 1357,  209,
     1357,  209,  209,  209,  209,  209,  209, 1275, 1276,  209,
      209,  209, 1357, 1357,  209,  209,  209, 1277,  209, 1357,
     1279, 1357, 1357,  209,  209,  209, 1357,  209,  209,  209,
      209,  209,  209, 1278, 1357, 1276,  209,  209, 1280, 1357,
      209,  209,  209,  209, 1277,  209, 1357, 1279,  209, 1357,
      209,  209,  209, 1357,  209,  209, 1357,  209,  209,  209,

     1278, 1357,  209, 1357,  209, 1280,  209,  209, 1357,  209,
      209, 1357,  209, 1357,  209,  209, 1357, 1357, 1357, 1357,
      209, 1357,  209, 1357,  209,  209, 1357, 1357,  209,  209,
      209, 1357,  209,  209,  209, 1357,  209,  209, 1357,  209,
     1357,  209,  209, 1357,  209, 1295, 1357,  209, 1357,  209,
      209,  209,  209, 1357,  209,  209, 1357,  209,  209,  209,
      209,  209,  209,  209, 1357, 1297, 1357, 1357,  209,  209,
      209,  209, 1295, 1357, 1357, 1357,  209,  209,  209,  209,
      209,  209, 1357, 1357,  209,  209,  209,  209,  209,  209,
     1357, 1357, 1297, 1357,  209,  209,  209,  209,  209, 1299,

     1298, 1357,  209,  209,  209,  209, 1357,  209,  209, 1357,
      209,  209,  209,  209,  209,  209,  209, 1357,  209, 1357,
      209,  209,  209,  209, 1357,  209, 1299, 1298, 1357,  209,
      209,  209,  209, 1357, 1357,  209, 1357,  209,  209,  209,
     1357,  209,  209,  209, 1357,  209, 1357,  209,  209,  209,
     1357, 1300, 1357, 1357,  209, 1302, 1301,  209,  209,  209,
      209,  209,  209, 1357, 1357,  209,  209,  209, 1357,  209,
     1357, 1357,  209, 1357, 1357,  209, 1357, 1357, 1300, 1357,
     1357,  209, 1302, 1301,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209, 1357,  209,  209,  209,  209,

      209, 1357,  209, 1357, 1357,  209, 1357, 1357, 1357, 1357,
      209,  209, 1357,  209, 1357, 1357,  209,  209,  209,  209,
      209, 1357, 1357,  209,  209,  209,  209,  209, 1357,  209,
      209, 1357,  209, 1357,  209,  209, 1303,  209,  209, 1305,
      209, 1304,  209,  209, 1357,  209, 1357,  209,  209, 1357,
      209, 1357, 1357,  209, 1357,  209, 1357,  209,  209, 1306,
      209,  209,  209, 1303,  209,  209, 1305,  209, 1304,  209,
      209, 1357,  209, 1314, 1308,  209, 1357,  209, 1357, 1357,
      209, 1357,  209, 1357, 1316,  209, 1306,  209,  209, 1357,
     1357,  209, 1357, 1357,  209, 1357,  209,  209,  209,  209,

      209, 1357,  209,  209,  209, 1357,  209,  209,  209,  209,
      209, 1316,  209, 1357, 1357,  209,  209, 1317,  209,  209,
     1357,  209,  209,  209, 1357,  209,  209,  209, 1357,  209,
      209,  209, 1357,  209, 1357,  209,  209,  209, 1357,  209,
      209, 1357,  209,  209, 1317,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209, 1357,  209, 1357,
      209,  209, 1357,  209, 1357, 1357,  209,  209, 1357,  209,
     1357, 1357, 1357, 1357,  209,  209, 1357,  209,  209,  209,
      209,  209,  209,  209, 1357,  209, 1357,  209,  209, 1357,
      209,  209,  209,  209,  209,  209,  209, 1357,  209, 1357,

     1357, 1318,  209, 1357,  209, 1357,  209, 1357, 1357, 1357,
      209,  209,  209, 1357,  209, 1357,  209, 1357,  209,  209,
     1357,  209,  209,  209, 1357,  209,  209, 1357, 1318,  209,
     1357,  209, 1357,  209, 1357, 1357, 1357,  209,  209,  209,
      209,  209, 1326,  209,  209, 1357,  209,  209, 1357, 1357,
     1357,  209,  209,  209, 1357, 1357,  209, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357,  209, 1357, 1326,
     1357,  209, 1357,  209,  209, 1357, 1357, 1357,  209,  209,
     1357, 1357, 1357,  209,   46,   46,   46,   46,   46,   88,
     1357, 1357,   88,   88,  190,  190,  190, 1357,  190,  192,

     1357,  192,  192,  192,  195, 1357,  195,  195,  195,  209,
     1357,  209,  209,  209,    7, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357

    } ;

static const flex_int16_t yy_chk[8894] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    9,    9,   10,   10,
       15,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   15,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   18, 1360,   18,   22,   27,   18,   30,
       22,   23,   31,   27,   44,   24,   22, 1354,   23,   24,

      103,   18,   18,   24,   55,   23,   22, 1353,   23,   24,
     1352,   23,   24,   22,   27,   55,   30,   22,   23,   31,
       27,   44,   24,   22,   32,   23,   24,  103,   32,   28,
       24, 1351,   23,   22,   32,   23,   24,   28,   23,   24,
       25, 1349,   25,   28,   33,   49,   49,   25,   33,   43,
       43,   32,   25, 1347,   33,   32,   28,   18,   21,  104,
       21,   32,   50,   50,   28,  107,   21,   25,   21,   25,
       28,   33,   21,   21,   25,   33,   43,   43,   41,   25,
       41,   33, 1345,   41, 1343,   21,  104,   21,   86,   86,
       29, 1341,  107,   21, 1339,   21,   29,   29,   29,   21,

       21,   26,   36,   29,  108,   41,   34,   41,  106,   26,
       41,  106,   26,   36,  105,   26, 1337,   29,   26,   36,
       34,   26,  105,   29,   29,   29,   34,   34,   26,   36,
       29,  108, 1335,   34, 1333,  106,   26, 1331,  106,   26,
       36,  105,   26,   35,  110,   26,   36,   34,   26,  105,
      111,   35,   38,   34,   34,   35,   38,   42,   35,   35,
       38,   42,   58,  114,   58,   42,   38,   58,  193,  193,
       35,  110, 1329,  117,  121, 1327,  122,  111,   35,   38,
       58,   58,   35,   38,   42,   35,   35,   38,   42, 1323,
      114,  113,   42,   38,   39,  116,   39, 1319,  113,   39,

      117,  121,   39,  122,   39,  116,   39,   39,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,  113,  118,
     1313,   39,  116,   39,  118,  113,   39,  109,  109,   39,
      123,   39,  116,   39,   39,   40,   58,  124,   67,   40,
       67,  109,   40,   40,   67,   67,  118,  120,  120,   40,
       67,  118,   40, 1307,  109,  109, 1294,  123, 1159, 1159,
     1282, 1282,   40, 1281,  124,   67,   40,   67,  109,   40,
       40,   67,   67, 1259,  120,  120,   40,   67,  125,   40,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   61,   61,  127,   61,   61,   61,   61,   61,   61,

       61,  128,   68,  129, 1237,  125,   68, 1194,  131,  130,
       68,   61,   61,   61,   70,  130,   68,   61,   70,   61,
      127,  132,  133,  134,   70,   61,   68,   61,  128,   68,
      129,   61,   61,   68,   70,  131,  130,   68,  136,  137,
     1151,   70,  130,   68,   61,   70,   61, 1078,  132,  133,
      134,   70,   61,   68,   61, 1005,  908,  811,   61,   61,
      685,   70,  559,  429,  298,  136,  137,   61,   61,   62,
       62,  206,   62,   62,   62,   62,   62,   62,   62,  203,
      202,  139,   71,   72,   73,  140,   71,   72,   73,   62,
       62,   62,   71,   72,   73,  135,   62,   77,  135,  142,

       62,   77,   71,   72,   73,  143,   62,   77,  139,   71,
       72,   73,  140,   71,   72,   73,   62,   77,  201,   71,
       72,   73,  135,   62,   77,  135,  142,   62,   77,   71,
       72,   73,  143,   62,   77,  197,  195,   99,   96,  144,
       95,  145,  148,   62,   77,   62,   62,   63,  146,   78,
      146,   63,  149,   78,   63,   63,  150,   78,   81,  151,
       81,   63,   81,   78,   63,   81,  144,   63,  145,  148,
       81,   63,   94,   78,   63,  146,   78,  146,   63,  149,
       78,   63,   63,  150,   78,   81,  151,   81,   63,   81,
       78,   63,   81,   90,   63,   88,   85,   81,   63,   64,

       78,   82,   84,   64,  153,   82,   84,   64,  152,   82,
       60,  152,   84,   64,  154,   82,   64,   83,  155,  157,
       83,   83,   84,   64,   59,   82,   64,   83,   82,   84,
       64,  153,   82,   84,   64,  152,   82,   83,  152,   84,
       64,  154,   82,   64,   83,  155,  157,   83,   83,   84,
       64,   65,   82,  141,   83,   65,  158,  159,   65,  160,
       65,   65,  161,  141,   83,   65,  163,  165,  141,  141,
       65,   65,   52,  115,  115,  115,   51,  115,   65,   47,
      141,   45,   65,  158,  159,   65,  160,   65,   65,  161,
      141,  167,   65,  163,  165,  141,  141,   65,   65,   66,

      115,  115,  115,  119,  115,  119,   66,   66,  119,  147,
       66,  147,  170,   66,  119,  171,   66,  169,  167,   66,
       20,  119,  147,   19,   11,    7,   66,    4,    3,    0,
      119,  169,  119,   66,   66,  119,  147,   66,  147,  170,
       66,  119,  171,   66,  169,  172,   66,   69,  119,  147,
      126,  164,  126,   69,   69,   69,  126,  162,  169,  166,
       69,  162,    0,  126,  164,   69,    0,  126,  173,  164,
      166,    0,  172,    0,   69,  174,  176,  126,  164,  126,
       69,   69,   69,  126,  162,    0,  166,   69,  162,  168,
      126,  164,   69,   74,  126,  173,  164,  166,  168,  177,

       74,  175,  174,  176,  178,  181,  168,   74,  182,  184,
       74,    0,  175,   74,   74,    0,  168,  186,  179,  187,
       74,    0,    0,    0,  183,  168,  177,   74,  175,    0,
      183,  178,  181,  168,   74,  182,  184,   74,  179,  175,
       74,   74,   75,  180,  186,  179,  187,   75,  185,   75,
      180,  183,  188,  180,  305,   75,   75,  183,  307,   75,
        0,  185,   75,   75,    0,  179,    0,    0,    0,   75,
      180,    0,    0,    0,   75,  185,   75,  180,    0,  188,
      180,  305,   75,   75,    0,  307,   75,  217,  185,   75,
       75,   76,  217,  209,  217,  210,  210,  209,   76,  217,

      210,  308,   76,  209,  217,   76,  210,  310,   76,  312,
      313,   76,    0,  209,  217,  314,  210,    0,   76,  217,
      209,  217,  210,  210,  209,   76,  217,  210,  308,   76,
      209,  217,   76,  210,  310,   76,  312,  313,   76,   79,
      209,   79,  314,  210,   79,   79,  315,   79,  212,   79,
      212,   79,   79,    0,    0,  212,  212,    0,    0,  316,
      212,   79,    0,    0,    0,    0,   79,    0,   79,    0,
        0,   79,   79,  315,   79,  212,   79,  212,   79,   79,
      211,  218,  212,  212,  211,  218,  316,  212,   79,   80,
      211,  218,  214,   80,  214,  211,   80,   80,  214,  214,

      211,  218,  317,   80,  214,  319,   80,  211,  218,  320,
      321,  211,  218,   80,    0,    0,   80,  211,  218,  214,
       80,  214,  211,   80,   80,  214,  214,  211,  218,  317,
       80,  214,  319,   80,    0,    0,  320,  321,    0,    0,
       80,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  200,  200,  200,  200,  200,  200,  200,  200,

      200,  200,  200,  213,  215,  318,  213,  318,  322,  323,
      324,  325,    0,  215,  213,  215,  213,  326,  327,  219,
      215,  213,  318,  219,  328,  215,  213,    0,    0,  219,
      213,  215,  318,  213,  318,  322,  323,  324,  325,  219,
      215,  213,  215,  213,  326,  327,  219,  215,  213,  318,
      219,  328,  215,  213,  216,  216,  219,  220,  329,  220,
      216,    0,  216,  330,  220,  221,  219,  216,  216,  220,
      331,  333,  216,  334,  335,    0,  221,  336,  221,    0,
      337,  216,  216,  221,  220,  329,  220,  216,  221,  216,
      330,  220,  221,    0,  216,  216,  220,  331,  333,  216,

      334,  335,  223,  221,  336,  221,  223,  337,  338,    0,
      221,  332,  223,    0,    0,  221,  222,  222,  222,    0,
      222,  224,  223,  222,    0,  224,  332,  340,  222,  223,
      230,  224,  230,  223,  224,  338,  225,  230,  332,  223,
      225,  224,  230,  222,  222,  222,  225,  222,  224,  223,
      222,  225,  224,  332,  340,  222,  225,  230,  224,  230,
      341,  224,    0,  225,  230,    0,  342,  225,  224,  230,
        0,    0,    0,  225,  343,    0,    0,    0,  225,  344,
        0,  345,  346,  225,  226,    0,  226,  341,    0,  226,
      347,  348,  227,  342,  227,  226,    0,  226,  227,  227,

        0,  343,  226,  228,  227,  228,  344,  226,  345,  346,
      228,  226,  228,  226,  349,  228,  226,  347,  348,  227,
      350,  227,  226,  229,  226,  227,  227,  229,    0,  226,
      228,  227,  228,  229,  226,  351,  231,  228,    0,  228,
      352,  349,  228,  229,  231,  236,  231,  350,  232,  236,
      229,  231,  353,  354,  229,  236,  231,  232,  355,  232,
      229,    0,  351,  231,  232,  236,  356,  352,    0,  232,
      229,  231,  236,  231,  357,  232,  236,    0,  231,  353,
      354,    0,  236,  231,  232,  355,  232,    0,  234,    0,
      234,  232,  236,  356,  358,  234,  232,  233,  238,  233,

      234,  357,  238,  233,  235,  359,  235,  360,  238,  233,
      233,  235,  361,  362,  233,  234,  235,  234,  238,  233,
      363,  358,  234,    0,  233,  238,  233,  234,    0,  238,
      233,  235,  359,  235,  360,  238,  233,  233,  235,  361,
      362,  233,  237,  235,  237,  238,  233,  363,  237,  237,
      239,  365,  239,    0,  237,  364,    0,  239,  366,    0,
      240,    0,  239,  241,  240,  364,    0,  241,  368,  237,
      240,  237,    0,  241,    0,  237,  237,  239,  365,  239,
      240,  237,  364,  241,  239,  366,  242,  240,  242,  239,
      241,  240,  364,  242,  241,  368,  242,  240,  242,  243,

      241,  243,  369,    0,  370,    0,  243,  240,  371,  373,
      241,  243,  244,  242,  244,  242,    0,    0,    0,  244,
      242,  244,    0,  242,  244,  242,  243,    0,  243,  369,
      245,  370,  245,  243,  374,  371,  373,  245,  243,  244,
      246,  244,  245,  247,  246,  250,  244,  247,  244,  250,
      246,  244,  372,  247,  247,  250,  375,  245,  376,  245,
      246,  374,  372,  247,  245,  250,  249,  246,  249,  245,
      247,  246,  250,  249,  247,  377,  250,  246,  249,  372,
      247,  247,  250,  375,    0,  376,    0,  246,  379,  372,
      247,  248,  250,  249,  251,  249,  380,  381,  251,  248,

      249,  248,  377,  382,  251,  249,  248,  248,    0,  252,
      252,  248,    0,  252,  251,  379,  383,    0,  248,  252,
      384,  251,    0,  380,  381,  251,  248,    0,  248,  252,
      382,  251,  385,  248,  248,  266,  252,  252,  248,  266,
      252,  251,  255,  383,  255,  266,  252,  384,  255,  255,
        0,  386,  387,  389,  255,  266,  252,  253,  390,  385,
      388,  253,  266,  253,  391,  253,  266,  253,  392,  255,
      386,  255,  266,  388,  393,  255,  255,  253,  386,  387,
      389,  255,  266,    0,  253,  390,  394,  388,  253,    0,
      253,  391,  253,    0,  253,  392,    0,  386,  395,  396,

      388,  393,  397,  398,  253,  254,  399,  254,  256,  401,
      256,  402,  257,  394,  257,  256,  254,  403,  254,  257,
      256,  404,  405,  254,  257,  395,  396,    0,  254,  397,
      398,    0,  254,  399,  254,  256,  401,  256,  402,  257,
      406,  257,  256,  254,  403,  254,  257,  256,  404,  405,
      254,  257,  258,  407,  258,  254,  260,  408,  260,  258,
      258,  409,  410,  260,  258,    0,  411,  406,  260,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  258,
      407,  258,  413,  260,  408,  260,  258,  258,  409,  410,
      260,  258,  259,  411,  259,  260,    0,  261,  268,  259,

      259,  415,  268,  259,  259,  262,  268,    0,  261,  413,
      261,  262,  268,  262,    0,  261,  417,    0,  262,  259,
      261,  259,  268,  262,  261,  268,  259,  259,  415,  268,
      259,  259,  262,  268,  263,  261,  263,  261,  262,  268,
      262,  263,  261,  417,  264,  262,  263,  261,  414,  268,
      262,    0,  264,  418,  264,    0,  419,  414,  265,  264,
      265,  263,  420,  263,  264,  265,  265,    0,  263,  421,
      265,  264,    0,  263,    0,  414,    0,  422,  269,  264,
      418,  264,  269,  419,  414,  265,  264,  265,  269,  420,
      267,  264,  265,  265,  267,  423,  421,  265,  269,  270,

      267,  270,    0,  267,  422,  269,  270,    0,    0,  269,
      267,  270,    0,    0,    0,  269,    0,  267,  271,    0,
        0,  267,  423,  424,  426,  269,  270,  267,  270,  271,
      267,  271,  273,  270,  273,  272,  271,  267,  270,  273,
      272,  271,  272,  273,  273,  271,  416,  272,  416,  274,
      424,  426,  272,  274,    0,  274,  271,  427,  271,  273,
      274,  273,  272,  271,  560,  274,  273,  272,  271,  272,
      273,  273,  561,  416,  272,  416,  274,    0,    0,  272,
      274,  276,  274,    0,  427,  276,  277,  274,    0,  276,
      277,  560,  274,  275,  562,  276,  277,  425,    0,  561,

      563,  425,  275,    0,  275,  276,  277,    0,  276,  275,
      275,  278,  276,  277,  275,  278,  276,  277,    0,  278,
      275,  562,  276,  277,  425,  278,    0,  563,  425,  275,
      279,  275,  276,  277,  279,  278,  275,  275,  278,  564,
      279,  275,  278,  279,  565,  280,  278,    0,  566,  280,
      279,  281,  278,  280,  281,    0,    0,  279,  281,  280,
      567,  279,  278,  568,  281,    0,  564,  279,  570,  280,
      279,  565,  280,  573,  281,  566,  280,  279,  281,  574,
      280,  281,  282,  282,  282,  281,  280,  567,  283,  282,
      568,  281,  283,  575,  282,  570,  280,    0,  283,    0,

      573,  281,  576,    0,  578,  579,  574,    0,  283,  282,
      282,  282,  288,  288,  284,  283,  282,  288,  284,  283,
      575,  282,  284,  288,  284,  283,  285,  580,    0,  576,
      285,  578,  579,  288,  284,  283,  285,  285,    0,  288,
      288,  284,  581,  583,  288,  284,  285,  584,  286,  284,
      288,  284,  585,  285,  580,  286,    0,  285,    0,  586,
      288,  284,  286,  285,  285,  286,    0,  289,  286,  581,
      583,  289,    0,  285,  584,  286,    0,  289,  290,  585,
      290,  439,  286,  439,  290,  290,  586,  289,  439,  286,
      290,  587,  286,  439,  289,  286,  287,    0,  289,  287,

        0,    0,    0,  287,  289,  290,  287,  290,  439,  287,
      439,  290,  290,  291,  289,  439,  588,  290,  587,  287,
      439,    0,  291,  287,  291,  589,  287,  293,  292,  291,
      287,  293,  292,  287,  291,    0,  287,  293,  292,    0,
      291,  292,  590,  588,  591,    0,  287,  293,  292,  291,
        0,  291,  589,    0,  293,  292,  291,    0,  293,  292,
        0,  291,  294,    0,  293,  292,  294,  594,  292,  590,
        0,  591,  294,    0,  293,  292,  295,  294,  595,  440,
      295,  440,  294,  596,  295,  442,  440,  442,  597,  294,
      295,  440,  442,  294,  594,  598,  599,  442,  600,  294,

      295,    0,    0,  295,  294,  595,  440,  295,  440,  294,
      596,  295,  442,  440,  442,  597,    0,  295,  440,  442,
      602,    0,  598,  599,  442,  600,  603,  295,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  435,  436,
      437,  438,  435,  436,  437,  438,  604,  602,  435,  436,
      437,  438,    0,  603,  607,  608,  610,  612,  435,  436,
      437,  438,    0,    0,    0,  435,  436,  437,  438,  435,
      436,  437,  438,  604,    0,  435,  436,  437,  438,  441,
        0,  607,  608,  610,  612,  435,  436,  437,  438,  443,
      441,  444,  441,  443,  445,  444,    0,  441,  445,  443,

      613,  444,  441,  446,  445,  614,  441,  446,    0,  443,
        0,  444,  445,  446,  445,    0,  443,  441,  444,  441,
      443,  445,  444,  446,  441,  445,  443,  613,  444,  441,
      446,  445,  614,  615,  446,  447,  443,  447,  444,  445,
      446,  445,  447,  616,  448,  450,  448,  447,  617,  450,
      446,  448,  620,    0,    0,  450,  448,    0,  450,    0,
      615,  624,  447,    0,  447,  450,    0,  626,    0,  447,
      616,  448,  450,  448,  447,  617,  450,  451,  448,  620,
      618,  451,  450,  448,  449,  450,  449,  451,  624,  627,
      449,  618,  450,  451,  626,  452,  449,  451,    0,  452,

      629,  449,  631,  452,  451,  452,  449,  618,  451,    0,
      632,  449,    0,  449,  451,  452,  627,  449,  618,  633,
      451,  453,  452,  449,  451,  453,  452,  629,  449,  631,
      452,  453,  452,  449,  454,  455,  453,  632,  454,  455,
        0,  453,  452,  455,  454,  635,  633,    0,  453,  455,
        0,    0,  453,    0,  454,  636,    0,    0,  453,  455,
      637,  454,  455,  453,  638,  454,  455,  456,  453,  456,
      455,  454,  635,  458,  456,  640,  455,  458,  457,  456,
      457,  454,  636,  458,  457,  457,  455,  637,  461,    0,
      457,  638,  461,  458,  456,    0,  456,    0,  461,    0,

      458,  456,  640,  641,  458,  457,  456,  457,  461,  643,
      458,  457,  457,  644,  459,  461,  459,  457,  645,  461,
      458,  459,  460,  462,  460,  461,  459,  462,  646,  460,
      641,  462,  630,  630,  460,  461,  643,  462,    0,    0,
      644,  459,  463,  459,    0,  645,  463,  462,  459,  460,
      462,  460,  463,  459,  462,  646,  460,  463,  462,  630,
      630,  460,  463,  648,  462,  464,  465,  464,  466,  463,
      465,  464,  466,  463,  462,  649,  465,  464,  466,  463,
        0,  650,    0,  466,  463,    0,  465,  464,  466,  463,
      648,    0,  464,  465,  464,  466,  651,  465,  464,  466,

        0,  653,  649,  465,  464,  466,  654,  468,  650,  467,
      466,  468,  467,  465,  464,  466,  467,  468,  468,    0,
      469,  470,  467,  651,  469,  470,  655,  468,  653,    0,
      469,  470,  467,  654,  468,  656,  467,    0,  468,  467,
      469,  470,  471,  467,  468,  468,  471,  469,  470,  467,
      471,  469,  470,  655,  468,  659,  471,  469,  470,  467,
      472,    0,  656,    0,  472,  660,  471,  469,  470,  471,
      472,    0,  473,  471,  473,  661,    0,  471,  473,  662,
      472,    0,  659,  471,  473,    0,  663,  472,  474,  666,
      474,  472,  660,  471,  473,  474,  475,  472,  475,  473,

      474,  473,  661,  475,  667,  473,  662,  472,  475,    0,
      669,  473,  476,  663,  476,  474,  666,  474,  476,  476,
      670,  473,  474,  475,  476,  475,  477,  474,  477,  671,
      475,  667,  478,  477,  672,  475,  478,  669,  477,  476,
      479,  476,  478,  673,  479,  476,  476,  670,  479,  674,
      675,  476,  478,  477,  479,  477,  671,    0,    0,  478,
      477,  672,    0,  478,  479,  477,  480,  479,  480,  478,
      673,  479,  676,  480,  677,  479,  674,  675,  480,  478,
      678,  479,  481,  481,  481,  482,  482,  482,  680,  481,
        0,  479,  482,  480,  481,  480,  483,  482,  483,  676,

      480,  677,    0,  483,    0,  480,    0,  678,  483,  481,
      481,  481,  482,  482,  482,  680,  481,  484,    0,  482,
        0,  481,  487,  483,  482,  483,  487,  484,  682,  484,
      483,  485,  487,  485,  484,  483,  684,  814,  485,  484,
      485,  486,  487,  485,  484,  486,  816,  486,    0,  487,
      818,  819,  486,  487,  484,  682,  484,  486,  485,  487,
      485,  484,  820,  684,  814,  485,  484,  485,  486,  487,
      485,  488,  486,  816,  486,  488,    0,  818,  819,  486,
        0,  488,  821,  489,  486,  822,  488,  489,    0,  820,
        0,  488,  823,  489,    0,  490,  489,  824,  488,  490,

        0,  490,  488,  489,    0,  490,    0,  491,  488,  821,
      489,  491,  822,  488,  489,  490,    0,  491,  488,  823,
      489,  492,  490,  489,  824,  492,  490,  491,  490,  493,
      489,  492,  490,  493,  491,  825,    0,  826,  491,  493,
      828,  492,  490,  494,  491,  829,  830,  494,  492,  493,
        0,  495,  492,  494,  491,  495,  493,    0,  492,  831,
      493,  495,  825,  494,  826,  496,  493,  828,  492,  496,
      494,  495,  829,  830,  494,  496,  493,  497,  495,  497,
      494,  496,  495,  832,  497,  496,  831,    0,  495,  497,
      494,  833,  496,  498,  835,  498,  496,  836,  495,  837,

      498,  838,  496,  839,  497,  498,  497,  499,  496,  499,
      832,  497,  496,  500,  499,  499,  497,  500,  833,  499,
      498,  835,  498,  500,  836,  501,  837,  498,  838,  501,
      839,  840,  498,  500,  499,  501,  499,  841,  502,  502,
      500,  499,  499,  502,  500,  501,  499,  842,    0,  502,
      500,  504,  501,  504,  843,  504,  501,  844,  840,  502,
      500,  504,  501,  847,  841,  502,  502,  848,    0,  849,
      502,  504,  501,  505,  842,  505,  502,  505,  504,  850,
      504,  843,  504,  505,  844,  851,  502,  503,  504,  854,
      847,  503,    0,  505,  848,  503,  849,  503,  504,  506,

      505,  503,  505,  506,  505,    0,  850,  857,    0,  506,
      505,  503,  851,  858,  503,  506,  854,  507,  503,  506,
      505,  507,  503,  860,  503,  508,  506,  507,  503,  508,
      506,  863,  507,  866,  857,  508,  506,  507,  503,  867,
      858,  508,  506,  509,  507,  508,  506,  509,  507,  868,
      860,  869,  508,  509,  507,    0,  508,  510,  863,  507,
      866,  510,  508,  509,  507,  510,  867,  870,  508,    0,
      509,  510,  508,  871,  509,  511,  868,  511,  869,  874,
      509,  510,  511,    0,  510,  875,  876,  511,  510,  512,
      509,  512,  510,  877,  870,  512,  512,  878,  510,  880,

      871,  512,  511,  513,  511,  513,  874,  514,  510,  511,
      513,  514,  875,  876,  511,  513,  512,  514,  512,    0,
      877,  515,  512,  512,  878,  515,  880,  514,  512,    0,
      513,  515,  513,  881,  514,    0,  516,  513,  514,  883,
      516,  515,  513,  518,  514,  518,  516,    0,  515,  516,
      518,    0,  515,    0,  514,  518,  516,    0,  515,  884,
      881,    0,  522,  516,  522,    0,  883,  516,  515,  522,
      518,    0,  518,  516,  522,  885,  516,  518,  520,  520,
      520,    0,  518,  516,  517,  520,  884,  886,  517,  522,
      520,  522,  517,  888,    0,  889,  522,  859,  517,  890,

      859,  522,  885,  517,  891,  520,  520,  520,  517,    0,
      892,  517,  520,    0,  886,  517,  521,  520,    0,  517,
      888,  521,  889,  521,  859,  517,  890,  859,  521,  893,
      517,  891,  524,  521,  524,  517,  519,  892,  894,  524,
      524,  895,  896,  521,  524,  519,    0,  519,  521,  519,
      521,  898,  519,    0,    0,  521,  893,  519,    0,  524,
      521,  524,  523,  519,  899,  894,  524,  524,  895,  896,
      900,  524,  519,  523,  519,  523,  519,  525,  898,  519,
      523,  525,  902,  525,  519,  523,  903,  904,  525,  523,
        0,  899,    0,  525,  526,    0,  526,  900,  905,    0,

      523,  526,  523,    0,  525,    0,  526,  523,  525,  902,
      525, 1006,  523,  903,  904,  525, 1008,  527,    0,  527,
      525,  526,  528,  526,  527,  905,  528,  529,  526,  527,
      530,  529,  528,  526,  530,  531, 1010,  529, 1006,  531,
      530, 1011,  528, 1008,  527,  531,  527,  529,    0,  528,
      530,  527,    0,  528,  529,  531,  527,  530,  529,  528,
        0,  530,  531, 1010,  529,    0,  531,  530, 1011,  528,
        0,  532,  531,    0,  529,  532,  533,  530,    0,  534,
      533,  532,  531,  534,  532,  535,  533,  535, 1012,  534,
      534,  532,  535,  536,  533,  536,  533,  535,  532,  534,

      536,  536,  532,  533,    0,  536,  534,  533,  532,    0,
      534,  532,  535,  533,  535, 1012,  534,  534,  532,  535,
      536,  533,  536,  533,  535, 1013,  534,  536,  536,  537,
     1015,  537,  536,  538, 1017,  538,  537,  537, 1018, 1019,
      538,  537,  539, 1020,  539,  538,  539, 1021,    0,  539,
        0,    0, 1013,    0,  539,    0,  537, 1015,  537, 1023,
      538, 1017,  538,  537,  537, 1018, 1019,  538,  537,  539,
     1020,  539,  538,  539, 1021,  540,  539,  540,  541, 1025,
      541,  539,  540,  540,    0,  541, 1023,  540,  542, 1029,
      541,  543,  542,    0, 1031,  543, 1032,    0,  542,    0,

        0,  543,  540, 1033,  540,  541, 1025,  541,  542,  540,
      540,  543,  541,    0,  540,  542, 1029,  541,  543,  542,
      545, 1031,  543, 1032,  544,  542,  544,  545,  543,  545,
     1033,  544, 1040,    0,  545,  542,  544, 1041,  543,  545,
      546,    0,  548,    0,  546,  547,  548,  545,    0,  547,
      546,  544,  548,  544,  545,  547,  545,  547,  544, 1040,
      546,  545,  548,  544, 1041,  547,  545,  546,  550,  548,
      550,  546,  547,  548, 1042,  550,  547,  546,    0,  548,
      550,    0,  547,    0,  547, 1045,  549,  546,    0,  548,
      549, 1047,  547, 1049,  549,  550,  551,  550,  551,    0,

      549, 1042,  550,  551,    0,  551, 1051,  550,  551,    0,
      549,    0, 1045,  549, 1052,  552, 1053,  549, 1047,    0,
     1049,  549, 1054,  551,  552,  551,  552,  549, 1055,    0,
      551,  552,  551, 1051,    0,  551,  552,  549,  553,    0,
      553, 1052,  552, 1053, 1057,  553,  553,    0, 1058, 1054,
      553,  552, 1059,  552,  555, 1055,  555,  554,  552,  554,
     1060,  555,  555,  552,  554,  553,  555,  553,  554,  554,
     1062, 1057,  553,  553,  557, 1058, 1064,  553,  557, 1059,
      557,  555, 1066,  555,  554,  557,  554, 1060,  555,  555,
      557,  554,  556,  555,  556,  554,  554, 1062,  556,  556,

        0,  557,    0, 1064,  556,  557,    0,  557,  558, 1066,
      558, 1067,  557, 1068,  558,  558,  686,  557,  686,  556,
      558,  556,  686,  686, 1069,  556,  556,  687,  686,  687,
        0,  556, 1070,  687,  687,  558,    0,  558, 1067,  687,
     1068,  558,  558,  686, 1075,  686,    0,  558,  688,  686,
      686, 1069,  688,  689,  687,  686,  687,  689,  688, 1070,
      687,  687, 1077,  689,    0,  691,  687,  691,  688, 1156,
     1160, 1075,  691,  689, 1161,  688,    0,  691,  690,  688,
      689, 1164,  690,  692,  689,  688, 1165,  692,  690, 1077,
      689,  690,  691,  692,  691,  688, 1156, 1160,  690,  691,

      689, 1161,    0,  692,  691,  690,    0, 1169, 1164,  690,
      692, 1171,  694, 1165,  692,  690,  694,  693,  690,  693,
      692,  705,  694,  705,  693,  690,    0,  695,  705,  693,
      692,  695,  694,  705, 1169,    0, 1172,  695, 1171,  694,
        0, 1175,    0,  694,  693,    0,  693,  695,  705,  694,
      705,  693, 1176,  696,  695,  705,  693,  696,  695,  694,
      705,  696,  697, 1172,  695,  698,  697,  696, 1175,  698,
        0, 1177,  697, 1178,  695,  698, 1181,  696, 1182, 1176,
      696, 1185,  697,  699,  696,  698,    0,  699,  696,  697,
        0,  699,  698,  697,  696, 1187,  698,  699, 1177,  697,

     1178, 1188,  698, 1181,  696, 1182,    0,  699, 1185,  697,
      699,  700,  698,  701,  699,  700,  702,  701,  699,  700,
      702,  700, 1187,  701,  699, 1189,  702, 1190, 1188,  702,
     1191,  700, 1238,  701,  699,  703,  702,    0,  700,  703,
      701,    0,  700,  702,  701,  703,  700,  702,  700,    0,
      701, 1241, 1189,  702, 1190,  703,  702, 1191,  700, 1238,
      701,  704,  703,  702,  706,  704,  703,    0,  706, 1244,
     1245,  704,  703,  709,  706,  709,  704, 1248, 1241,  707,
      709,  704,  703,  707,  706,  709, 1249, 1250,  704,  707,
        0,  706,  704, 1254,  707,  706, 1244, 1245,  704,  707,

      709,  706,  709,  704, 1248,  708,  707,  709,  704,  708,
      707,  706,  709, 1249, 1250,  708,  707,  710,  710,  710,
     1254,  707,    0,    0,  710,  708,  707,    0,  711,  710,
      711,  712,  708,  712,    0,  711,  708,  711,  712,  712,
      711,    0,  708,  712,  710,  710,  710,  714, 1255,  714,
      713,  710,  708,  714,  714,  711,  710,  711,  712,  714,
      712,  713,  711,  713,  711,  712,  712,  711,  713,    0,
      712, 1239, 1239,  713,  714, 1255,  714,  713,  715, 1256,
      714,  714, 1258,    0, 1283,    0,  714,  715,  713,  715,
      713,  717,  716,  717,  715,  713,  716, 1284,  717,  715,

      713, 1287,  716,  717,    0,  715, 1256, 1261, 1261, 1258,
     1239, 1283,  716, 1292,  715,  718,  715,  718,  717,  716,
      717,  715,  718,  716, 1284,  717,  715,  718, 1287,  716,
      717,  719,    0,  719, 1296,    0, 1309, 1239,  719,  716,
     1292,    0,  718,  719,  718, 1312, 1261, 1315, 1320,  718,
     1324,    0, 1328,    0,  718,  720, 1330,  720,  719,  720,
      719, 1296,  720, 1309,  721,  719,  721,  720,  721, 1332,
      719,  721, 1312, 1261, 1315, 1320,  721, 1324,  722, 1328,
      722,    0,  720, 1330,  720,  722,  720,  722,    0,  720,
      722,  721, 1334,  721,  720,  721, 1332,    0,  721,    0,

      724, 1336, 1338,  721, 1340,  722, 1342,  722,  723,    0,
      723,  724,  722,  724,  722,  723,  723,  722,  724, 1334,
      723,  725, 1344,  724, 1308, 1308,  726,  724, 1336, 1338,
      726, 1340,  725, 1342,  725,  723,  726,  723,  724,  725,
      724, 1346,  723,  723,  725,  724,  726,  723,  725, 1344,
      724,    0,  727,  726,  728,    0,  727,  726,  728,  725,
        0,  725,  727,  726,  728,    0,  725, 1308, 1346,  728,
        0,  725,  727,  726,  728,    0,  730,    0,  729,  727,
      730,  728,  729,  727,  730,  728,    0,    0,  729,  727,
      730,  728,    0,    0, 1308,    0,  728,    0,  729,  727,

      730,  728,  731,  730,  732,  729,  731,  730,  732,  729,
        0,  730,  731,    0,  732,  729,    0,  730,    0, 1314,
     1314,    0,  731,    0,  732,  729,  733,  730,    0,  731,
      733,  732,  734,  731,  733,  732,  734,    0,    0,  731,
      733,  732,  734,  734,  735,    0,    0,    0,  735,  731,
      733,  732,  734,  733,  735,    0,    0,  733,    0,  734,
        0,  733, 1314,  734,  735,    0,  736,  733,  736,  734,
      734,  735,    0,  736,    0,  735,    0,  733,  736,  734,
      737,  735,  737,    0,    0,    0,    0,  737,    0, 1314,
        0,  735,  737,  736,  738,  736,  738,    0,  739,    0,

      736,  738,  739,    0,    0,  736,  738,  737,  739,  737,
        0,    0,    0,    0,  737,  741,    0,  741,  739,  737,
        0,  738,  741,  738,    0,  739,  740,  741,  738,  739,
      740,    0,    0,  738,    0,  739,  740,    0,    0,  740,
        0,    0,  741,    0,  741,  739,  740,    0,    0,  741,
        0,    0,    0,  740,  741,    0,    0,  740,  742,    0,
      742,    0,    0,  740,  742,  742,  740,    0,    0,  743,
      742,  743,  745,  740,  745,  743,  743,    0,    0,  745,
        0,  743,    0,    0,  745,  742,    0,  742,  746,    0,
      746,  742,  742,    0,    0,  746,  743,  742,  743,  745,

      746,  745,  743,  743,    0,    0,  745,    0,  743,  744,
        0,  745,    0,    0,  744,  746,  744,  746,    0,    0,
      744,  744,  746,  747,    0,  747,  744,  746,    0,    0,
      747,    0,  748,    0,  748,  747,  744,    0,    0,  748,
        0,  744,    0,  744,  748,    0,    0,  744,  744,    0,
      747,    0,  747,  744,    0,    0,  749,  747,  749,  748,
        0,  748,  747,  749,    0,  750,  748,  750,  749,    0,
        0,  748,  750,  750,  751,    0,  751,  750,    0,    0,
        0,  751,    0,  749,    0,  749,  751,    0,    0,    0,
      749,    0,  750,    0,  750,  749,    0,    0,    0,  750,

      750,  751,    0,  751,  750,  752,  753,  752,  751,    0,
      753,  754,  752,  751,    0,  754,  753,  752,    0,    0,
      755,  754,    0,    0,  755,    0,  753,    0,    0,    0,
      755,  754,  752,  753,  752,    0,    0,  753,  754,  752,
      755,    0,  754,  753,  752,    0,    0,  755,  754,    0,
        0,  755,  756,  753,  756,    0,    0,  755,  754,  756,
      756,    0,  757,  758,  756,  758,  757,  755,  757,  758,
      758,    0,    0,  757,    0,  758,    0,    0,  757,  756,
        0,  756,    0,    0,  759,    0,  756,  756,  759,  757,
      758,  756,  758,  757,  759,  757,  758,  758,    0,  760,

      757,    0,  758,  760,  759,  757,  761,    0,  761,  760,
        0,  759,  761,    0,    0,  759,    0,    0,  761,  760,
        0,  759,    0,    0,    0,    0,  760,    0,  761,    0,
      760,  759,    0,  761,  762,  761,  760,  763,  762,  761,
        0,  763,    0,    0,  762,  761,  760,  763,    0,  764,
      763,    0,    0,  764,  762,  761,    0,  763,    0,  764,
        0,  762,  764,  765,  763,  762,    0,  765,  763,  764,
        0,  762,    0,  765,  763,    0,  764,  763,  767,    0,
      764,  762,  767,  765,  763,    0,  764,  766,  767,  764,
      765,  766,    0,    0,  765,  766,  764,  766,  767,    0,

      765,    0,    0,    0,    0,  767,    0,  766,    0,  767,
      765,    0,    0,  768,  766,  767,  769,  768,  766,    0,
      769,    0,  766,  768,  766,  767,  769,  770,    0,    0,
        0,  770,    0,  768,  766,  770,  769,    0,    0,    0,
      768,  770,    0,  769,  768,    0,    0,  769,    0,    0,
      768,  770,    0,  769,  770,    0,    0,  771,  770,    0,
      768,  771,  770,  769,    0,  771,  772,    0,  770,  773,
      772,  771,    0,  773,    0,    0,  772,    0,  770,  773,
        0,  771,    0,    0,  771,    0,  772,    0,  771,  773,
        0,  774,  771,  772,    0,  774,  773,  772,  771,  774,

      773,  774,    0,  772,    0,    0,  773,    0,  771,    0,
      775,  774,    0,  772,  775,    0,  773,    0,  774,    0,
      775,    0,  774,  775,    0,  776,  774,    0,  774,  776,
      775,    0,    0,    0,    0,  776,  777,  775,  774,  777,
      776,  775,    0,  777,  778,  776,    0,  775,  778,  777,
      775,    0,  776,  780,  778,  780,  776,  775,    0,  777,
      780,    0,  776,  777,  778,  780,  777,  776,    0,  779,
      777,  778,  776,  779,  781,  778,  777,  779,    0,  779,
      780,  778,  780,  781,    0,  781,  777,  780,    0,  779,
      781,  778,  780,  782,    0,  781,  779,  782,  783,    0,

      779,  781,  783,  782,  779,    0,  779,  785,  783,  785,
      781,  784,  781,  782,  785,  784,  779,  781,  783,  785,
      782,  784,  781,  786,  782,  783,    0,  786,    0,  783,
      782,  784,    0,  786,  785,  783,  785,    0,  784,    0,
      782,  785,  784,  786,    0,  783,  785,  787,  784,  788,
      786,  787,  789,  788,  786,    0,  789,  787,  784,  788,
      786,  790,  789,    0,    0,  790,    0,  787,    0,  788,
      786,  790,  789,    0,  787,    0,  788,    0,  787,  789,
      788,  790,    0,  789,  787,    0,  788,  791,  790,  789,
        0,  791,  790,  792,  787,  792,  788,  791,  790,  789,

      792,    0,    0,    0,  793,  792,  793,  791,  790,  802,
        0,  793,    0,  802,  791,    0,  793,    0,  791,  802,
      792,    0,  792,  794,  791,  794,    0,  792,  795,  802,
      794,  793,  792,  793,  791,  794,  802,  795,  793,  795,
      802,    0,    0,  793,  795,    0,  802,    0,    0,  795,
      794,  796,  794,  796,    0,  795,  802,  794,  796,    0,
      796,    0,  794,  796,  795,  797,  795,  797,    0,    0,
        0,  795,  797,    0,    0,    0,  795,  797,  796,  798,
      796,  798,  799,    0,    0,  796,  798,  796,  798,    0,
      796,  798,  797,  799,  797,  799,    0,    0,    0,  797,

      799,    0,    0,    0,  797,  799,  798,    0,  798,  799,
        0,    0,    0,  798,    0,  798,  801,  800,  798,  800,
      799,  801,  799,  801,  800,  800,    0,  799,  801,  800,
        0,    0,  799,  801,    0,    0,    0,  803,    0,    0,
      803,  803,    0,  801,  800,    0,  800,  803,  801,  804,
      801,  800,  800,  804,    0,  801,  800,  803,    0,  804,
      801,  805,  806,    0,  803,  805,  806,  803,  803,  804,
        0,  805,  806,    0,  803,  807,  804,    0,  806,  807,
      804,  805,  806,    0,  803,  807,  804,  808,  805,  806,
      809,  808,  805,  806,  809,  807,  804,  808,  805,  806,

      809,    0,  807,    0,    0,  806,  807,  808,  805,  806,
      809,    0,  807,  810,  808,  810,    0,  809,  808,    0,
      810,  809,  807,    0,  808,  810,  909,  809,  909,  910,
        0,  910,    0,  909,  808,    0,  910,  809,  909,    0,
      810,  910,  810,    0,    0,    0,    0,  810,    0,    0,
        0,    0,  810,  909,    0,  909,  910,  911,  910,  911,
      909,    0,    0,  910,  911,  909,    0,    0,  910,  911,
      912,  911,  912,    0,    0,  913,    0,  912,    0,  913,
        0,    0,  912,  914,  911,  913,  911,  914,    0,    0,
        0,  911,    0,  914,    0,  913,  911,  912,  911,  912,

        0,  915,  913,  914,  912,  915,  913,    0,    0,  912,
      914,  915,  913,    0,  914,    0,    0,    0,    0,  916,
      914,  915,  913,  916,    0,    0,    0,  917,  915,  916,
      914,  917,  915,    0,  916,  917,    0,    0,  915,  916,
        0,  917,  918,  918,    0,    0,  916,  918,  915,    0,
      916,  917,    0,  918,  917,    0,  916,    0,  917,    0,
        0,  916,  917,  918,    0,  919,  916,  919,  917,  918,
      918,  919,    0,    0,  918,    0,    0,  919,  917,  920,
      918,  920,    0,    0,    0,    0,  920,  919,    0,    0,
      918,  920,  919,  921,  919,  921,    0,    0,  919,  922,

      921,  921,    0,  922,  919,  921,  920,    0,  920,  922,
        0,  923,    0,  920,  919,  923,    0,    0,  920,  922,
      921,  923,  921,    0,    0,  924,  922,  921,  921,  924,
      922,  923,  921,    0,    0,  924,  922,  925,  923,  925,
        0,    0,  923,  926,  925,  924,  922,  926,  923,  925,
        0,    0,  924,  926,    0,  927,  924,    0,  923,  927,
        0,    0,  924,  926,  925,  927,  925,    0,    0,  928,
      926,  925,  924,  928,  926,  927,  925,  928,    0,    0,
      926,  930,  927,  928,    0,  930,  927,  929,    0,  929,
      926,  930,  927,  928,  929,    0,  928,    0,    0,  929,

      928,  930,  927,  931,  928,  932,    0,  931,  930,  932,
      928,    0,  930,  931,  929,  932,  929,    0,  930,    0,
      928,  929,    0,  931,    0,  932,  929,  935,  930,  933,
      931,  935,  932,  933,  931,    0,  932,  935,    0,  933,
      931,  934,  932,  934,  933,    0,    0,  935,  934,  933,
      931,    0,  932,  934,  935,    0,  933,  936,  935,    0,
      933,  936,    0,    0,  935,    0,  933,  936,  934,    0,
      934,  933,    0,    0,  935,  934,  933,  936,    0,  940,
      934,  937,  938,  940,  936,  937,  938,    0,  936,  940,
        0,  937,  938,  939,  936,  939,  937,  938,    0,  940,

      939,  937,  938,    0,  936,  939,  940,    0,  937,  938,
      940,    0,  937,  938,    0,    0,  940,    0,  937,  938,
      939,    0,  939,  937,  938,    0,  940,  939,  937,  938,
      942,  941,  939,  941,  942,  943,    0,  941,    0,  943,
      942,    0,    0,  941,    0,  943,    0,    0,    0,    0,
      942,    0,    0,  941,    0,  943,    0,  942,  941,    0,
      941,  942,  943,    0,  941,  944,  943,  942,    0,  944,
      941,    0,  943,    0,  945,  944,    0,  942,  945,  946,
      941,  946,  943,  944,  945,  944,  946,    0,  947,  945,
      947,  946,  944,    0,  945,  947,  944,    0,    0,    0,

      947,  945,  944,    0,    0,  945,  946,    0,  946,    0,
      944,  945,  944,  946,    0,  947,  945,  947,  946,  948,
        0,  945,  947,  949,  948,  949,  948,  947,    0,    0,
      949,  948,  950,    0,  950,  949,  948,    0,    0,  950,
        0,    0,    0,    0,  950,    0,  948,    0,    0,    0,
      949,  948,  949,  948,    0,    0,    0,  949,  948,  950,
        0,  950,  949,  948,    0,  951,  950,  951,  952,    0,
      952,  950,  951,  951,  953,  952,  953,  951,    0,    0,
      952,  953,    0,    0,    0,    0,  953,    0,    0,    0,
        0,    0,  951,    0,  951,  952,    0,  952,    0,  951,

      951,  953,  952,  953,  951,    0,    0,  952,  953,  954,
      955,  954,    0,  953,  955,    0,  954,  954,    0,    0,
      955,  954,  956,    0,  956,    0,    0,    0,    0,  956,
      955,    0,  956,  957,  956,  957,  954,  955,  954,    0,
      957,  955,    0,  954,  954,  957,    0,  955,  954,  956,
        0,  956,    0,    0,    0,    0,  956,  955,    0,  956,
      957,  956,  957,  958,  959,  958,  959,  957,    0,  960,
      958,  959,  957,    0,    0,  958,  959,  960,    0,  960,
        0,    0,    0,    0,  960,    0,    0,    0,    0,  960,
      958,  959,  958,  959,    0,    0,  960,  958,  959,    0,

        0,    0,  958,  959,  960,  961,  960,  961,  962,  963,
      962,  960,  961,  963,    0,  962,  960,  961,    0,  963,
      962,  964,    0,  964,    0,    0,    0,    0,  964,  963,
        0,    0,  961,  964,  961,  962,  963,  962,    0,  961,
      963,  965,  962,    0,  961,    0,  963,  962,  964,    0,
      964,    0,  965,    0,  965,  964,  963,    0,    0,  965,
      964,    0,    0,  966,  965,  966,    0,    0,  965,    0,
      966,  966,  967,    0,    0,  966,  967,    0,  967,  965,
        0,  965,    0,  967,    0,    0,  965,    0,  967,    0,
      966,  965,  966,    0,    0,    0,    0,  966,  966,  967,

        0,    0,  966,  967,  968,  967,  968,  969,    0,  969,
      967,  968,  968,    0,  969,  967,  968,  971,  970,  969,
      970,  971,    0,    0,    0,  970,    0,  971,    0,    0,
      970,  968,    0,  968,  969,    0,  969,  971,  968,  968,
        0,  969,    0,  968,  971,  970,  969,  970,  971,    0,
        0,  972,  970,    0,  971,  972,    0,  970,  973,  973,
        0,  972,    0,  973,  971,    0,  972,    0,    0,  973,
        0,  972,    0,    0,    0,    0,    0,    0,  972,  973,
        0,    0,  972,    0,    0,  973,  973,  974,  972,    0,
      973,  974,    0,  972,    0,  975,  973,  974,  972,  975,

      974,    0,    0,    0,    0,  975,  973,  974,  975,  976,
        0,    0,    0,  976,  974,  975,    0,    0,  974,  976,
        0,  977,  975,    0,  974,  977,  975,  974,    0,  976,
        0,  977,  975,  978,  974,  975,  976,  978,    0,    0,
      976,  977,  975,  978,    0,  979,  976,    0,  977,  979,
        0,    0,  977,  978,    0,  979,  976,    0,  977,  980,
      978,    0,    0,  980,  978,  979,    0,  980,  977,    0,
      978,  981,  979,  980,    0,  981,  979,  984,    0,  981,
      978,  984,  979,  980,    0,  981,  980,  984,  982,  982,
      980,    0,  979,  982,  980,  981,    0,  984,  981,  982,

      980,  985,  981,  983,  984,  985,  981,  983,  984,  982,
      980,  985,  981,  983,  984,  982,  982,    0,  983,    0,
      982,  985,  981,  983,  984,    0,  982,    0,  985,  987,
      983,    0,  985,  987,  983,    0,  982,  987,  985,    0,
      983,  986,  986,  987,    0,  983,  986,  988,  985,  988,
      983,    0,  986,  987,  988,    0,  987,    0,    0,  988,
      987,    0,  986,    0,  987,  989,    0,  989,  986,  986,
      987,  989,  989,  986,  988,    0,  988,  989,    0,  986,
      987,  988,    0,  990,    0,  990,  988,    0,    0,  986,
      990,  990,  989,    0,  989,  990,  991,    0,  989,  989,

        0,    0,  992,    0,  989,    0,    0,  991,    0,  991,
      990,    0,  990,  992,  991,  992,    0,  990,  990,  991,
      992,    0,  990,  991,    0,  992,  993,    0,  993,  992,
        0,    0,    0,  993,  991,    0,  991,  994,  993,  994,
      992,  991,  992,    0,  994,    0,  991,  992,    0,  994,
        0,    0,  992,  993,    0,  993,    0,  995,  996,  996,
      993,  995,    0,  996,  994,  993,  994,  995,    0,  996,
        0,  994,    0,    0,    0,    0,  994,  995,    0,  996,
        0,    0,    0,  997,  995,  996,  996,  997,  995,    0,
      996,  998,    0,  997,  995,  998,  996,    0,    0,    0,

      999,  998,  999,  997,  995,    0,  996,  999, 1000,    0,
      997,  998,  999,    0,  997,    0,    0,    0,  998, 1000,
      997, 1000,  998,    0,    0,    0, 1000,  999,  998,  999,
      997, 1000,    0,    0,  999, 1000,    0,    0,  998,  999,
        0, 1002,    0, 1001,    0, 1001, 1000,    0, 1000, 1001,
     1001,    0, 1002, 1000, 1002, 1001,    0,    0, 1000, 1002,
        0,    0,    0,    0, 1002,    0,    0,    0, 1002,    0,
     1001, 1003, 1001, 1003,    0,    0, 1001, 1001, 1003, 1002,
        0, 1002, 1001, 1003, 1079, 1004, 1002, 1004, 1079, 1080,
        0, 1002, 1004, 1080, 1079,    0,    0, 1004, 1003, 1080,

     1003, 1081,    0, 1081, 1079, 1003,    0,    0, 1081, 1080,
     1003, 1079, 1004, 1081, 1004, 1079, 1080,    0,    0, 1004,
     1080, 1079,    0,    0, 1004, 1082, 1080, 1082, 1081,    0,
     1081, 1079, 1082,    0,    0, 1081, 1080, 1082, 1084, 1083,
     1081, 1083, 1084,    0,    0,    0, 1083,    0, 1084,    0,
        0, 1083, 1082,    0, 1082,    0,    0, 1085, 1084, 1082,
        0, 1085,    0,    0, 1082, 1084, 1083, 1085, 1083, 1084,
        0,    0, 1085, 1083, 1086, 1084, 1086, 1085, 1083,    0,
     1087, 1086, 1087,    0, 1085, 1084, 1086, 1087, 1085,    0,
        0,    0, 1087, 1088, 1085, 1088,    0,    0,    0, 1085,

     1088, 1086,    0, 1086, 1085, 1088,    0, 1087, 1086, 1087,
        0,    0,    0, 1086, 1087,    0, 1089,    0, 1089, 1087,
     1088,    0, 1088, 1089,    0,    0,    0, 1088, 1089, 1090,
        0, 1090, 1088,    0,    0,    0, 1090, 1090,    0,    0,
        0, 1090,    0, 1089,    0, 1089,    0, 1091, 1091, 1091,
     1089, 1092,    0,    0, 1091, 1089, 1090,    0, 1090, 1091,
     1092,    0, 1092, 1090, 1090,    0,    0, 1092, 1090,    0,
        0,    0, 1092,    0, 1091, 1091, 1091,    0, 1092,    0,
        0, 1091,    0, 1093,    0, 1093, 1091, 1092,    0, 1092,
     1093,    0,    0,    0, 1092, 1093, 1094,    0, 1094, 1092,

        0,    0,    0, 1094, 1094,    0,    0, 1095, 1094, 1095,
     1093,    0, 1093,    0, 1095,    0, 1096, 1093,    0, 1095,
        0,    0, 1093, 1094,    0, 1094, 1096,    0, 1096,    0,
     1094, 1094,    0, 1096, 1095, 1094, 1095, 1097, 1096, 1097,
        0, 1095,    0, 1096, 1097,    0, 1095, 1098,    0, 1097,
     1099,    0, 1099, 1096,    0, 1096, 1098, 1099, 1098,    0,
     1096,    0, 1099, 1098, 1097, 1096, 1097,    0, 1098,    0,
        0, 1097,    0,    0, 1098,    0, 1097, 1099,    0, 1099,
     1100,    0, 1100, 1098, 1099, 1098, 1101, 1100, 1101, 1099,
     1098,    0, 1100, 1101,    0, 1098, 1102,    0, 1101,    0,

     1102, 1103,    0,    0,    0, 1103, 1102, 1100,    0, 1100,
     1104, 1103, 1104, 1101, 1100, 1101, 1102, 1104,    0, 1100,
     1101, 1103, 1104, 1102,    0, 1101,    0, 1102, 1103,    0,
        0,    0, 1103, 1102, 1105,    0, 1105, 1104, 1103, 1104,
        0, 1105, 1105, 1102, 1104,    0, 1105, 1106, 1103, 1104,
     1107, 1106, 1108,    0, 1107, 1109, 1108, 1106,    0, 1109,
     1107, 1105, 1108, 1105,    0, 1109,    0, 1106, 1105, 1105,
     1107,    0, 1108, 1105, 1106, 1109,    0, 1107, 1106, 1108,
        0, 1107, 1109, 1108, 1106,    0, 1109, 1107,    0, 1108,
        0, 1110, 1109,    0, 1106, 1110, 1111, 1107,    0, 1108,

     1111, 1110, 1109,    0, 1112,    0, 1111,    0, 1112,    0,
        0, 1110,    0,    0, 1112,    0, 1111,    0, 1110,    0,
        0,    0, 1110, 1111, 1112,    0, 1113, 1111, 1110,    0,
     1113, 1112,    0, 1111,    0, 1112, 1113,    0, 1110, 1113,
     1114, 1112,    0, 1111, 1114,    0, 1113,    0, 1115,    0,
     1114, 1112, 1115, 1113, 1116,    0, 1115, 1113, 1116,    0,
     1114,    0, 1115, 1113, 1116,    0, 1113, 1114,    0,    0,
        0, 1114, 1115, 1113, 1116, 1115, 1117, 1114,    0, 1115,
     1117, 1116,    0, 1115,    0, 1116, 1117, 1114, 1118, 1115,
     1118, 1116,    0,    0,    0, 1118, 1117,    0,    0, 1115,

     1118, 1116, 1119, 1117, 1119,    0,    0, 1117,    0, 1119,
        0,    0,    0, 1117, 1119, 1118,    0, 1118, 1120,    0,
     1120, 1122, 1118, 1117,    0, 1120, 1121, 1118, 1121, 1119,
     1120, 1119, 1122, 1121, 1122,    0, 1119,    0, 1121, 1122,
        0, 1119,    0,    0, 1122, 1120,    0, 1120, 1122,    0,
        0,    0, 1120, 1121,    0, 1121, 1123, 1120, 1123, 1122,
     1121, 1122, 1124, 1123, 1124, 1121, 1122,    0, 1123, 1124,
     1124, 1122, 1125,    0, 1124,    0, 1125,    0,    0,    0,
        0,    0, 1125, 1123, 1126, 1123,    0,    0, 1126, 1124,
     1123, 1124, 1125,    0, 1126, 1123, 1124, 1124, 1127, 1125,

        0, 1124, 1127, 1125, 1126,    0, 1128,    0, 1127, 1125,
     1128, 1126,    0,    0,    0, 1126, 1128,    0, 1127, 1125,
     1129, 1126,    0,    0, 1129, 1127, 1128,    0,    0, 1127,
     1129, 1126, 1130, 1128, 1130, 1127,    0, 1128, 1130,    0,
     1129,    0,    0, 1128, 1130, 1127, 1131, 1129, 1131,    0,
        0, 1129, 1131, 1128, 1130,    0,    0, 1129, 1131, 1130,
        0, 1130, 1132,    0, 1132, 1130,    0, 1129, 1131, 1132,
     1133, 1130, 1133, 1131, 1132, 1131, 1134, 1133, 1134, 1131,
        0, 1130, 1133, 1134,    0, 1131,    0,    0, 1134, 1132,
        0, 1132,    0,    0,    0, 1131, 1132, 1133,    0, 1133,

     1135, 1132, 1135, 1134, 1133, 1134, 1136, 1135, 1136, 1133,
     1134,    0, 1135, 1136, 1137, 1134, 1137,    0, 1136,    0,
        0, 1137,    0,    0,    0,    0, 1137, 1135,    0, 1135,
     1138,    0, 1138, 1136, 1135, 1136,    0, 1138, 1139, 1135,
     1136, 1137, 1138, 1137,    0, 1136,    0,    0, 1137, 1139,
     1199, 1139,    0, 1137, 1199,    0, 1139, 1138,    0, 1138,
     1199, 1139, 1140, 1141, 1138, 1139,    0,    0,    0, 1138,
     1199,    0, 1141, 1140, 1141, 1140, 1139, 1199, 1139, 1141,
     1140, 1199,    0, 1139, 1141, 1140,    0, 1199, 1139, 1140,
     1141,    0,    0,    0,    0,    0, 1142, 1199, 1142, 1141,

     1140, 1141, 1140, 1142, 1142,    0, 1141, 1140, 1142, 1143,
        0, 1141, 1140,    0, 1144,    0, 1144, 1143,    0, 1143,
     1145, 1144, 1145, 1142, 1143, 1142, 1144, 1145,    0, 1143,
     1142, 1142, 1145,    0,    0, 1142, 1143,    0, 1146,    0,
     1146, 1144,    0, 1144, 1143, 1146, 1143, 1145, 1144, 1145,
     1146, 1143,    0, 1144, 1145,    0, 1143,    0,    0, 1145,
        0, 1147,    0, 1147, 1148, 1146, 1148, 1146, 1147,    0,
     1148, 1148, 1146, 1147,    0,    0, 1148, 1146,    0,    0,
     1149,    0, 1149,    0,    0,    0,    0, 1149, 1147,    0,
     1147, 1148, 1149, 1148, 1150, 1147, 1150, 1148, 1148,    0,

     1147, 1150,    0, 1148,    0,    0, 1150, 1149, 1195, 1149,
     1195,    0,    0,    0, 1149, 1195,    0,    0,    0, 1149,
     1195, 1150, 1196, 1150, 1196,    0,    0,    0, 1150, 1196,
        0,    0,    0, 1150, 1196, 1195, 1197, 1195, 1197,    0,
        0,    0, 1195, 1197,    0,    0,    0, 1195, 1197, 1196,
     1198, 1196, 1198,    0, 1200,    0, 1196, 1198, 1200,    0,
        0, 1196, 1198, 1197, 1200, 1197, 1202, 1202, 1201,    0,
     1197,    0, 1201,    0, 1200, 1197,    0, 1198, 1201, 1198,
        0, 1200,    0, 1203, 1198, 1200,    0, 1203, 1201, 1198,
        0, 1200, 1202, 1203,    0, 1201, 1202,    0,    0, 1201,

        0, 1200, 1202, 1203,    0, 1201,    0,    0,    0,    0,
     1203,    0, 1202, 1204, 1203, 1201,    0, 1204, 1205, 1202,
     1203, 1204, 1205, 1202,    0,    0,    0, 1204, 1205, 1202,
     1203, 1206, 1207,    0,    0, 1206, 1207, 1204, 1205, 1202,
     1204, 1206, 1207,    0, 1204, 1205, 1208,    0, 1204, 1205,
     1208, 1206, 1207,    0, 1204, 1205, 1208,    0, 1206, 1207,
        0, 1208, 1206, 1207, 1204, 1205, 1208,    0, 1206, 1207,
     1209, 1210, 1211, 1208, 1209, 1210, 1211, 1208, 1206, 1207,
     1209, 1210, 1211, 1208,    0,    0,    0,    0, 1208,    0,
     1209, 1210, 1211, 1208,    0,    0,    0, 1209, 1210, 1211,

        0, 1209, 1210, 1211, 1212,    0, 1212, 1209, 1210, 1211,
        0, 1212,    0, 1213,    0, 1213, 1212, 1209, 1210, 1211,
     1213,    0,    0, 1214,    0, 1213,    0,    0,    0,    0,
        0, 1212, 1214, 1212, 1214,    0,    0,    0, 1212, 1214,
     1213,    0, 1213, 1212, 1214,    0, 1215, 1213, 1215,    0,
     1214,    0, 1213, 1215,    0, 1216,    0, 1216, 1215, 1214,
        0, 1214, 1216,    0,    0,    0, 1214, 1216, 1219,    0,
        0, 1214, 1219, 1215, 1217, 1215, 1217,    0, 1219,    0,
     1215, 1217, 1216,    0, 1216, 1215, 1217,    0, 1219, 1216,
     1218,    0, 1218,    0, 1216, 1219, 1218, 1218,    0, 1219,

     1220, 1217, 1218, 1217, 1220, 1219,    0,    0, 1217, 1221,
     1220, 1221,    0, 1217,    0, 1219, 1221, 1218,    0, 1218,
     1220, 1221,    0, 1218, 1218,    0,    0, 1220, 1222, 1218,
     1222, 1220, 1223,    0, 1223, 1222, 1221, 1220, 1221, 1223,
     1222,    0,    0, 1221, 1223,    0,    0, 1220, 1221,    0,
        0,    0,    0,    0,    0, 1222, 1224, 1222, 1224, 1223,
        0, 1223, 1222, 1224, 1224,    0, 1223, 1222, 1224, 1225,
     1225, 1223, 1225,    0, 1226,    0, 1226, 1225,    0,    0,
        0, 1226, 1225, 1224,    0, 1224, 1226,    0,    0,    0,
     1224, 1224,    0,    0,    0, 1224, 1225, 1225, 1227, 1225,

     1227, 1226,    0, 1226, 1225, 1227,    0,    0, 1226, 1225,
     1227,    0, 1228, 1226, 1228,    0, 1229,    0, 1229, 1228,
     1228,    0,    0, 1229, 1228, 1227,    0, 1227, 1229,    0,
        0,    0, 1227,    0,    0,    0,    0, 1227,    0, 1228,
        0, 1228, 1230, 1229, 1230, 1229, 1228, 1228, 1230, 1230,
     1229, 1228,    0,    0, 1230, 1229, 1231, 1231, 1231,    0,
     1233,    0,    0, 1231, 1233, 1232,    0, 1232, 1231, 1230,
     1233, 1230, 1232, 1232,    0, 1230, 1230, 1232, 1234,    0,
     1233, 1230, 1234, 1231, 1231, 1231,    0, 1233, 1234,    0,
     1231, 1233, 1232,    0, 1232, 1231,    0, 1233, 1234, 1232,

     1232,    0, 1235,    0, 1232, 1234, 1235, 1233,    0, 1234,
     1236,    0, 1235,    0, 1236, 1234,    0,    0,    0,    0,
     1236,    0, 1235,    0, 1262, 1234,    0,    0, 1262, 1235,
     1236,    0, 1260, 1235, 1262,    0, 1260, 1236,    0, 1235,
        0, 1236, 1260,    0, 1262, 1260,    0, 1236,    0, 1235,
     1263, 1262, 1260,    0, 1263, 1262,    0, 1236, 1264, 1260,
     1263, 1262, 1264, 1260,    0, 1263,    0,    0, 1264, 1260,
     1263, 1262, 1260,    0,    0,    0, 1265, 1263, 1264, 1260,
     1265, 1263,    0,    0, 1267, 1264, 1265, 1263, 1267, 1264,
        0,    0, 1263,    0, 1267, 1264, 1265, 1263, 1266, 1267,

     1266,    0, 1266, 1265, 1267, 1264,    0, 1265, 1266,    0,
     1268, 1267, 1269, 1265, 1268, 1267, 1269,    0, 1266,    0,
     1268, 1267, 1269, 1265,    0, 1266, 1267, 1266,    0, 1266,
     1268, 1267, 1269,    0,    0, 1266,    0, 1268, 1270, 1269,
        0, 1268, 1270, 1269,    0, 1266,    0, 1268, 1270, 1269,
        0, 1270,    0,    0, 1271, 1272, 1271, 1268, 1270, 1269,
     1272, 1271, 1272,    0,    0, 1270, 1271, 1272,    0, 1270,
        0,    0, 1272,    0,    0, 1270,    0,    0, 1270,    0,
        0, 1271, 1272, 1271, 1273, 1270, 1273, 1272, 1271, 1272,
     1274, 1273, 1274, 1271, 1272,    0, 1273, 1274, 1275, 1272,

     1275,    0, 1274,    0,    0, 1275,    0,    0,    0,    0,
     1275, 1273,    0, 1273,    0,    0, 1276, 1274, 1273, 1274,
     1276,    0,    0, 1273, 1274, 1275, 1276, 1275,    0, 1274,
     1277,    0, 1275,    0, 1277, 1278, 1276, 1275, 1279, 1278,
     1277, 1277, 1279, 1276,    0, 1278,    0, 1276, 1279,    0,
     1277,    0,    0, 1276,    0, 1278,    0, 1277, 1279, 1280,
     1280, 1277, 1278, 1276, 1280, 1279, 1278, 1277, 1277, 1279,
     1280,    0, 1278, 1295, 1295, 1279,    0, 1277,    0,    0,
     1280,    0, 1278,    0, 1297, 1279, 1280, 1280, 1297,    0,
        0, 1280,    0,    0, 1297,    0, 1298, 1280, 1299, 1295,

     1298,    0, 1299, 1295, 1297,    0, 1298, 1280, 1299, 1295,
     1300, 1297, 1300,    0,    0, 1297, 1298, 1300, 1299, 1295,
        0, 1297, 1300, 1298,    0, 1299, 1295, 1298,    0, 1299,
     1295, 1297,    0, 1298,    0, 1299, 1295, 1300,    0, 1300,
     1301,    0, 1301, 1298, 1300, 1299, 1295, 1301, 1302, 1300,
     1302, 1303, 1301, 1303, 1304, 1302, 1304,    0, 1303,    0,
     1302, 1304,    0, 1303,    0,    0, 1304, 1301,    0, 1301,
        0,    0,    0,    0, 1301, 1302,    0, 1302, 1303, 1301,
     1303, 1304, 1302, 1304,    0, 1303,    0, 1302, 1304,    0,
     1303, 1305, 1306, 1304, 1316, 1305, 1306,    0, 1316,    0,

        0, 1305, 1306,    0, 1316,    0, 1317,    0,    0,    0,
     1317, 1305, 1306,    0, 1316,    0, 1317,    0, 1305, 1306,
        0, 1316, 1305, 1306,    0, 1316, 1317,    0, 1305, 1306,
        0, 1316,    0, 1317,    0,    0,    0, 1317, 1305, 1306,
     1318, 1316, 1318, 1317, 1326,    0, 1326, 1318,    0,    0,
        0, 1326, 1318, 1317,    0,    0, 1326,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1318,    0, 1318,
        0, 1326,    0, 1326, 1318,    0,    0,    0, 1326, 1318,
        0,    0,    0, 1326, 1358, 1358, 1358, 1358, 1358, 1359,
        0,    0, 1359, 1359, 1361, 1361, 1361,    0, 1361, 1362,

        0, 1362, 1362, 1362, 1363,    0, 1363, 1363, 1363, 1364,
        0, 1364, 1364, 1364, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 3085 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 3099 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 3386 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1358 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1357 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BIGINT)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(FOLLOWING)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(GROUPS)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(LOCKED)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(NOWAIT)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(OVER)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(PARTITION)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(PRECEDING)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(RANGE)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(ROWS)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(SHARE)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(SKIP)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(UNBOUNDED)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(VECTOR)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 228 "flex_lexer.l"
TOKEN(CURRENT_ROW)
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 229 "flex_lexer.l"
TOKEN(CHARACTER_VARYING)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 169:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 235 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 238 "flex_lexer.l"
TOKEN(SIMILAR)
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 239 "flex_lexer.l"
TOKEN(INDEX_IVFFLAT)
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 240 "flex_lexer.l"
TOKEN(INDEX_IVFPQ)
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 241 "flex_lexer.l"
TOKEN(INDEX_HNSW)
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 243 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 180:
#line 246 "flex_lexer.l"
case 181:
YY_RULE_SETUP
#line 246 "flex_lexer.l"
{
  yylval->fval = atof(yytext);
  return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 182:
YY_RULE_SETUP
#line 256 "flex_lexer.l"
{
  yylval->ival = LLONG_MIN;
  return SQL_INTVAL;
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 261 "flex_lexer.l"
{
  errno = 0;
  yylval->ival = strtoll(yytext, nullptr, 0);
  if (errno) {
    return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
    return 0;
  }
  return SQL_INTVAL;
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 271 "flex_lexer.l"
{
  // Crop the leading and trailing quote char
  yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 277 "flex_lexer.l"
{
  yylval->sval = strdup(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 282 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 283 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 284 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 285 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 286 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 288 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 290 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 4427 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1358 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1358 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1357);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 290 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

