#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 190
#define YY_END_OF_BUFFER 191
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1354] =
    {   0,
        0,    0,  187,  187,    2,    2,  191,  189,    4,    4,
      189,  189,  178,  185,  178,  178,  182,  178,  178,  178,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  178,  187,  188,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  170,    0,    1,    0,
      180,  179,  182,    0,    0,    0,  172,  171,  169,  173,

      184,  184,  184,  184,  184,  184,   12,  184,  184,  184,
       19,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,   71,  184,  184,   74,
       83,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      101,  184,  184,  106,  109,  110,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  146,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  174,  187,  186,
        2,    2,    2,    2,    1,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  183,    0,  179,  176,  177,  175,

        5,  184,    7,  184,  184,   10,  184,   13,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,   34,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,   48,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,   59,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
       78,  184,  184,   86,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  102,  184,  184,  184,  107,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  132,  184,  184,  184,

      184,  184,  184,  184,  184,  184,  184,  184,  147,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    0,  184,  184,  184,  184,  184,
      184,  184,  184,  184,   20,  184,   22,   23,   24,  184,
      184,  184,   29,  184,  184,  184,   32,   35,  184,  184,
      184,  184,  184,   41,  184,  184,  184,   46,   47,  184,
      184,  184,  184,  184,  184,  184,   56,  184,  184,  184,

       61,   62,  184,  184,   66,  184,   68,   69,  184,  184,
      184,  184,  184,  184,   82,  184,   85,   87,   88,  184,
       90,  184,  184,   93,  184,  184,  184,  184,  184,  104,
      184,  184,  184,  184,  113,  184,  184,  116,  184,  184,
      184,  184,  121,  184,  184,  184,  184,  126,  184,  184,
      184,  184,  134,  135,  184,  184,  184,  184,  184,  142,
      143,  144,  184,  149,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  160,  184,  162,  184,  164,  165,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    0,    6,    8,  184,
       11,  184,   15,  184,  184,  184,  184,  184,  184,  184,
      184,  184,   31,  184,  184,  184,  184,  184,  184,   40,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
       55,   57,  184,  184,  184,   64,  184,   70,   72,  184,
       75,   76,  184,  184,  184,  184,   89,   91,  184,   94,
       95,  184,   98,  184,  184,  184,  184,  111,  112,  184,
      184,  184,  184,  184,  120,  184,  184,  124,  184,  184,
      184,  184,  133,  184,  184,  184,  139,  184,  184,  184,
      184,  184,  152,  184,  184,  184,  156,  184,  184,  184,

      184,  163,  166,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        0,  184,   14,  184,   17,  184,  184,  184,   25,   27,
      184,   30,  184,  184,  184,  184,  184,   39,  184,   43,
      184,   45,   49,   50,  184,   52,  184,  184,  184,   60,
       63,   65,   67,   73,   77,  184,  184,  184,   84,   92,
       96,   99,  184,  103,  184,  108,  184,  184,  184,  184,
      184,  122,  184,  184,  127,  129,  131,  184,  137,  184,
      140,  184,  184,  184,  184,  184,  153,  154,  155,  157,
      184,  159,  184,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,    9,   16,   18,
       21,  184,   26,   28,  184,  184,  184,   37,   38,  184,
      184,   51,   53,   54,  184,   79,  184,  184,   97,  100,
      184,  184,  184,  184,  118,  119,  184,  184,  128,  130,
      184,  138,  184,  184,  184,  184,  184,  158,  161,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,  184,    0,   33,  184,   42,   44,  184,
      184,   81,  105,  184,  184,  184,  123,  125,  136,  184,
      184,  184,  150,  184,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,  184,    0,  184,
       58,   80,  184,  115,  117,  141,  145,  184,  151,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    0,    0,    0,   36,  114,  184,    2,    2,
        2,    2,    2,    2,    0,    0,  167,  148,    2,    2,
        2,    2,    0,    0,    2,    2,    0,    0,    2,    2,
        0,    0,    2,    2,    0,    0,    2,    2,    0,    0,
        2,    2,    0,  168,    2,    2,    0,    2,    0,    2,
      181,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    1,    8,    7,
        7,    7,    7,    7,    9,   10,    7,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,    7,    7,   21,
       22,   23,    7,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        7,    1,    7,    7,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,    7,   77,    7,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[78] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    4,    1,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1361] =
    {   0,
        0,    0,  698,  694,   77,    0,  680, 8800,  153,  155,
      648,    0, 8800, 8800,  150,  149,  161,  178,  642,  638,
      175,  160,  182,  200,  219,  270,  168,  225,  235,  153,
      166,  214,  254,  272,  283,  301,    0,  302,  344,  387,
      323,  349,  327,  167,  579,    0,  646,    0,  183,  187,
      612,  620,    0,    0,  187,  445,  456,  408,  598,  582,
      476,  553,  607,  659,  707,  759,  459,  518,  802,  476,
      540,  552,  554,  853,  902,  951,  578,  657,  997, 1049,
      329,  705,  720,  604,  526,  272, 8800,  584, 8800,  566,
     1114, 1124, 1135,  544,  542,  541, 8800, 8800, 8800, 8800,

        0,  231,  217,  378,  396,  221,  254,  459,  265,  268,
        0,  552,  294,  657,  378,  333,  379,  763,  451,  380,
      388,  453,  480,  483,  618,  475,  477,  487,  606,  505,
      536,  558,  559,  656,  585,  596,    0,  644,  647,  759,
      653,  667,  656,  680,  704,  783,  689,  709,  710,  707,
      797,  726,  760,  770,    0,  779,  765,  787,  800,  821,
      820,  809,  832,  821,  846,  822,  860,  864,  823,  836,
      821,  839,  860,  881,  865,  864,  866,  890,  910,  882,
      878,  915,  912,  923,  921,  909,  930, 8800,    0, 8800,
        0,  298,    0,  544,    0,  535, 1145, 1155, 1166,  524,

      503,  468,    0,    0,    0,    0,  952, 1011, 1036, 1152,
     1203, 1155,  968, 1249, 1202, 1215, 1255, 1260, 1291, 1331,
     1289, 1331, 1360, 1412, 1409, 1340, 1405, 1420, 1458, 1461,
     1510, 1455, 1504, 1512, 1547, 1558, 1556, 1576, 1594, 1565,
     1601, 1610, 1629, 1630, 1658, 1707, 1645, 1672, 1680, 1724,
     1772, 1824, 1723, 1770, 1816, 1825, 1865, 1868, 1889, 1912,
     1881, 1925, 1948, 1781, 1960, 1790, 1965, 1967, 1997, 2008,
     2016, 2044, 2093, 2072, 2067, 2101, 2113, 2141, 2155, 2162,
     2163, 2185, 2207, 1217, 2258, 2226, 2229, 2274, 2277, 2299,
     2270, 2325, 2328,    0, 8800,  477, 1192, 8800, 8800, 8800,

        0,  943,    0,  957,  952,    0,  969,    0,  959,  967,
      988, 1008, 1009, 1013, 1473, 1010, 1025, 1046, 1040, 1037,
     1064, 1047, 1051, 1065, 1052, 1153, 1159, 1169, 1261, 1172,
     1173, 1190, 1210, 1203, 1218,    0, 1257, 1270, 1283, 1270,
     1300, 1306, 1307, 1328, 1334, 1345, 1353, 1355, 1366, 1387,
     1369, 1390, 1399, 1391, 1401, 1411, 1414, 1460, 1463, 1476,
     1509, 1462, 1470,    0, 1502, 1524, 1522, 1529, 1616, 1540,
     1562, 1557, 1603, 1612,    0, 1637, 1659, 1658, 1660, 1683,
     1688, 1689, 1708, 1699, 1749, 1704, 1711, 1711, 1742, 1731,
     1753, 1759, 1754, 1770, 1765, 1788,    0, 1801, 1806, 1815,

     1822, 1821, 1827, 1839, 1843, 1849, 1869, 1889,    0, 1884,
     1941, 1908, 2009, 1919, 1956, 1963, 1962, 2011, 1999, 2000,
     2013, 2070, 2026, 2019,    0,  474, 2393,    0,    0,    0,
     2327, 2386, 2387, 2388, 2386, 2402, 2430, 2433, 2441, 2450,
     2455, 2485, 2484, 2487, 2536, 2535, 2527, 2549, 2577, 2585,
     2603, 2622, 2630, 2642, 2646, 2674, 2647, 2699, 2686, 2714,
     2727, 2740, 2752, 2780, 2765, 2793, 2805, 2806, 2831, 2840,
     2841, 2876, 2884, 2884, 2909, 2919, 2935, 2943, 2954, 2978,
     2987, 3001, 3007, 3036, 3039, 3065, 3064, 3077, 3089, 3090,
     3103, 3115, 3134, 3140, 3158, 3151, 3183, 3185, 3237, 3215,

     3249, 3261, 3275, 3283, 3301, 3319, 3326, 3340, 3354, 3365,
     3379, 3394, 3446, 3394, 3496, 3429, 3472, 3413, 3524, 3483,
     3532, 3545, 3568, 3580, 3585, 3588, 3593, 3629, 3634, 3637,
     3636, 3644, 3680, 3684, 3693, 3726, 3729, 3746, 3749, 3775,
     3778, 3798, 3803, 3800, 3848, 3819, 3847, 3875, 3889, 3908,
     3905, 3943, 3929, 3959,  465, 2026, 2056, 2068, 2069, 2080,
     2113, 2130, 2122, 2147,    0, 2181,    0,    0, 2191, 2193,
     2209, 2202,    0, 2206, 2209, 2224, 2222,    0, 2260, 2263,
     2261, 2264, 2320, 2309, 2335, 2330, 2334,    0,    0, 2331,
     2333, 2385, 2387, 2407, 2408, 2456,    0, 2442, 2453, 2484,

        0,    0, 2503, 2500,    0, 2505,    0, 2501, 2517, 2539,
     2552, 2575, 2577, 2598,    0, 2584,    0,    0,    0, 2578,
        0, 2587, 2601,    0, 2606, 2780, 2642, 2635, 2673,    0,
     2700, 2702, 2692, 2698,    0, 2708, 2717,    0, 2759, 2785,
     2823, 2834,    0, 2830, 2826, 2829, 2848,    0, 2861, 2861,
     2875, 2879,    0,    0, 2873, 2908, 2910, 2937, 2929,    0,
        0, 2931, 2933,    0, 2961, 2966, 2982, 2982, 3003, 2990,
     3043, 3053, 3052, 3051,    0, 3089,    0, 3106,    0, 3104,
      430, 3967, 3978, 4006, 4011, 4036, 4016, 4041, 4068, 4070,
     4085, 4115, 4120, 4123, 4145, 4169, 4171, 4174, 4193, 4219,

     4072, 4222, 4237, 4263, 4224, 4268, 4279, 4282, 4312, 4298,
     4338, 4350, 4342, 4366, 4382, 4406, 4415, 4429, 4459, 4462,
     4483, 4484, 4510, 4512, 4536, 4538, 4560, 4562, 4588, 4590,
     4602, 4617, 4631, 4645, 4656, 4684, 4666, 4709, 4720, 4765,
     4723, 4739, 4774, 4783, 4807, 4816, 4825, 4856, 4864, 4869,
     4878, 4903, 4917, 4914, 4942, 4957, 4966, 4992, 4995, 5007,
     5021, 5045, 5036, 5071, 5074, 5089, 5119, 5124, 5127, 5149,
     5168, 5183, 5197, 5202, 5227, 5204, 5234, 5251, 5256, 5269,
     5258, 5281, 5305, 5307, 5310, 5319, 5345, 5344, 5355, 5374,
     5388, 5402, 5416, 5430, 5444, 5468, 5472, 5367, 5495, 5507,

     5519, 5520, 5533, 5545, 5548, 5564,  427,    0,    0, 3108,
        0, 3139,    0, 3163, 3149, 3173, 3180, 3199, 3192, 3187,
     3197, 3209,    0, 3204, 3214, 3211, 3227, 3220, 3231,    0,
     3235, 3240, 3258, 3273, 3289, 3276, 3282, 3293, 3305, 3327,
        0,    0, 3313, 3322, 3336, 3330, 3349,    0,    0, 3340,
        0,    0, 3342, 3391, 3441, 3390,    0,    0, 3418,    0,
        0, 3433, 3431, 3455, 3438, 3454, 3447,    0,    0, 3468,
     3472, 3497, 3486, 3487,    0, 3509, 3518,    0, 3532, 3544,
     3545, 3530,    0, 3552, 3570, 3578, 3580, 3586, 3631, 3687,
     3692, 3683,    0, 3696, 3698, 3701,    0, 3691, 3721, 3724,

     3751,    0,    0,  425, 5577, 5580, 5608, 5621, 5633, 5641,
     5659, 5677, 5689, 5701, 5725, 5730, 5744, 5757, 5769, 5783,
     5788, 5801, 5813, 5831, 5838, 5839, 5861, 5863, 5887, 5892,
     5885, 5915, 5939, 5940, 5944, 5937, 5991, 5988, 5993, 6023,
     6032, 6030, 6039, 6075, 6074, 6083, 6116, 6119, 6125, 6160,
     6168, 6173, 6184, 6214, 6215, 6228, 6256, 6259, 6267, 6272,
     6303, 6314, 6327, 6355, 6358, 6369, 6375, 6409, 6417, 6445,
     6453, 6467, 6479, 6491, 6503, 6521, 6533, 6547, 6561, 6535,
     6559, 6600, 6591, 6598, 6616, 6634, 6658, 6664, 6677, 6688,
     6715, 6717, 6741, 6749, 6751, 6770, 6794, 6803, 6822, 6836,

      419, 3752,    0, 3745,    0, 3752, 3790, 3780, 3818,    0,
     3836,    0, 3834, 3843, 3866, 3865, 3859,    0, 3883,    0,
     3888,    0,    0,    0, 3902,    0, 3897, 3895, 3914,    0,
        0,    0,    0,    0,    0, 3915, 3934, 3944,    0,    0,
     3955,    0, 3964,    0, 3986,    0, 3975, 3998, 4016, 4027,
     4008,    0, 4034, 4041, 4030, 4051,    0, 4060,    0, 4087,
        0, 4103, 4114, 4131, 4116, 4135,    0,    0,    0,    0,
     4123,    0, 4132,  418, 6842, 6847, 6852, 6876, 6890, 6896,
     6915, 6925, 6931, 6944, 6967, 6980, 6998, 7011, 7034, 7047,
     7058, 7077, 7088, 7107, 7101, 7131, 7137, 7154, 7159, 7161,

     7185, 7205, 7208, 7210, 7213, 7249, 7254, 7262, 7284, 7298,
     7310, 7312, 7334, 7339, 7353, 7369, 7377, 7383, 7407, 7413,
     7430, 7442, 7456, 7464, 7478, 7492, 7506, 7513, 7521, 7527,
     7551, 7557, 7565, 7581, 7600, 7624, 7623, 7647, 7668, 7665,
     7671, 7689, 7712, 7715, 7731, 7745,  419,    0,    0,    0,
        0, 4153,    0,    0,  346, 4159, 4187,    0,    0, 4185,
     4173,    0,    0,    0, 4181,    0, 4211, 4220,    0,    0,
     4215, 4235, 4234, 4236,    0,    0, 4236, 4300,    0,    0,
     4322,    0, 4327, 4333, 4327, 4355, 4359,    0,    0,  416,
     7759, 7773, 7787, 7801, 7608, 7812, 7826, 7850, 7841, 7875,

     7876, 7889, 7890, 7904, 7928, 7929, 7930, 7955, 7964, 7983,
     7997, 8006, 8025, 8041, 8026, 8058, 8060, 8079, 8083, 8107,
     8121, 8125, 8149, 8163, 8167, 8193, 8207, 8216, 8218, 8236,
     8260, 8268,  385, 4352, 4419,    0, 4356,    0,    0, 4401,
     4389,    0,    0, 4393, 4399, 4408,    0,    0,    0, 4394,
     4408, 4423,    0, 4451,  383, 8290, 4512, 8282, 8308, 8316,
     8334, 8356, 8342, 8368, 8370, 8396, 8405, 8411, 8435, 8441,
     8449, 8474, 8488, 8493, 8496, 8518,  376,  432, 4445, 4462,
        0,    0, 4450,    0,    0,    0,    0, 4470,    0,  374,
     8557, 4489, 8542, 8554, 8556, 8561, 8591, 8599, 8602, 8605,

     8649, 8650,  367, 4603, 4500,    0,    0, 4514,  362, 4696,
     4510, 8652, 8664, 8691,  337, 4548, 8800,    0,  331, 4572,
        0, 8695,  330, 4563,  315, 4573,  300, 4576,  288, 4585,
      260, 4610,  249, 4612,  230, 4621,  227, 4625,  218, 4640,
      211, 4653,  195, 8800,  192,    0,  194,  188,  178,  174,
     8800,    0, 8800, 8769, 8774,  178, 8779, 8784, 8789, 8794
    } ;

static const flex_int16_t yy_def[1361] =
    {   0,
     1353,    1, 1354, 1354, 1353,    5, 1353, 1353, 1353, 1353,
     1353, 1355, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1353, 1357, 1353, 1358, 1358, 1353,
     1358, 1359, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1360, 1360,   62,   62,   62,   63,   65,   62,   65,   62,
       62,   62,   62,   63,   63,   63,   62,   62,   62,   62,
       65,   62,   62,   62, 1358, 1353, 1353, 1355, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,

     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1353, 1357, 1353,
     1358, 1358, 1358, 1359, 1358, 1358, 1358, 1358, 1358, 1358,

     1358, 1358, 1358, 1358, 1358, 1358,   62,   62,   62,   65,
       65,   65,   65,   65,   65,   62,   62,   65,   65,   65,
       62,   62,   62,   65,   65,   65,   62,   65,   65,   65,
       62,   65,   65,   62,   65,   62,   65,   62,   62,   65,
       65,   65,   65,   62,   62,   65,   65,   62,   62,   62,
       62,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   62,   62,   62,   62,   65,   65,   65,
       65,   65,   65,   62,   62,   62,   62,   62,   62,   65,
       62,   62,   62,   63,   62,   62,   62,   65,   65,   62,
       62,   62,   62, 1358, 1353, 1353, 1353, 1353, 1353, 1353,

     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,

     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1358, 1358, 1358, 1358, 1358, 1358,
       62,   62,   62,   62,   65,   65,   65,   65,   62,   62,
       62,   62,   65,   65,   62,   62,   62,   62,   62,   62,
       62,   65,   65,   62,   65,   65,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   65,
       65,   65,   65,   62,   62,   65,   65,   65,   65,   65,
       65,   65,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   65,   65,   65,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   65,   65,   65,   62,
       62,   62,   62,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   62,   62,   62,   62,   62,   62,   62,
       65,   65,   65,   65,   65,   65,   65,   62,   62,   65,
       65,   62,   62,   62,   62,   65,   65,   65,   65,   65,
       65,   65,   65,   65, 1353, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,

     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1358,   65,   65,   62,   62,   62,   65,   62,   65,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       65,   62,   62,   62,   65,   65,   65,   65,   65,   65,
       65,   62,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   65,   65,   65,   62,   62,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   62,   62,
       62,   65,   65,   65,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   65,   65,   62,   62,   62,
       65,   62,   62,   62,   62,   62,   62,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   62,   62,   62,

       62,   62,   62,   62,   62,   65, 1353, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,

     1356, 1356, 1356, 1358,   65,   65,   65,   65,   62,   62,
       62,   62,   62,   62,   62,   65,   65,   62,   62,   62,
       65,   62,   62,   62,   65,   62,   62,   62,   62,   65,
       62,   62,   62,   62,   65,   62,   62,   62,   62,   62,
       62,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       62,   65,   65,   65,   65,   65,   65,   65,   62,   65,
       65,   65,   65,   65,   65,   65,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   65,   65,   65,   65,   65,   65,   65,
       62,   62,   62,   62,   65,   65,   65,   65,   65,   65,

     1353, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1358,   62,   62,   65,   65,   65,   62,
       62,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   62,   62,   65,

       65,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   65,   65,   65,   65,   65,   65,   65,
       62,   62,   62,   62,   62,   62,   62,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65, 1353, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1358,
       65,   65,   65,   65,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   65,   65,   65,
       65,   65,   65,   65,   62,   62,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   62,   62,
       62,   62, 1353, 1356, 1353, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1358,   62, 1358,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   65,   65,   65,   65,
       65,   62,   62,   62,   62,   62, 1353, 1356, 1353, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1358,
       62, 1358,   62,   62,   62,   65,   65,   65,   65,   65,

       62,   62, 1353, 1353, 1353, 1356, 1356, 1356, 1358, 1358,
     1358,   62,   62,   65, 1353, 1353, 1353, 1356, 1358, 1358,
     1358,   65, 1353, 1353, 1358, 1358, 1353, 1353, 1358, 1358,
     1353, 1353, 1358, 1358, 1353, 1353, 1358, 1358, 1353, 1353,
     1358, 1358, 1353, 1353, 1358, 1358, 1353, 1358, 1353, 1358,
     1353, 1358,    0, 1353, 1353, 1353, 1353, 1353, 1353, 1353
    } ;

static const flex_int16_t yy_nxt[8878] =
    {   0,
        8,    9,   10,   11,   12,    8,   13,   14,   15,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   37,   45,   48,   49,   50,
       51,   52,   48,   53,   54,   55,   56,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,   83,   77,   84,   77,   48,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       77,   84,   77,   85,   86,   86,   86,   86,   89,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   90,
       92,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   94,  101,   95,  192,   86,   96,  108,   86,   86,
      142,  109, 1352,  143,  187,  195, 1351,  110, 1350,   97,

       98,  102,  132,  103, 1349,  112,  196,  111,  133,  104,
     1348,  105,  113, 1347,  108,  106,  107,  142,  109,  114,
      143,  187,  115,  117,  110,  116, 1345,  118,  102,  132,
      103,  119,  112, 1343,  111,  133,  104,  120,  105,  113,
      121,  144,  106,  107, 1341,  145,  114, 1339,  134,  115,
      117,  146,  116,  122,  118,  123,  135,  301,  119,  302,
      124,  307,  136,  137,  120,  125, 1337,  121,  144,  138,
      139,  140,  145,   86,   86,  134,  141, 1335,  146,  308,
      122,  147,  123,  135,  301,  148,  302,  124,  307,  136,
      137,  149,  125,  126,  312,  150,  138,  139,  140,  192,

       86,  127, 1333,  141,  128,  313,  308,  129,  147,  151,
      130,  154,  148,  131, 1331,  152,  153,  316,  149,  155,
      126,  312,  150,  156,  159,  162,  157,  158,  127,  163,
     1329,  128,  313,  164,  129,  160,  151,  130,  154,  165,
      131,  161,  152,  153,  316, 1327,  155, 1235, 1235, 1325,
      156,  159,  162,  157,  158, 1323,  163,  185,  186,  179,
      164,  180,  160,  207,  181,  285,  165,  286,  161,  166,
      287,  167,  182,  323,  168,  207,  183,  169, 1319,  170,
      184,  171,  172, 1315,  185,  186,  179, 1309,  180, 1303,
      207,  181,  285, 1290,  286, 1277,  166,  287,  167,  182,

      323,  168,  207,  183,  169,  321,  170,  184,  171,  172,
      173,  200,  303,  201,  174,  322,  202,  175,  176,  305,
      304,  324,  306,  333,  177,  334,  325,  178, 1255,  203,
      204, 1233,  321, 1304, 1304, 1190, 1147,  173, 1074,  303,
     1001,  174,  322,  904,  175,  176,  305,  304,  324,  306,
      333,  177,  334,  325,  178,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  198,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  191,  191,  807,  191,
      191,  191,  191,  191,  191,  191,  681,  309,  310,  555,
      430,  331,  332,  238,  335,  207,  191,  191,  191,  239,

      207,  311,  208,  207,  209,  207,  336,  207,  337,  343,
      210,  344,  211,  248,  309,  310,  212,  213,  331,  332,
      238,  335,  207,  207,  345,  429,  239,  207,  311,  208,
      207,  209,  207,  336,  207,  337,  343,  210,  344,  211,
      248,  240,  348,  212,  213,  207,  428,  426,  425,  241,
      207,  345,  191,  191,  191,  242,  191,  191,  191,  191,
      191,  191,  191,  300,  299,  207,  298,  249,  240,  348,
      349,  207,  207,  191,  191,  191,  241,  207,  296,  250,
      214,  253,  242,  251,  215,  254,  314,  207,  295,  252,
      216,  255,  207,  315,  249,  350,  351,  349,  207,  207,

      217,  207,  294,  206,  207,  207,  250,  214,  253,  207,
      251,  215,  254,  314,  207,  207,  252,  216,  255,  205,
      315,  354,  350,  351,  191,  207,  207,  217,  207,  191,
      218,  293,  207,  193,  207,  207,  207,  219,  207,  355,
      346,  207,  207,  338,  220,  339,  347,  221,  354,  340,
      222,  207,  207,  190,  207,  188,  341,  218,  293,  100,
      342,  207,  207,   99,  219,  207,  355,  346,  207,   87,
      338,  220,  339,  347,  221,  356,  340,  222,  207, 1353,
      268,  207,  223,  341,  269,  357,  224,  342,  270,  362,
      225,  317,  318,  319,  271,  320,  226,  352,  363,  227,

      353,   47,  356,  364,  207,   47,  207,  268,  365,  223,
     1353,  269,  357,  224, 1353,  270,  362,  225,  317,  318,
      319,  271,  320,  226,  352,  363,  227,  353,  288,  371,
      364,  207,  289,  207,  207,  365,  290,  366,  207,  367,
     1353,  228,  207,  229,  207,  372,  373,  207,  230,  374,
      291,  292,  207,  231,  207,  288,  371,  207, 1353,  289,
      377,  207, 1353,  290,  366,  207,  367,  207,  228,  207,
      229,  207,  372,  373,  207,  230,  374,  291,  292,  207,
      231,  207,  232,  378,  207,  358,  326,  377,  327,  207,
      233,  328, 1353,  234,  207,  359,  235,  329,  379,  236,

      360,  361,  237, 1353,  330,  380,  368,  381,  369,  232,
      378, 1353,  358,  326,  382,  327,  207,  233,  328,  370,
      234, 1353,  359,  235,  329,  379,  236,  360,  361,  237,
      243,  330,  380,  368,  381,  369,  244,  245,  246,  375,
      383,  382,  376,  247,  384,  387,  370,  385,  207, 1353,
      391,  386,  394, 1353,  400,  388, 1353,  243, 1353,  401,
     1353,  402,  403,  244,  245,  246,  375,  383,  389,  376,
      247,  384,  387,  390,  385,  207,  256,  391,  386,  394,
      392,  400,  388,  207,  404,  395,  401,  398,  402,  403,
      257,  393,  407,  207,  396,  389,  258,  259, 1353,  408,

      390,  399,  397,  256,  409, 1353, 1353,  392,  415,  416,
      207,  404,  395,  410,  398, 1353,  405,  257,  393,  407,
      207,  396, 1353,  258,  259,  207,  408,  406,  399,  397,
      260,  409,  207,  411,  412,  415,  416,  419,  261,  207,
      410,  413,  262,  405,  414,  263,  264, 1353,  422,  417,
      420,  423,  207,  424,  406,  418, 1353,  260, 1353,  207,
      411,  412, 1353,  421,  419,  261,  207, 1353,  413,  262,
      556,  414,  263,  264,  265,  422,  417,  420,  423,  207,
      424,  207,  418,  207,  557,  266,  558, 1353,  207,  207,
      421,  267,  559,  438,  207, 1353,  560,  556,  561,  207,

     1353,  265,  207, 1353,  207, 1353,  207, 1353,  207,  207,
      207,  557,  266,  558,  207,  207,  207, 1353,  267,  559,
      438,  207,  272,  560,  273,  561,  207,  274,  207,  207,
      275,  207,  276,  562,  277,  278,  207,  431,  207,  563,
     1353,  207,  207,  564,  207, 1353, 1353,  565,  207,  272,
      569,  273, 1353, 1353,  274,  207, 1353,  275,  207,  276,
      562,  277,  278,  207,  431,  207,  563,  207,  570,  207,
      564,  207,  279,  207,  565,  207,  280,  569,  432,  281,
      282,  571,  572,  207,  573,  207,  283,  574,  575,  284,
      207,  576,  577,  578,  207,  570,  207, 1353, 1353,  279,

      207, 1353, 1353,  280, 1353,  432,  281,  282,  571,  572,
      207,  573, 1353,  283,  574,  575,  284, 1353,  576,  577,
      578, 1353, 1353,  207,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,   92,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  198,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  433,  579,  207,  207,
      580,  207,  581,  207,  434,  437,  207,  584,  207, 1353,

      585,  207,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297, 1353,  433,  579,  207,  207,  580,  207,  581,
      207,  434,  437,  207,  584,  207,  435,  585,  207,  436,
     1353,  442,  586, 1353,  587, 1353,  207,  207,  207,  207,
      540,  588,  207,  207,  207,  589,  207,  207,  207,  207,
     1353, 1353,  443,  435,  207, 1353,  436,  207,  442,  586,
      541,  587,  207,  207,  207,  207,  207,  540,  588,  207,
      207,  207,  589,  207,  207,  207,  207,  439,  440,  443,
      590,  207,  207,  207,  207,  207,  207,  541,  582,  207,
      207,  441,  207, 1353,  444,  207,  207,  591, 1353, 1353,

     1353,  445,  207,  583,  439,  440,  207,  590,  592,  207,
      207,  593,  207,  207,  446,  582,  451,  207,  441,  207,
      207,  444,  207,  207,  591,  207,  452,  207,  445,  207,
      583, 1353,  207,  207,  594,  592,  207,  207,  593, 1353,
     1353,  446, 1353,  451, 1353, 1353,  595,  207,  596, 1353,
     1353, 1353,  207,  452,  207,  597, 1353,  598,  207,  207,
     1353,  594,  207,  207,  207,  447,  448,  449,  207,  450,
     1353,  453,  207,  595,  207,  596,  207,  207,  207,  599,
     1353,  207,  597,  463,  598,  207,  207,  207,  600,  207,
      601,  207,  447,  448,  449,  207,  450,  207,  453,  207,

      602,  207,  454,  207,  207,  207,  599,  455,  207, 1353,
      463,  603,  604,  207,  207,  600, 1353,  601,  207, 1353,
      605, 1353, 1353, 1353,  207, 1353, 1353,  602, 1353,  454,
      606, 1353,  207,  607,  455,  456,  207,  457,  603,  604,
      458,  608,  464,  207,  609,  207,  459,  605,  207,  461,
      462,  610,  207,  460,  207,  207,  207,  606,  207,  207,
      607,  465,  456,  207,  457, 1353,  207,  458,  608,  464,
      207,  609,  207,  459, 1353,  207,  461,  462,  610,  207,
      460,  207,  207,  207,  466,  207,  467,  611,  465,  473,
      612,  207,  207,  207,  207,  207,  207,  207,  566,  207,

      567,  207,  207,  613,  207,  616,  617,  207, 1353, 1353,
     1353,  466, 1353,  467,  611,  568,  473,  612,  207,  207,
     1353,  207,  207,  207,  207,  566,  207,  567,  207,  207,
      613,  207,  616,  617,  207,  468,  614,  469,  474,  207,
      207,  470,  568,  207,  618,  207,  615,  207,  471,  475,
      207,  619,  472,  620, 1353,  621, 1353,  207, 1353,  207,
     1353, 1353,  468,  614,  469,  474,  207,  207,  470,  624,
      207,  618,  207,  615,  207,  471,  475,  207,  619,  472,
      620,  476,  621,  207,  207,  207,  207,  477,  207,  207,
      479,  625,  207,  207, 1353,  478,  624,  207, 1353,  207,

      626,  207,  207,  207, 1353,  207,  482,  207,  476,  483,
      207,  207,  207,  480,  477,  207,  207,  479,  625,  207,
      207,  207,  478,  207,  207,  207,  207,  626,  207,  207,
      207,  481,  207,  482,  207,  207,  483,  484,  207,  622,
      480,  207,  207, 1353,  207,  627,  207,  207,  207,  623,
      207,  207,  207,  485, 1353,  628,  207,  207,  481, 1353,
      629,  486,  207,  207,  484,  207,  622,  207,  207,  207,
      207,  207,  627,  207,  207,  207,  623,  207,  207,  207,
      485,  492,  628,  207,  207,  207,  207,  629,  486,  207,
      207,  207,  207,  630,  207,  207,  487,  207,  631,  207,

     1353,  632,  207,  493,  207,  207,  207,  207,  492,  207,
      633,  207,  207,  207, 1353,  634,  207,  207,  207,  207,
      630, 1353,  207,  487, 1353,  631,  207,  494,  632,  635,
      493,  636,  207,  488,  207,  638,  207,  633,  207,  641,
      642,  207,  634,  489,  207,  643,  207, 1353,  490,  491,
      637,  207,  495,  207,  494,  207,  635,  207,  636,  207,
      488,  207,  638,  501,  207,  644,  641,  642,  207,  207,
      489,  207,  643,  645,  639,  490,  491,  637,  207,  495,
      207, 1353,  207,  646,  207, 1353,  207,  640,  207, 1353,
      501,  207,  644,  647, 1353,  648,  207,  649,  207,  207,

      645,  639,  650,  207,  207,  496,  502,  497,  512,  207,
      646,  207,  207,  514,  640,  651,  207,  207,  207,  207,
      647,  207,  648, 1353,  649, 1353,  207,  207,  207,  650,
      207,  207,  496,  502,  497,  512,  207,  207,  207,  207,
      514,  652,  651,  207,  207,  207,  207,  498,  207,  499,
      207,  653,  503,  654,  207,  207,  655,  207,  207,  207,
      500,  207,  207,  656,  207,  207,  207,  504,  652,  657,
      207,  207, 1353,  658,  498, 1353,  499,  207,  653,  503,
      654,  659, 1353,  655,  207,  207,  207,  500,  207,  207,
      656,  660,  207,  207,  504, 1353,  657,  207,  207,  207,

      658,  207,  507, 1353,  207,  661,  207,  505,  659,  207,
      506,  207,  508, 1353,  207,  207,  662,  207,  660, 1353,
      663, 1353,  207,  207, 1353,  207,  207,  207,  207,  507,
      207,  207,  661,  207,  505,  207,  207,  506,  207,  508,
      509,  207,  207,  662,  207,  666,  207,  663,  207,  207,
      207,  510,  207,  207,  207, 1353,  669,  207,  207,  207,
     1353,  207,  207, 1353, 1353, 1353,  207,  509,  664, 1353,
     1353,  207,  666,  207, 1353,  207, 1353,  665,  510,  670,
      207, 1353,  207,  669,  207,  207,  207,  207,  207,  207,
      511,  207,  515,  207,  207,  664,  516,  207,  207,  671,

      513,  207,  207,  517,  665,  672,  670,  207,  207,  207,
     1353,  207,  207,  207,  207, 1353,  207,  511,  207,  515,
      518,  207, 1353,  516,  207, 1353,  671,  513,  207,  207,
      517,  207,  672,  519,  207,  207,  673,  521,  520,  207,
      207,  674,  207,  207,  207,  675,  667,  518,  668,  207,
      522, 1353,  207, 1353,  207,  676,  679,  207,  207,  680,
      519,  523,  207,  673,  521,  520,  808, 1353,  674,  207,
      207,  207,  675,  667,  524,  668,  207,  522,  207,  207,
      207,  207,  676,  679,  207,  207,  680, 1353,  523,  207,
      207, 1353, 1353,  808,  207,  528,  809, 1353,  530,  207,

     1353,  524, 1353,  207,  207,  207,  677,  207, 1353,  529,
      678, 1353,  207, 1353,  207,  810,  811,  207,  525,  207,
      812,  207,  528,  809,  531,  530,  207,  526,  207,  207,
      207,  207,  207,  677,  207,  527,  529,  678,  207,  207,
      207,  207,  810,  811,  207,  525,  207,  812,  207,  813,
      207,  531, 1353,  532,  526,  207,  207,  814,  815,  207,
      207,  207,  527, 1353,  533,  207,  207,  207,  207, 1353,
     1353,  207,  207, 1353,  816,  207,  813,  207,  207,  534,
      532, 1353,  207, 1353,  814,  815,  207,  207,  207, 1353,
      537,  533,  207, 1353,  207,  207,  207,  535,  207,  207,

      207,  816,  207,  207,  817,  207,  534, 1353,  536,  207,
      207, 1353,  207,  207,  818,  207,  207,  537, 1353,  207,
      538,  207,  207,  207,  535,  207, 1353,  207,  819,  207,
      207,  817,  207, 1353,  207,  536, 1353,  207,  207,  207,
      820,  818,  821,  207,  207,  539, 1353,  538,  822,  207,
      823,  824,  545,  207,  207,  819,  207,  207, 1353,  207,
      546,  207, 1353,  207,  825,  207,  207,  820, 1353,  821,
     1353,  207,  539,  207, 1353,  822,  207,  823,  824,  545,
      207,  207,  542,  207,  207,  207, 1353,  546, 1353,  543,
      207,  825,  544,  207,  826,  207, 1353,  552,  827, 1353,

      207,  207,  549,  207,  828,  207,  829,  207,  547,  542,
      207,  207,  207,  207,  548,  207,  543,  207,  207,  544,
      207,  826,  207,  207,  552,  827,  550, 1353,  207,  549,
      207,  828,  207,  829,  207,  547,  207,  207,  207,  551,
      207,  548,  207,  830,  207,  207,  207,  207, 1353,  831,
      207,  554,  207,  550,  207,  207,  207,  207,  207,  207,
      832,  833,  207,  207,  207,  207,  551,  553,  834,  835,
      830,  836,  207,  207,  207,  207,  831, 1353,  554,  207,
     1353,  207,  207,  207, 1353,  207,  207,  832,  833,  207,
     1353,  207,  207, 1353,  553,  834,  835, 1353,  836,  207,

     1353,  207,  207,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  682,  207,  683, 1353,  207,  207,  207,
      684, 1353,  207,  207,  207,  207, 1353,  207,  837,  838,
      839,  840,  207,  207,  207,  207,  207, 1353,  207, 1353,
      682,  207,  683,  207,  207,  207,  207,  684,  207,  207,
      207,  207,  207,  685,  207,  837,  838,  839,  840,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207, 1353,  207,  207,  207,  207,  686,  207,
      685,  687,  207,  841,  842, 1353,  207,  207,  207, 1353,
      843,  207,  207,  207,  207,  207,  207,  207,  207,  207,

      688,  207,  207,  207,  207,  686,  207,  844,  687,  207,
      841,  842,  207,  207,  207,  207,  689,  843,  690,  207,
      207,  691,  207,  207,  207,  207,  845,  688,  207,  207,
      207, 1353,  207,  207,  844, 1353, 1353, 1353,  846,  207,
     1353,  847,  848,  689,  849,  690, 1353,  207,  691,  207,
      207, 1353,  207,  845,  207,  207, 1353,  207,  207,  207,
      207,  692,  207,  693,  207,  846,  207,  207,  847,  848,
      696,  849,  207,  207,  207,  695,  207, 1353,  694,  850,
      207,  207,  207,  207,  697,  207,  207, 1353,  692,  207,
      693,  207, 1353,  207,  207, 1353,  207,  696,  851,  207,

      207,  207,  695,  207,  207,  694,  850,  207,  207,  207,
      207,  697,  207,  207,  207,  852,  207,  853,  856,  698,
      857,  858,  207,  207,  207,  851,  700,  854,  859, 1353,
      207,  207,  699,  860,  207,  207, 1353, 1353,  855,  207,
      207,  207,  852,  207,  853,  856,  698,  857,  858,  207,
      207,  207, 1353,  700,  854,  859,  207,  207,  207,  699,
      860,  207, 1353,  701,  207,  855,  207,  207,  207,  703,
      702,  207,  863,  207,  207,  864,  207,  207,  706,  207,
      207, 1353,  207,  207,  207,  207, 1353,  704, 1353,  207,
      701,  207,  207,  207,  207,  207,  703,  702,  207,  863,

      207,  207,  864,  207,  865,  706,  207,  207,  705,  207,
      207,  207, 1353,  708,  704,  207,  207,  207, 1353,  207,
      207,  207,  707,  207, 1353,  866,  207, 1353,  709,  867,
      207,  865,  868,  207, 1353,  705,  207,  207,  869,  710,
      708,  207,  207,  870,  207,  207,  207,  207,  871,  707,
      207,  207,  866,  207,  711,  709,  867,  207,  207,  868,
      207,  207, 1353,  207,  207,  869,  710,  207,  207, 1353,
      870,  207,  207,  207,  207,  871,  713,  207,  207,  207,
     1353,  711,  712,  207, 1353,  207,  872,  207,  207,  207,
     1353,  207,  715, 1353,  207, 1353,  207, 1353,  207,  207,

     1353,  207,  207,  713,  207, 1353,  207,  207,  873,  712,
      207,  207,  207,  872,  207, 1353,  207,  207,  714,  715,
      207,  861,  862,  207,  207, 1353,  207,  207,  716,  207,
      207, 1353,  207,  717,  207,  873,  207,  207,  207,  207,
      207, 1353,  207,  207,  207,  714,  874,  207,  861,  862,
     1353,  207,  207,  207,  207,  716,  718,  207,  207,  207,
      717,  875,  207,  207,  207,  876,  877,  207,  207,  207,
      207,  878,  879,  874,  207,  720,  207,  207,  207,  207,
      207,  719,  207,  718, 1353,  207,  207,  207,  875,  207,
     1353, 1353,  876,  877, 1353,  207,  880,  881,  878,  879,

      882,  207,  720,  207,  207,  207,  883,  884,  719,  207,
      207,  723,  207,  207,  207,  207,  721,  207,  207, 1353,
      207,  207,  207,  880,  881,  722, 1353,  882, 1353, 1353,
      207,  207,  724,  883,  884,  885,  207,  207,  723,  207,
      207,  886,  207,  721,  207,  207,  207,  207,  207,  207,
     1353, 1353,  722,  725, 1353,  207,  207,  207,  207,  724,
      207, 1353,  885,  207,  887,  207,  888,  207,  886,  207,
      726,  207,  889,  207,  890, 1353,  207,  207,  727,  207,
      725,  207,  207,  207,  207, 1353,  891,  207,  728,  207,
      207,  887,  207,  888, 1353,  207,  207,  726,  207,  889,

      207,  890,  729,  207,  207,  727,  207, 1353,  207,  892,
     1353,  207,  207,  891,  207,  728,  207,  207,  893,  207,
     1353,  207,  207,  207,  207,  894,  895,  207,  207,  729,
      730,  731,  896,  207,  207,  207,  892,  207,  732,  207,
     1353,  207,  207, 1353,  207,  893,  207,  207,  207, 1353,
      207,  207,  894,  895,  207,  207, 1353,  730,  731,  896,
      207,  207,  207,  207,  207,  732,  207,  207, 1353,  207,
      207,  207,  897,  207,  207, 1353,  207, 1353,  733,  734,
      898,  207,  899,  207, 1353, 1353,  207, 1353,  900, 1353,
      207,  207,  207,  207,  207,  207,  207,  207,  735,  897,

      207,  736,  207,  207,  737,  733,  734,  898,  207,  899,
      207,  207,  207,  207,  207,  900,  738,  739,  207,  207,
      207,  207,  207,  207,  207,  735,  207,  207,  736,  207,
      740,  737,  901,  902,  207,  207,  207,  207,  207,  207,
      741,  207,  207,  738,  739,  903,  207,  207,  207, 1353,
      207,  207,  207,  207,  207, 1353, 1002,  740,  742,  901,
      902,  207,  207,  207,  207, 1353, 1003,  741,  207,  207,
      743, 1353,  903,  207,  207,  207,  207,  207,  745,  207,
      207,  207,  207, 1002, 1353,  742,  207, 1353,  207,  207,
     1004, 1005,  207, 1003,  207,  207, 1006,  743,  207,  207,

      744,  207,  207,  207,  207,  745, 1007,  207,  207,  207,
      207,  747,  207,  207,  746,  207,  207, 1004, 1005,  207,
      207,  207,  207, 1006, 1008,  207,  207,  744, 1009, 1010,
      207,  207,  207, 1007, 1011, 1353, 1012,  207,  747,  207,
     1013,  746,  207,  207,  750, 1014,  207,  207, 1015,  207,
     1016, 1008,  207, 1353, 1017, 1009, 1010,  207, 1018,  207,
      748, 1011,  207, 1012,  207, 1353, 1019, 1013,  207,  207,
      749,  750, 1014,  207,  207, 1015,  207, 1016,  751,  207,
      207, 1017, 1020, 1353,  207, 1018,  207,  748,  207,  207,
     1353,  207,  207, 1019, 1021,  207,  207,  749,  207, 1353,

     1022,  207,  207,  207,  752,  751,  207,  207,  207, 1020,
      207,  207,  207,  207,  207,  207, 1023,  753, 1024,  207,
      207, 1021,  207,  207, 1025,  207,  754, 1022,  207,  207,
      207,  752,  207,  207, 1026,  207, 1027,  207,  207,  207,
     1353,  207,  755, 1023,  753, 1024,  207,  207,  207,  207,
      207, 1025, 1028,  754, 1353,  207,  207,  207, 1029,  207,
      756, 1026,  207, 1027, 1030,  207,  207,  207, 1353,  755,
     1031, 1032,  207,  207,  207,  207,  207,  207, 1033, 1028,
      757,  207, 1034,  207, 1035, 1029,  207,  756,  207,  207,
      207, 1030,  759,  207,  207,  758,  207, 1031, 1032,  207,

      207,  207,  207,  207, 1353, 1033,  760,  757,  207, 1034,
      207, 1035,  207,  207, 1353,  207,  207,  207, 1036,  759,
     1353,  207,  758,  207, 1039,  207,  207,  207,  207,  207,
      764,  207, 1353,  760,  761,  207, 1353,  207, 1353,  207,
      207,  207, 1353,  207, 1040, 1036, 1353,  769,  207,  207,
     1353, 1039,  207,  207,  207,  207, 1353,  764,  207,  207,
     1041,  761,  207,  207,  767,  207, 1353,  207,  207,  762,
      207, 1040, 1042,  207,  769,  207,  207,  207, 1043, 1353,
     1044,  207, 1037,  207, 1045, 1038,  207, 1041,  763, 1046,
      207,  767,  207,  207, 1353, 1047,  762,  207, 1353, 1042,

      207,  768,  207, 1353,  207, 1043,  207, 1044,  207, 1037,
      207, 1045, 1038,  207, 1048,  763, 1046,  207,  207,  207,
      207,  765, 1047, 1049,  207,  771, 1050, 1051,  768,  207,
      207, 1353,  207,  207,  766,  207, 1052,  207, 1353, 1353,
      207, 1048,  207, 1353,  207,  207,  207,  770,  765, 1053,
     1049,  207,  771, 1050, 1051, 1054,  207,  207,  207,  207,
      207,  766,  772, 1052,  207,  207,  207, 1055,  207,  207,
      207, 1056, 1057,  207,  770, 1353, 1053, 1353,  207,  773,
     1353,  207, 1054, 1058, 1353,  207,  207,  207, 1353,  772,
     1353,  207,  207,  207, 1055,  207, 1059,  207, 1056, 1057,

      207, 1060,  207, 1353,  207,  207,  773,  775,  207,  774,
     1058,  207,  207,  207,  207,  777,  207,  207,  207,  207,
      207, 1061,  776, 1059,  207,  207, 1062,  207, 1060,  207,
      207,  207,  207, 1353,  775,  207,  774, 1353,  207,  207,
      207,  207,  777,  207,  207, 1353,  207,  207, 1061,  776,
     1353,  207,  207, 1062,  207, 1353,  207,  207, 1353,  207,
      207,  207,  207, 1353,  207,  207,  207,  207,  207,  778,
      781,  207,  207, 1063,  207,  780,  207,  207,  207,  779,
      207,  207,  207,  207,  207,  207,  782,  207,  207, 1353,
      207,  207,  207,  207, 1353,  207,  778,  781,  207,  207,

     1063,  207,  780,  207,  207,  207,  779,  207,  207,  207,
     1064,  207,  207,  782,  207, 1065,  207,  207,  784, 1066,
      207,  207,  783, 1067, 1068,  207,  207,  207, 1069,  207,
      207,  785, 1070, 1353,  207, 1353, 1353, 1064, 1353,  207,
     1353,  207, 1065,  207, 1071,  784, 1066,  207,  207,  783,
     1067, 1068,  207,  207,  207, 1069,  207,  207,  785, 1070,
      207,  207,  207,  207, 1072,  787,  207,  207,  786, 1353,
      207, 1071,  207,  788, 1073,  207,  207,  207, 1353, 1148,
      207, 1149, 1353,  207, 1353, 1353,  207,  207, 1150,  207,
      207, 1072,  787,  207,  207,  786,  207,  207, 1353,  207,

      788, 1073,  207,  207,  207,  790, 1148,  207, 1149,  207,
      207,  789,  207,  207,  791, 1150,  207, 1151, 1353,  207,
      207,  207, 1152,  207,  207,  207, 1353,  207, 1353,  207,
      207,  207,  790, 1353,  207,  792,  207,  795,  789,  207,
      793,  791,  794,  207, 1151,  207,  207,  207,  207, 1152,
      207,  207,  207,  207,  207,  797,  207,  207,  207, 1153,
      207,  207,  792, 1353,  795,  207, 1353,  793, 1353,  794,
     1154,  796,  207, 1353,  207,  207, 1155,  207, 1156,  207,
      207,  207,  797,  207, 1353,  207, 1153,  207,  207, 1353,
      798, 1157,  207,  207, 1353,  207, 1353, 1154,  796, 1158,

      799, 1159,  207, 1155, 1353, 1156,  207, 1160,  207,  207,
      207,  207,  207, 1161, 1353,  207,  207,  798, 1157, 1353,
      207,  207,  207,  207, 1353,  207, 1158,  799, 1159, 1162,
      207,  800, 1353, 1163, 1160,  207,  207, 1164,  207,  207,
     1161,  207,  207,  207,  207, 1165,  207,  802,  207,  207,
      207,  207,  207,  801,  207, 1166, 1162,  207,  800,  805,
     1163, 1167,  207,  207, 1164,  207,  207, 1168,  207,  207,
      207,  207, 1165,  207,  802,  207,  207,  207,  207,  803,
      801,  207, 1166,  804,  207, 1353,  805, 1353, 1167,  207,
      207, 1353,  207,  207, 1168,  207, 1169,  207, 1170,  806,

      207,  207,  207,  207,  207,  207,  803,  905,  207, 1171,
      804,  207,  207,  207,  207, 1353,  207, 1172,  906,  207,
      207, 1353,  207, 1169,  207, 1170,  806,  207,  207, 1173,
      207, 1353,  207,  207,  905,  207, 1171,  207,  207,  207,
      207,  207,  207,  207, 1172,  906,  207, 1174,  207, 1353,
      207,  207,  910,  907, 1175, 1176, 1173,  207,  908, 1177,
      207, 1353,  207,  207,  207,  207, 1178,  207,  911,  207,
      207, 1179,  207,  207, 1174,  207,  909,  207,  207,  910,
      907, 1175, 1176,  207,  207,  908, 1177, 1353,  207,  207,
      207, 1353, 1180, 1178,  207,  911, 1181,  913, 1179,  207,

      207,  207,  207,  909,  912,  207,  207,  207,  207,  207,
      207, 1353,  207,  920,  207,  207,  207,  207,  207, 1180,
     1353, 1182,  207, 1181,  913, 1353, 1183, 1353,  207,  207,
     1353,  912,  207,  207,  207,  207,  207, 1184,  914,  207,
      920,  207,  207,  207,  207,  207,  207,  207, 1182,  207,
      207,  207,  207, 1183,  207, 1353, 1185,  207, 1186,  207,
      207, 1187,  207, 1188, 1184,  914, 1189,  207,  915,  207,
      207, 1353,  207,  207,  207, 1353,  207,  207,  207,  207,
     1234,  207,  207, 1185,  207, 1186, 1236,  207, 1187,  207,
     1188, 1353,  207, 1189,  207,  915,  207,  207,  207,  207,

      207,  207,  917,  207,  916,  207,  207, 1234,  207,  207,
     1237,  207, 1238, 1236,  918, 1239,  207, 1240,  207,  207,
      207,  207, 1353,  207,  207,  207, 1353,  207,  207,  917,
      207,  916,  207,  207, 1353,  207, 1241, 1237,  207, 1238,
      207,  918, 1239,  207, 1240,  207,  207,  207,  207,  921,
      207,  207, 1353,  207, 1242, 1243,  207,  207,  923,  207,
      207,  919, 1244, 1241,  207,  207,  207,  207,  207,  207,
      207, 1245, 1246,  207,  207, 1353,  921,  207, 1247,  922,
      207, 1242, 1243,  207,  207,  923,  207,  207,  919, 1244,
      207,  207,  207,  207,  207,  207,  207,  207, 1245, 1246,

      207,  207,  207,  924,  207, 1247,  922, 1353, 1353,  207,
      207,  207, 1353,  207,  207,  207,  207,  207,  207, 1353,
      207,  207,  925,  207,  926,  207, 1353,  207,  207,  207,
      924,  207,  207, 1248,  207,  927,  207,  207,  928,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  925,
      207,  926,  207,  207, 1353,  207, 1353, 1353,  207,  207,
     1248,  207,  927,  929, 1249,  928,  207, 1250, 1251, 1252,
     1353,  207,  207,  207,  207,  207,  931,  207,  207,  207,
      207,  930, 1253,  207,  207,  207, 1254,  207,  207, 1353,
      929, 1249, 1278, 1353, 1250, 1251, 1252,  207, 1280,  207,

      207,  207,  207,  931,  207,  207,  207,  207,  930, 1253,
      207,  207,  207, 1254,  207,  207,  207, 1353,  207, 1278,
     1235, 1235, 1353,  207,  207, 1280, 1353,  207,  207,  207,
     1281, 1282, 1353, 1283,  207, 1284, 1353, 1285, 1353,  207,
      207, 1286,  207,  207,  932,  207, 1287,  207, 1353,  207,
      207,  207,  207,  933, 1288,  207,  207, 1281, 1282, 1279,
     1283,  207, 1284,  207, 1285,  207, 1353,  207, 1286,  207,
      207,  932,  934, 1287,  207,  207,  207, 1289,  207,  207,
      933, 1288, 1305,  207, 1353,  936, 1279, 1353,  207, 1306,
      207, 1307,  207,  207, 1353,  207,  207,  207,  207,  934,

      207,  935,  207,  207, 1289,  207,  937, 1308,  207, 1305,
     1353,  938,  936, 1257, 1235,  207, 1306,  207, 1307,  207,
      207,  207,  207,  207,  207,  207, 1311,  207,  935,  207,
      207,  207,  207,  937, 1308,  207, 1353,  207,  938,  207,
     1353,  207,  207,  207,  207, 1317,  207,  207,  207,  207,
     1318,  207, 1292, 1311,  939, 1321,  207,  207,  207,  207,
     1353,  941, 1353,  207,  207,  207,  207,  207,  207,  207,
      207, 1324, 1317,  940,  207,  207,  207, 1318, 1353, 1292,
     1353,  939, 1321,  207,  207,  207,  207,  207,  941,  207,
      207,  207,  207,  207,  207, 1326,  207,  207, 1324,  207,

      940, 1353,  207, 1328, 1304, 1304, 1353,  207, 1353,  207,
      207,  942,  207, 1330,  207,  207,  207,  207,  207,  207,
      207,  207, 1326, 1332,  207,  207,  207,  207,  943,  207,
     1328, 1353, 1334,  207,  207,  207,  207,  207,  942,  207,
     1330, 1336,  207, 1338,  207, 1353,  207, 1316,  207,  207,
     1332,  207,  207,  944,  207,  943,  207, 1340,  207, 1334,
      207, 1342,  207,  207,  207,  207,  207,  207, 1336, 1344,
     1338, 1353,  207, 1353, 1316, 1353,  207,  207,  207,  207,
      944,  207, 1346,  946, 1340,  207,  945,  207, 1342, 1353,
      207,  207,  207,  207,  207, 1353, 1344, 1310, 1304,  207,

      207, 1353,  207,  207,  207, 1353,  207,  207,  207, 1346,
      946,  207,  948,  945,  207,  207, 1353, 1353,  207, 1353,
      207,  207, 1353, 1353,  947, 1353, 1353,  207, 1353,  207,
      207,  207, 1353, 1353,  207, 1353, 1353, 1353,  207,  948,
     1320, 1353,  207,  207, 1353,  207, 1353, 1353,  207,  949,
      207,  947, 1353, 1353,  207,  207,  207,  207,  207,  207,
      950,  207, 1353, 1353,  207, 1353,  207, 1320, 1353,  207,
      207, 1353,  207,  953, 1353,  207,  949,  207, 1353, 1353,
      207,  207,  207,  207,  207,  207,  207,  950,  207, 1353,
     1353,  207, 1353,  207,  951, 1353,  207, 1353, 1353,  207,

      953,  207,  207, 1353, 1353,  952,  207,  207,  207, 1353,
      207,  207,  207, 1353, 1353,  207, 1353,  207, 1353,  207,
      207,  951, 1353, 1353,  207, 1353,  207, 1353,  207,  207,
     1353, 1353,  952,  207, 1353,  207, 1353,  207,  207, 1353,
     1353,  207,  207,  207,  207, 1353,  207,  207,  207, 1353,
      207,  207,  207,  207, 1353, 1353,  207,  207,  954,  207,
     1353,  207,  207, 1353, 1353, 1353,  207, 1353,  207, 1353,
      207,  207, 1353, 1353, 1353,  207, 1353,  207, 1353,  207,
      207, 1353, 1353, 1353,  207,  954,  207, 1353,  207,  207,
      955,  956,  207,  207, 1353,  207,  207,  207,  207, 1353,

      207,  207,  207, 1353, 1353,  957,  207, 1353, 1353,  207,
     1353,  207, 1353, 1353, 1353,  207,  207,  955,  956,  207,
     1353, 1353,  207,  207,  207,  207, 1353,  207,  207,  207,
     1353, 1353,  957,  207, 1353, 1353,  207,  207,  207,  207,
     1353, 1353,  207,  207,  958,  959, 1353,  960,  207,  207,
      207,  207,  207,  207,  961,  207, 1353, 1353,  207, 1353,
      207, 1353, 1353,  207,  207, 1353,  207, 1353, 1353,  207,
     1353,  958,  959,  962,  960,  207,  207,  207,  207,  207,
      207,  961,  207, 1353,  207,  207, 1353,  207,  207,  207,
      207,  963, 1353,  207,  207, 1353,  207,  207, 1353, 1353,

      962, 1353, 1353,  207,  207, 1353,  207, 1353, 1353, 1353,
     1353,  207, 1353,  207, 1353,  207,  207, 1353,  963,  964,
      207,  207,  207,  207,  207, 1353,  207, 1353, 1353,  207,
      207,  207,  207, 1353,  207,  965, 1353, 1353,  207,  207,
      207, 1353,  207, 1353,  207, 1353,  964,  966,  207,  207,
      207, 1353,  207,  207,  207, 1353,  207, 1353,  207,  207,
     1353,  207,  965,  207, 1353,  207,  207,  968,  207,  207,
     1353,  207,  207,  207,  966,  207,  207, 1353, 1353,  207,
      967,  207,  207,  207, 1353,  207, 1353, 1353, 1353, 1353,
      207, 1353,  207, 1353,  968,  207, 1353, 1353,  207,  207,

      207,  969,  207,  207, 1353,  207, 1353,  967,  207,  207,
      207,  207,  970, 1353, 1353, 1353,  207, 1353,  207,  207,
      207,  207, 1353, 1353, 1353,  207,  207, 1353,  969,  207,
     1353, 1353,  207, 1353, 1353,  207,  207, 1353,  207,  970,
     1353, 1353,  971,  207, 1353,  207,  207,  207,  207, 1353,
      207,  972, 1353,  207,  207,  207,  207, 1353,  207, 1353,
     1353,  207, 1353,  207,  207, 1353,  207, 1353, 1353,  971,
     1353,  207, 1353,  207,  207, 1353,  207,  207,  972, 1353,
      207,  207,  207,  207,  973,  207,  207, 1353,  207, 1353,
     1353,  207, 1353,  207, 1353,  207,  207, 1353,  207,  207,

     1353,  207, 1353,  207, 1353,  207, 1353,  207,  974, 1353,
      207,  973, 1353,  207,  207,  207, 1353, 1353, 1353, 1353,
      207,  976,  207,  207,  207,  975,  207, 1353,  207,  207,
      207, 1353,  207,  207,  207,  974, 1353,  207,  207,  207,
      978,  207,  207, 1353,  207,  207, 1353,  207,  976,  207,
      207,  207,  975, 1353,  207,  207,  207,  207,  207,  979,
      207,  207,  977, 1353,  207,  207,  207,  978,  207, 1353,
      207,  207,  207, 1353,  207,  207,  207,  207,  980, 1353,
      207,  207,  207,  207, 1353,  207,  979,  207,  207,  977,
     1353,  207,  981,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,  207,  207,  980,  207,  207,  982,  207,
      207, 1353,  207, 1353,  207,  207,  207, 1353,  207,  981,
      207,  207, 1353,  207, 1353,  207,  207,  207,  207, 1353,
      207,  207,  207,  207,  984,  982,  983,  207,  207,  207,
     1353,  207,  207,  207,  207,  207,  207,  985, 1353, 1353,
      207, 1353,  207, 1353,  207,  207,  207,  207, 1353,  207,
     1353,  984, 1353,  983,  207,  207,  207, 1353,  207,  207,
     1353,  207,  207,  207,  985, 1353,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  986, 1353, 1353, 1353,  207,
      207,  207,  207,  207,  995, 1353,  987, 1353,  207,  207,

     1353,  207, 1353,  207,  207,  207, 1353,  207,  207,  207,
      207, 1353,  986,  988,  207,  207,  207,  207,  207,  207,
      207,  995,  207,  987,  207,  207, 1353, 1353,  207,  207,
     1353,  207, 1353, 1353,  207,  207,  207,  207,  207, 1353,
      988,  207,  207,  207, 1353,  989, 1353,  207,  207,  207,
      207,  207,  990, 1353, 1353, 1353,  207,  207, 1353, 1353,
     1353,  207,  207,  207,  207,  207,  207,  992, 1353, 1353,
      207,  207,  989,  991, 1353,  207,  207,  207,  207,  990,
      207, 1353, 1353, 1353,  207,  207, 1353, 1353, 1353,  207,
      207,  207, 1353,  207,  992, 1353, 1353, 1353,  207, 1353,

      991,  994,  207,  207,  207,  207,  207,  207,  207,  207,
      993, 1353,  207,  207,  207, 1353, 1353,  207,  207, 1353,
     1353, 1353,  207, 1353, 1353,  996,  207, 1353,  994,  207,
     1353,  207,  207,  207,  207,  207,  207,  993,  207, 1353,
      207,  207,  207, 1353,  997,  207,  207,  207, 1353,  207,
      207,  207,  996,  207,  207, 1353,  207,  207, 1353,  207,
      207,  207, 1353,  998,  207,  207,  207,  207, 1353,  207,
      207,  997,  999,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207, 1353,  207, 1353, 1353,
      998,  207,  207,  207,  207,  207, 1353,  207,  207,  999,

      207, 1353,  207,  207, 1353, 1000,  207,  207, 1353,  207,
      207,  207,  207,  207,  207, 1353,  207, 1353,  207,  207,
     1353,  207,  207,  207, 1353,  207,  207,  207, 1353, 1353,
     1353, 1353, 1000, 1353, 1353, 1353, 1353,  207,  207, 1353,
      207,  207,  207,  207,  207,  207, 1353, 1353,  207,  207,
      207, 1353, 1353,  207,  207,  207, 1075,  207, 1353, 1353,
     1076, 1353,  207, 1353,  207, 1353, 1353,  207,  207,  207,
      207,  207,  207, 1353, 1353, 1353,  207, 1353,  207, 1353,
      207,  207,  207, 1075,  207, 1353, 1077, 1076,  207,  207,
      207,  207, 1353, 1353,  207,  207,  207,  207, 1353,  207,

     1353, 1353, 1353, 1353,  207,  207,  207,  207,  207, 1353,
     1353, 1353, 1079, 1077,  207,  207,  207,  207, 1353, 1078,
      207, 1353, 1353,  207,  207, 1353,  207, 1080,  207, 1353,
     1353,  207,  207,  207, 1353,  207,  207, 1353,  207, 1079,
     1353,  207, 1353,  207, 1353, 1353, 1078,  207,  207, 1353,
     1081,  207,  207,  207, 1080,  207,  207, 1353, 1353,  207,
     1353, 1353,  207,  207,  207,  207, 1082, 1353, 1353, 1353,
     1353,  207,  207, 1353, 1353,  207,  207, 1081,  207,  207,
      207, 1353, 1353,  207,  207,  207, 1083, 1353,  207,  207,
      207,  207, 1353, 1082, 1084, 1353, 1085, 1353,  207,  207,

      207, 1353, 1353,  207,  207,  207,  207,  207, 1353, 1353,
      207,  207,  207, 1083,  207,  207,  207,  207, 1353, 1353,
      207, 1084,  207, 1085, 1086, 1353, 1353,  207,  207,  207,
      207,  207, 1087,  207,  207, 1353, 1353,  207,  207, 1353,
      207,  207, 1353,  207,  207, 1353, 1353,  207,  207,  207,
     1088, 1086, 1353, 1353, 1089,  207,  207,  207,  207, 1087,
      207,  207,  207, 1353, 1353,  207, 1091,  207,  207, 1353,
      207,  207, 1090, 1353,  207,  207,  207, 1088,  207,  207,
     1353, 1089, 1353, 1353,  207,  207,  207,  207,  207,  207,
      207, 1353,  207, 1091, 1092,  207, 1353,  207,  207, 1090,

      207,  207, 1353,  207, 1353,  207,  207, 1353,  207, 1353,
      207,  207, 1095,  207,  207,  207,  207,  207,  207,  207,
     1353, 1092,  207, 1353,  207,  207,  207,  207, 1094, 1093,
     1353, 1353,  207,  207,  207,  207, 1353,  207,  207, 1095,
     1353,  207, 1096,  207, 1353,  207,  207, 1353, 1353,  207,
     1353,  207,  207,  207, 1353, 1094, 1093, 1353, 1353,  207,
      207,  207,  207, 1353,  207,  207,  207,  207, 1100, 1096,
      207,  207, 1353,  207,  207, 1353,  207,  207,  207,  207,
      207, 1097, 1098, 1353,  207, 1099,  207,  207, 1353,  207,
      207,  207, 1353,  207,  207, 1100, 1353,  207,  207, 1353,

     1353,  207, 1353,  207,  207,  207, 1353,  207, 1097, 1098,
     1353,  207, 1099,  207,  207,  207, 1101,  207,  207,  207,
      207, 1353,  207, 1353,  207,  207, 1353, 1353,  207, 1353,
      207, 1353, 1353, 1353, 1353,  207, 1353, 1353,  207, 1353,
      207, 1353,  207, 1101, 1353,  207,  207,  207, 1353,  207,
      207,  207,  207, 1353,  207,  207, 1353,  207, 1353,  207,
      207, 1353,  207,  207, 1104,  207,  207,  207, 1102,  207,
      207,  207, 1353,  207, 1103,  207,  207,  207, 1353,  207,
     1105,  207, 1353, 1353, 1353,  207,  207,  207, 1353, 1353,
      207, 1104, 1353,  207, 1353, 1102,  207,  207,  207, 1353,

      207, 1103,  207,  207, 1106, 1353,  207, 1105,  207,  207,
      207,  207,  207, 1353, 1353,  207,  207,  207, 1353,  207,
      207,  207, 1353, 1353,  207, 1353, 1353, 1353, 1353,  207,
     1353, 1106, 1353, 1353, 1353,  207,  207,  207,  207, 1353,
     1353, 1353,  207,  207,  207, 1353,  207,  207,  207, 1353,
      207,  207,  207,  207, 1353,  207,  207,  207, 1107,  207,
      207,  207,  207, 1353, 1353,  207,  207, 1353, 1353, 1353,
     1353,  207, 1353, 1353, 1353, 1353, 1353,  207, 1353,  207,
      207, 1353,  207, 1353,  207, 1107,  207,  207,  207,  207,
     1353, 1353,  207,  207,  207, 1109,  207, 1353,  207,  207,

     1353,  207, 1108, 1353, 1353,  207,  207,  207, 1353,  207,
     1353, 1353, 1353, 1353, 1110,  207, 1353, 1111, 1112,  207,
      207,  207, 1109,  207, 1353,  207,  207, 1353,  207, 1108,
      207, 1353,  207,  207,  207, 1353,  207, 1353, 1353, 1353,
     1353, 1110,  207, 1353, 1111, 1112,  207,  207,  207,  207,
      207,  207,  207, 1353, 1113,  207,  207,  207, 1353, 1353,
      207,  207,  207, 1353,  207, 1353, 1353, 1353, 1353,  207,
     1353, 1353, 1353, 1353,  207,  207,  207,  207,  207, 1353,
     1353, 1113,  207,  207, 1353, 1353, 1353,  207,  207,  207,
      207,  207,  207,  207, 1114,  207,  207,  207,  207, 1353,

      207,  207,  207, 1353,  207,  207,  207, 1353,  207, 1353,
     1353, 1353, 1353, 1115,  207, 1353, 1353,  207,  207,  207,
      207, 1114,  207, 1353,  207,  207, 1116,  207, 1353,  207,
     1353,  207,  207,  207, 1353,  207, 1353,  207, 1353,  207,
     1115,  207, 1353, 1353,  207,  207, 1353, 1353,  207,  207,
      207, 1353, 1353, 1116, 1353,  207, 1117, 1118, 1353, 1353,
      207,  207, 1353,  207,  207, 1353,  207, 1353,  207, 1353,
     1353,  207, 1353,  207, 1353,  207,  207,  207, 1353, 1353,
     1353, 1353,  207, 1117, 1118, 1353, 1353,  207,  207,  207,
      207,  207,  207, 1353,  207,  207,  207, 1119, 1353,  207,

      207,  207, 1120,  207,  207,  207,  207, 1353, 1353, 1353,
      207, 1353,  207, 1353, 1353,  207,  207, 1353,  207,  207,
     1353,  207,  207,  207, 1119, 1353,  207, 1353,  207, 1120,
      207,  207,  207,  207, 1353, 1353,  207,  207, 1353,  207,
      207, 1353,  207, 1122,  207, 1353,  207, 1353,  207,  207,
     1353, 1121, 1353, 1353,  207, 1353,  207, 1353, 1353, 1353,
     1353, 1353, 1353,  207,  207, 1353, 1353,  207, 1353, 1353,
     1122,  207,  207,  207, 1353,  207,  207, 1353, 1121, 1353,
      207,  207,  207,  207,  207, 1123, 1353, 1353, 1353, 1353,
      207,  207,  207, 1124,  207, 1353, 1353, 1353,  207,  207,

      207, 1353, 1353,  207,  207, 1353, 1125,  207, 1353,  207,
      207,  207, 1123, 1353,  207, 1353,  207,  207,  207,  207,
     1124,  207, 1126, 1353, 1353,  207,  207,  207,  207, 1353,
      207,  207, 1353, 1125,  207, 1353, 1353,  207,  207, 1353,
      207,  207, 1353,  207, 1127,  207, 1353, 1353,  207, 1126,
      207, 1353,  207,  207, 1353,  207, 1128,  207,  207, 1353,
      207,  207,  207, 1353,  207,  207,  207,  207,  207, 1353,
      207, 1127,  207, 1129,  207,  207, 1353,  207,  207,  207,
      207, 1353,  207, 1128,  207,  207,  207,  207,  207,  207,
     1131,  207,  207,  207,  207,  207,  207,  207,  207,  207,

     1129,  207, 1353, 1130, 1353,  207,  207,  207,  207,  207,
     1353,  207, 1353,  207, 1133,  207, 1353, 1131,  207,  207,
     1353,  207,  207,  207, 1353,  207, 1132,  207,  207, 1353,
     1130,  207,  207,  207,  207,  207, 1353,  207,  207, 1134,
     1353, 1133, 1353, 1353,  207,  207, 1353,  207, 1353,  207,
      207, 1353,  207, 1132,  207,  207, 1135,  207,  207,  207,
     1353,  207,  207, 1353,  207,  207, 1134, 1353,  207, 1353,
      207,  207, 1353, 1353,  207,  207, 1136,  207, 1353,  207,
      207, 1137, 1353, 1135,  207, 1353, 1353, 1138, 1353,  207,
     1353, 1353,  207, 1353,  207,  207, 1353,  207,  207,  207,

      207, 1353,  207, 1136,  207,  207, 1353,  207, 1137, 1353,
      207,  207, 1353, 1139, 1138, 1353, 1353, 1353,  207,  207,
     1353,  207,  207,  207,  207,  207,  207,  207, 1353,  207,
     1353,  207,  207, 1353,  207, 1353, 1353,  207,  207, 1353,
     1139, 1353, 1140, 1141,  207,  207,  207, 1353,  207,  207,
      207,  207,  207, 1353,  207, 1353,  207, 1353, 1353, 1353,
     1353,  207,  207, 1353,  207, 1353, 1353, 1353, 1142, 1140,
     1141,  207,  207,  207, 1353,  207,  207, 1353,  207,  207,
      207,  207, 1353, 1353, 1353,  207,  207,  207,  207,  207,
     1353,  207, 1143, 1144, 1353, 1142,  207,  207, 1353,  207,

     1353, 1353, 1353,  207,  207,  207,  207,  207, 1353, 1353,
     1353,  207,  207,  207,  207,  207,  207, 1353, 1353, 1143,
     1144, 1353, 1353,  207,  207, 1353, 1146, 1353,  207, 1353,
      207,  207, 1353,  207, 1145,  207, 1353,  207,  207,  207,
      207, 1353, 1353,  207,  207, 1353, 1353, 1353, 1353,  207,
     1353, 1353, 1353, 1146, 1353,  207,  207,  207,  207, 1353,
     1353, 1145,  207,  207,  207, 1353,  207,  207,  207, 1191,
      207,  207,  207,  207,  207, 1353,  207,  207,  207,  207,
     1353, 1353,  207,  207,  207,  207,  207, 1353, 1192,  207,
      207, 1353, 1353,  207,  207,  207, 1191,  207,  207,  207,

      207,  207, 1353, 1353,  207,  207,  207, 1353, 1353,  207,
      207,  207,  207,  207, 1353, 1192,  207,  207, 1353, 1353,
      207,  207,  207, 1194,  207,  207, 1193,  207, 1353, 1353,
     1353,  207, 1353,  207, 1353, 1353,  207,  207, 1353,  207,
     1353, 1353,  207,  207,  207, 1353,  207, 1353, 1353,  207,
     1194,  207,  207, 1193,  207, 1353, 1353, 1195,  207,  207,
      207,  207,  207,  207, 1353,  207, 1196,  207, 1353,  207,
      207,  207,  207,  207, 1353, 1353, 1353,  207, 1197,  207,
      207, 1353, 1353, 1353, 1195,  207,  207, 1353,  207,  207,
      207, 1353,  207, 1196,  207, 1353, 1353, 1353,  207,  207,

     1353,  207, 1353,  207,  207, 1197, 1353,  207,  207, 1353,
     1353, 1353,  207,  207,  207, 1353,  207,  207, 1353, 1353,
     1353,  207, 1198, 1353, 1353, 1353,  207, 1353,  207, 1353,
      207, 1353,  207, 1199,  207,  207, 1200, 1353, 1353,  207,
      207,  207, 1353,  207,  207,  207, 1353,  207,  207, 1198,
     1353, 1353,  207,  207, 1353, 1353, 1353,  207, 1353,  207,
     1199,  207, 1353, 1200, 1353, 1353,  207, 1353, 1201, 1353,
      207,  207,  207, 1353,  207,  207, 1353, 1353, 1353,  207,
      207,  207, 1353,  207,  207, 1353, 1353, 1353,  207, 1202,
     1353, 1353,  207,  207,  207, 1201, 1353,  207, 1353,  207,

     1353, 1203,  207, 1353,  207, 1353, 1353,  207,  207, 1353,
      207,  207, 1353,  207, 1353,  207, 1202, 1353,  207,  207,
      207,  207,  207,  207,  207, 1353,  207, 1353, 1203,  207,
     1353,  207, 1204, 1353,  207,  207, 1353,  207,  207, 1353,
      207,  207,  207,  207, 1353,  207, 1353,  207,  207,  207,
      207,  207, 1353,  207, 1353, 1353,  207, 1353, 1353, 1204,
     1353,  207,  207, 1353,  207,  207, 1353,  207,  207,  207,
      207,  207,  207,  207,  207,  207, 1353,  207,  207, 1353,
      207, 1205, 1353,  207, 1353,  207,  207, 1353, 1353, 1353,
      207,  207,  207, 1353,  207,  207,  207, 1206,  207,  207,

      207,  207,  207, 1353,  207,  207,  207,  207, 1205, 1353,
      207, 1353,  207,  207, 1353, 1353, 1353,  207,  207,  207,
     1353,  207,  207,  207, 1206, 1353,  207, 1207,  207,  207,
     1353,  207,  207,  207,  207,  207, 1208,  207, 1353,  207,
      207,  207,  207, 1353,  207,  207,  207,  207,  207, 1353,
      207, 1353,  207,  207, 1207,  207, 1353,  207,  207,  207,
      207, 1353,  207, 1208,  207, 1353,  207,  207,  207,  207,
     1353,  207,  207, 1353,  207, 1353,  207,  207, 1353,  207,
      207,  207,  207, 1353,  207,  207,  207,  207, 1353,  207,
     1353,  207, 1353,  207, 1353, 1353,  207, 1353, 1353,  207,

     1353,  207, 1353,  207, 1353, 1353, 1353,  207,  207,  207,
     1353,  207,  207,  207, 1353,  207,  207, 1353,  207, 1353,
      207,  207, 1353,  207, 1209, 1210,  207, 1353,  207,  207,
     1353,  207, 1353, 1211, 1353,  207,  207,  207,  207,  207,
     1353,  207,  207,  207, 1353,  207, 1353,  207,  207,  207,
     1353, 1209, 1210, 1353, 1353, 1353,  207,  207,  207,  207,
     1211,  207,  207, 1353,  207,  207,  207, 1353,  207, 1353,
      207,  207,  207,  207,  207,  207,  207, 1353, 1353, 1353,
     1212,  207, 1353, 1353,  207,  207,  207,  207,  207,  207,
     1353, 1353,  207, 1353,  207, 1353, 1353, 1353,  207,  207,

      207, 1353,  207, 1213, 1353,  207, 1214, 1212,  207, 1353,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
     1353,  207, 1353,  207,  207, 1353,  207, 1353, 1353,  207,
     1213, 1353,  207, 1214, 1353, 1353, 1353,  207,  207, 1353,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207, 1353,  207,  207, 1215,  207,  207, 1353,  207,
     1353, 1216, 1353, 1353, 1353, 1353, 1353,  207,  207,  207,
      207, 1353, 1353, 1217,  207,  207,  207,  207, 1353,  207,
      207,  207, 1215, 1218,  207, 1353,  207,  207, 1216,  207,
     1353,  207, 1353,  207,  207,  207,  207, 1353, 1353, 1353,

     1217,  207, 1353,  207,  207,  207,  207, 1353, 1353,  207,
     1218, 1219, 1353, 1353,  207,  207,  207, 1220,  207,  207,
      207, 1353,  207,  207, 1353,  207, 1353, 1353,  207,  207,
      207, 1221,  207,  207, 1353, 1353,  207,  207, 1219,  207,
     1353, 1353,  207,  207, 1220, 1353,  207,  207, 1353,  207,
      207, 1353,  207,  207, 1222,  207,  207,  207, 1221,  207,
      207,  207, 1223,  207,  207, 1353,  207,  207,  207, 1353,
      207, 1353, 1353,  207,  207, 1353,  207, 1353, 1353, 1353,
      207, 1222,  207, 1353,  207,  207,  207, 1224,  207, 1223,
      207,  207,  207,  207,  207,  207, 1353,  207,  207, 1225,

      207,  207, 1353,  207, 1353, 1353,  207, 1353, 1353, 1353,
     1353,  207,  207, 1353, 1224,  207, 1353,  207,  207,  207,
      207, 1353,  207, 1226,  207,  207, 1225,  207,  207, 1353,
      207, 1353, 1353,  207,  207, 1256,  207, 1353,  207,  207,
     1353,  207,  207, 1353,  207,  207,  207, 1227, 1228,  207,
     1226, 1353, 1353, 1353,  207,  207, 1353,  207,  207,  207,
      207,  207, 1256,  207,  207,  207,  207, 1353,  207,  207,
      207, 1353,  207,  207, 1227, 1228, 1353, 1353, 1353, 1353,
     1353,  207,  207,  207,  207,  207,  207,  207,  207, 1229,
     1353,  207,  207,  207, 1230, 1353,  207,  207, 1353,  207,

     1353,  207,  207, 1353,  207,  207,  207,  207,  207,  207,
      207,  207,  207, 1353,  207,  207, 1229,  207, 1353, 1353,
      207, 1230, 1353,  207, 1353,  207,  207, 1353,  207,  207,
      207,  207,  207,  207,  207,  207,  207, 1353,  207,  207,
     1353,  207, 1353, 1353,  207, 1353,  207, 1353,  207,  207,
      207,  207,  207,  207, 1353, 1231,  207,  207,  207, 1353,
     1353,  207,  207, 1353, 1353,  207, 1353,  207, 1353, 1353,
     1353, 1353,  207,  207, 1353,  207,  207,  207,  207, 1232,
      207,  207, 1231,  207, 1353,  207,  207, 1353,  207, 1353,
     1353,  207,  207,  207,  207,  207, 1353, 1353, 1353,  207,

      207, 1353, 1353, 1353,  207,  207, 1232,  207,  207,  207,
     1353, 1353, 1353,  207,  207, 1353, 1353, 1353,  207,  207,
      207,  207,  207,  207, 1353, 1353, 1353,  207,  207, 1353,
     1353, 1353,  207,  207,  207,  207,  207,  207, 1353,  207,
     1353,  207,  207,  207, 1353, 1353,  207,  207,  207,  207,
      207, 1257, 1235,  207, 1353,  207, 1353,  207, 1353,  207,
      207, 1353,  207,  207,  207, 1353,  207, 1353, 1258,  207,
      207, 1353,  207,  207,  207, 1353,  207,  207,  207, 1353,
      207,  207, 1353, 1353,  207, 1353,  207,  207,  207, 1353,
      207, 1353, 1353, 1353, 1353, 1258, 1353,  207, 1259,  207,

      207, 1353,  207,  207,  207,  207,  207,  207,  207, 1353,
     1353, 1353,  207,  207,  207,  207,  207, 1260, 1353, 1353,
      207,  207,  207,  207,  207, 1259,  207,  207, 1353,  207,
      207,  207, 1353,  207,  207,  207,  207,  207, 1353,  207,
      207,  207, 1353,  207, 1260, 1353, 1261,  207,  207,  207,
      207,  207, 1353,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207, 1353,
     1353, 1353, 1353, 1261, 1353,  207,  207,  207,  207, 1353,
     1353, 1353,  207,  207,  207, 1353,  207,  207,  207,  207,
     1353, 1262,  207,  207,  207, 1353,  207, 1353,  207, 1353,

      207,  207,  207,  207,  207,  207, 1353, 1353, 1263, 1353,
      207, 1353, 1353, 1353, 1353, 1353,  207,  207, 1262,  207,
     1353, 1353, 1353,  207,  207,  207, 1353,  207,  207,  207,
     1353, 1264,  207,  207, 1353, 1263, 1353,  207,  207, 1353,
      207, 1353,  207,  207,  207, 1353,  207,  207, 1353, 1353,
     1353,  207,  207, 1266, 1353, 1353,  207,  207, 1264,  207,
      207,  207, 1353,  207, 1353,  207,  207,  207, 1353,  207,
      207,  207, 1353,  207,  207,  207, 1353,  207, 1353,  207,
     1266, 1265,  207, 1353,  207,  207,  207,  207,  207,  207,
      207, 1353, 1353,  207,  207, 1267, 1268, 1353,  207, 1353,

      207,  207,  207, 1353,  207,  207,  207, 1353, 1265,  207,
     1353, 1353,  207,  207,  207,  207,  207,  207, 1353,  207,
      207,  207, 1267, 1268,  207,  207, 1353, 1353,  207,  207,
     1353, 1353,  207,  207, 1353, 1353, 1353, 1353, 1353, 1353,
      207,  207,  207,  207,  207, 1353,  207,  207,  207, 1269,
     1353,  207,  207,  207, 1270,  207,  207,  207, 1353,  207,
     1353,  207,  207, 1353, 1353, 1353,  207,  207,  207, 1353,
      207,  207, 1353, 1353, 1353,  207, 1269, 1353, 1353, 1353,
      207, 1270,  207,  207,  207,  207,  207, 1353,  207,  207,
      207, 1353, 1353,  207,  207,  207, 1353,  207,  207,  207,

     1353,  207, 1353,  207,  207, 1271, 1353, 1353,  207,  207,
      207, 1353,  207,  207, 1353, 1353, 1353,  207, 1353, 1353,
     1353, 1353,  207, 1353,  207, 1353,  207,  207,  207,  207,
      207,  207, 1271, 1272,  207,  207,  207, 1353, 1353,  207,
      207,  207, 1273,  207, 1353, 1275, 1353, 1353,  207,  207,
      207, 1353,  207,  207,  207,  207,  207,  207, 1274, 1353,
     1272,  207,  207, 1276, 1353,  207,  207,  207,  207, 1273,
      207, 1353, 1275,  207, 1353,  207,  207,  207, 1353,  207,
      207, 1353,  207,  207,  207, 1274, 1353,  207, 1353,  207,
     1276,  207,  207, 1353,  207,  207, 1353,  207, 1353,  207,

      207, 1353, 1353, 1353, 1353,  207, 1353,  207, 1353,  207,
      207, 1353, 1353,  207,  207,  207, 1353,  207,  207,  207,
     1353,  207,  207, 1353,  207, 1353,  207,  207, 1353,  207,
     1291, 1353,  207, 1353,  207,  207,  207,  207, 1353,  207,
      207, 1353,  207,  207,  207,  207,  207,  207,  207, 1353,
     1293, 1353, 1353,  207,  207,  207,  207, 1291, 1353, 1353,
     1353,  207,  207,  207,  207,  207,  207, 1353, 1353,  207,
      207,  207,  207,  207,  207, 1353, 1353, 1293, 1353,  207,
      207,  207,  207,  207, 1295, 1294, 1353,  207,  207,  207,
      207, 1353,  207,  207, 1353,  207,  207,  207,  207,  207,

      207,  207, 1353,  207, 1353,  207,  207,  207,  207, 1353,
      207, 1295, 1294, 1353,  207,  207,  207,  207, 1353, 1353,
      207, 1353,  207,  207,  207, 1353,  207,  207,  207, 1353,
      207, 1353,  207,  207,  207, 1353, 1296, 1353, 1353,  207,
     1298, 1297,  207,  207,  207,  207,  207,  207, 1353, 1353,
      207,  207,  207, 1353,  207, 1353, 1353,  207, 1353, 1353,
      207, 1353, 1353, 1296, 1353, 1353,  207, 1298, 1297,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
     1353,  207,  207,  207,  207,  207, 1353,  207, 1353, 1353,
      207, 1353, 1353, 1353, 1353,  207,  207, 1353,  207, 1353,

     1353,  207,  207,  207,  207,  207, 1353, 1353,  207,  207,
      207,  207,  207, 1353,  207,  207, 1353,  207, 1353,  207,
      207, 1299,  207,  207, 1301,  207, 1300,  207,  207, 1353,
      207, 1353,  207,  207, 1353,  207, 1353, 1353,  207, 1353,
      207, 1353,  207,  207, 1302,  207,  207,  207, 1299,  207,
      207, 1301,  207, 1300,  207,  207, 1353,  207, 1310, 1304,
      207, 1353,  207, 1353, 1353,  207, 1353,  207, 1353, 1312,
      207, 1302,  207,  207, 1353, 1353,  207, 1353, 1353,  207,
     1353,  207,  207,  207,  207,  207, 1353,  207,  207,  207,
     1353,  207,  207,  207,  207,  207, 1312,  207, 1353, 1353,

      207,  207, 1313,  207,  207, 1353,  207,  207,  207, 1353,
      207,  207,  207, 1353,  207,  207,  207, 1353,  207, 1353,
      207,  207,  207, 1353,  207,  207, 1353,  207,  207, 1313,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207, 1353,  207, 1353,  207,  207, 1353,  207, 1353,
     1353,  207,  207, 1353,  207, 1353, 1353, 1353, 1353,  207,
      207, 1353,  207,  207,  207,  207,  207,  207,  207, 1353,
      207, 1353,  207,  207, 1353,  207,  207,  207,  207,  207,
      207,  207, 1353,  207, 1353, 1353, 1314,  207, 1353,  207,
     1353,  207, 1353, 1353, 1353,  207,  207,  207, 1353,  207,

     1353,  207, 1353,  207,  207, 1353,  207,  207,  207, 1353,
      207,  207, 1353, 1314,  207, 1353,  207, 1353,  207, 1353,
     1353, 1353,  207,  207,  207,  207,  207, 1322,  207,  207,
     1353,  207,  207, 1353, 1353, 1353,  207,  207,  207, 1353,
     1353,  207, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353,  207, 1353, 1322, 1353,  207, 1353,  207,  207,
     1353, 1353, 1353,  207,  207, 1353, 1353, 1353,  207,   46,
       46,   46,   46,   46,   88, 1353, 1353,   88,   88,  189,
      189,  189, 1353,  189,  191, 1353,  191,  191,  191,  194,
     1353,  194,  194,  194,  207, 1353,  207,  207,  207,    7,

     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353
    } ;

static const flex_int16_t yy_chk[8878] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   15,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   18, 1356,   18,   49,   49,   18,   22,   50,   50,
       30,   22, 1350,   31,   44,   55, 1349,   22, 1348,   18,

       18,   21,   27,   21, 1347,   23,   55,   22,   27,   21,
     1345,   21,   23, 1343,   22,   21,   21,   30,   22,   23,
       31,   44,   23,   24,   22,   23, 1341,   24,   21,   27,
       21,   24,   23, 1339,   22,   27,   21,   24,   21,   23,
       24,   32,   21,   21, 1337,   32,   23, 1335,   28,   23,
       24,   32,   23,   25,   24,   25,   28,  102,   24,  103,
       25,  106,   28,   29,   24,   25, 1333,   24,   32,   29,
       29,   29,   32,   86,   86,   28,   29, 1331,   32,  107,
       25,   33,   25,   28,  102,   33,  103,   25,  106,   28,
       29,   33,   25,   26,  109,   34,   29,   29,   29,  192,

      192,   26, 1329,   29,   26,  110,  107,   26,   33,   34,
       26,   35,   33,   26, 1327,   34,   34,  113,   33,   35,
       26,  109,   34,   35,   36,   38,   35,   35,   26,   38,
     1325,   26,  110,   38,   26,   36,   34,   26,   35,   38,
       26,   36,   34,   34,  113, 1323,   35, 1155, 1155, 1319,
       35,   36,   38,   35,   35, 1315,   38,   43,   43,   41,
       38,   41,   36,   81,   41,   81,   38,   81,   36,   39,
       81,   39,   42,  116,   39,   81,   42,   39, 1309,   39,
       42,   39,   39, 1303,   43,   43,   41, 1290,   41, 1277,
       81,   41,   81, 1255,   81, 1233,   39,   81,   39,   42,

      116,   39,   81,   42,   39,  115,   39,   42,   39,   39,
       40,   58,  104,   58,   40,  115,   58,   40,   40,  105,
      104,  117,  105,  120,   40,  121,  117,   40, 1190,   58,
       58, 1147,  115, 1278, 1278, 1074, 1001,   40,  904,  104,
      807,   40,  115,  681,   40,   40,  105,  104,  117,  105,
      120,   40,  121,  117,   40,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   61,   61,  555,   61,
       61,   61,   61,   61,   61,   61,  426,  108,  108,  296,
      202,  119,  119,   67,  122,   67,   61,   61,   61,   67,

       67,  108,   61,   70,   61,   67,  123,   70,  124,  126,
       61,  127,   61,   70,  108,  108,   61,   61,  119,  119,
       67,  122,   67,   70,  128,  201,   67,   67,  108,   61,
       70,   61,   67,  123,   70,  124,  126,   61,  127,   61,
       70,   68,  130,   61,   61,   68,  200,  196,  194,   68,
       70,  128,   61,   62,   62,   68,   62,   62,   62,   62,
       62,   62,   62,   96,   95,   68,   94,   71,   68,  130,
      131,   71,   68,   62,   62,   62,   68,   71,   90,   72,
       62,   73,   68,   72,   62,   73,  112,   71,   88,   72,
       62,   73,   68,  112,   71,  132,  133,  131,   71,   72,

       62,   73,   85,   60,   71,   77,   72,   62,   73,   77,
       72,   62,   73,  112,   71,   77,   72,   62,   73,   59,
      112,  135,  132,  133,   52,   77,   72,   62,   73,   62,
       63,   84,   77,   51,   63,   84,   77,   63,   63,  136,
      129,   84,   77,  125,   63,  125,  129,   63,  135,  125,
       63,   84,   77,   47,   63,   45,  125,   63,   84,   20,
      125,   63,   84,   19,   63,   63,  136,  129,   84,   11,
      125,   63,  125,  129,   63,  138,  125,   63,   84,    7,
       78,   63,   64,  125,   78,  139,   64,  125,   78,  141,
       64,  114,  114,  114,   78,  114,   64,  134,  142,   64,

      134,    4,  138,  143,   78,    3,   64,   78,  144,   64,
        0,   78,  139,   64,    0,   78,  141,   64,  114,  114,
      114,   78,  114,   64,  134,  142,   64,  134,   82,  147,
      143,   78,   82,   64,   65,  144,   82,  145,   65,  145,
        0,   65,   82,   65,   65,  148,  149,   83,   65,  150,
       83,   83,   82,   65,   65,   82,  147,   83,    0,   82,
      152,   65,    0,   82,  145,   65,  145,   83,   65,   82,
       65,   65,  148,  149,   83,   65,  150,   83,   83,   82,
       65,   65,   66,  153,   83,  140,  118,  152,  118,   66,
       66,  118,    0,   66,   83,  140,   66,  118,  154,   66,

      140,  140,   66,    0,  118,  156,  146,  157,  146,   66,
      153,    0,  140,  118,  158,  118,   66,   66,  118,  146,
       66,    0,  140,   66,  118,  154,   66,  140,  140,   66,
       69,  118,  156,  146,  157,  146,   69,   69,   69,  151,
      159,  158,  151,   69,  160,  162,  146,  161,   69,    0,
      164,  161,  166,    0,  169,  163,    0,   69,    0,  170,
        0,  171,  172,   69,   69,   69,  151,  159,  163,  151,
       69,  160,  162,  163,  161,   69,   74,  164,  161,  166,
      165,  169,  163,   74,  173,  167,  170,  168,  171,  172,
       74,  165,  175,   74,  167,  163,   74,   74,    0,  176,

      163,  168,  167,   74,  177,    0,    0,  165,  180,  181,
       74,  173,  167,  178,  168,    0,  174,   74,  165,  175,
       74,  167,    0,   74,   74,   75,  176,  174,  168,  167,
       75,  177,   75,  178,  179,  180,  181,  183,   75,   75,
      178,  179,   75,  174,  179,   75,   75,    0,  185,  182,
      184,  186,   75,  187,  174,  182,    0,   75,    0,   75,
      178,  179,    0,  184,  183,   75,   75,    0,  179,   75,
      302,  179,   75,   75,   76,  185,  182,  184,  186,  207,
      187,   76,  182,  207,  304,   76,  305,    0,   76,  207,
      184,   76,  307,  213,   76,    0,  309,  302,  310,  207,

        0,   76,  213,    0,  213,    0,  207,    0,   76,  213,
      207,  304,   76,  305,  213,   76,  207,    0,   76,  307,
      213,   76,   79,  309,   79,  310,  207,   79,   79,  213,
       79,  213,   79,  311,   79,   79,  213,  208,  208,  312,
        0,  213,  208,  313,   79,    0,    0,  314,  208,   79,
      316,   79,    0,    0,   79,   79,    0,   79,  208,   79,
      311,   79,   79,  209,  208,  208,  312,  209,  317,  208,
      313,   79,   80,  209,  314,  208,   80,  316,  209,   80,
       80,  318,  319,  209,  320,  208,   80,  321,  322,   80,
      209,  323,  324,  325,  209,  317,   80,    0,    0,   80,

      209,    0,    0,   80,    0,  209,   80,   80,  318,  319,
      209,  320,    0,   80,  321,  322,   80,    0,  323,  324,
      325,    0,    0,   80,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  210,  326,  210,  212,
      327,  212,  328,  210,  210,  212,  212,  330,  210,    0,

      331,  212,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,    0,  210,  326,  210,  212,  327,  212,  328,
      210,  210,  212,  212,  330,  210,  211,  331,  212,  211,
        0,  215,  332,    0,  333,    0,  215,  211,  215,  211,
      284,  334,  216,  215,  211,  335,  216,  284,  215,  211,
        0,    0,  216,  211,  284,    0,  211,  284,  215,  332,
      284,  333,  216,  215,  211,  215,  211,  284,  334,  216,
      215,  211,  335,  216,  284,  215,  211,  214,  214,  216,
      337,  284,  217,  214,  284,  214,  217,  284,  329,  216,
      214,  214,  217,    0,  218,  214,  218,  338,    0,    0,

        0,  218,  217,  329,  214,  214,  218,  337,  339,  217,
      214,  340,  214,  217,  219,  329,  221,  214,  214,  217,
      221,  218,  214,  218,  338,  219,  221,  219,  218,  217,
      329,    0,  219,  218,  341,  339,  221,  219,  340,    0,
        0,  219,    0,  221,    0,    0,  342,  221,  343,    0,
        0,    0,  219,  221,  219,  344,    0,  345,  222,  219,
        0,  341,  222,  221,  219,  220,  220,  220,  222,  220,
        0,  222,  220,  342,  226,  343,  226,  220,  222,  346,
        0,  226,  344,  226,  345,  222,  226,  223,  347,  222,
      348,  223,  220,  220,  220,  222,  220,  223,  222,  220,

      349,  226,  223,  226,  220,  222,  346,  223,  226,    0,
      226,  350,  351,  226,  223,  347,    0,  348,  223,    0,
      352,    0,    0,    0,  223,    0,    0,  349,    0,  223,
      353,    0,  227,  354,  223,  224,  227,  224,  350,  351,
      224,  355,  227,  225,  356,  225,  224,  352,  224,  225,
      225,  357,  227,  224,  228,  225,  228,  353,  224,  227,
      354,  228,  224,  227,  224,    0,  228,  224,  355,  227,
      225,  356,  225,  224,    0,  224,  225,  225,  357,  227,
      224,  228,  225,  228,  229,  224,  230,  358,  228,  232,
      359,  232,  229,  228,  229,  230,  232,  230,  315,  229,

      315,  232,  230,  360,  229,  362,  363,  230,    0,    0,
        0,  229,    0,  230,  358,  315,  232,  359,  232,  229,
        0,  229,  230,  232,  230,  315,  229,  315,  232,  230,
      360,  229,  362,  363,  230,  231,  361,  231,  233,  234,
      233,  231,  315,  234,  365,  233,  361,  231,  231,  234,
      233,  366,  231,  367,    0,  368,    0,  231,    0,  234,
        0,    0,  231,  361,  231,  233,  234,  233,  231,  370,
      234,  365,  233,  361,  231,  231,  234,  233,  366,  231,
      367,  235,  368,  235,  231,  236,  234,  235,  235,  236,
      237,  371,  237,  235,    0,  236,  370,  237,    0,  240,

      372,  240,  237,  238,    0,  236,  240,  238,  235,  240,
      235,  240,  236,  238,  235,  235,  236,  237,  371,  237,
      235,  239,  236,  238,  237,  239,  240,  372,  240,  237,
      238,  239,  236,  240,  238,  241,  240,  241,  240,  369,
      238,  239,  241,    0,  242,  373,  242,  241,  239,  369,
      238,  242,  239,  242,    0,  374,  242,  244,  239,    0,
      376,  244,  241,  243,  241,  243,  369,  244,  239,  241,
      243,  242,  373,  242,  241,  243,  369,  244,  242,  247,
      242,  247,  374,  242,  244,  245,  247,  376,  244,  245,
      243,  247,  243,  377,  244,  245,  245,  243,  378,  248,

        0,  379,  243,  248,  244,  245,  247,  249,  247,  248,
      380,  249,  245,  247,    0,  381,  245,  249,  247,  248,
      377,    0,  245,  245,    0,  378,  248,  249,  379,  382,
      248,  383,  245,  246,  249,  384,  248,  380,  249,  386,
      387,  246,  381,  246,  249,  388,  248,    0,  246,  246,
      383,  250,  250,  246,  249,  250,  382,  253,  383,  253,
      246,  250,  384,  253,  253,  389,  386,  387,  246,  253,
      246,  250,  388,  390,  385,  246,  246,  383,  250,  250,
      246,    0,  250,  391,  253,    0,  253,  385,  250,    0,
      253,  253,  389,  392,    0,  393,  253,  394,  250,  251,

      390,  385,  395,  251,  254,  251,  254,  251,  264,  251,
      391,  254,  264,  266,  385,  396,  254,  266,  264,  251,
      392,  266,  393,    0,  394,    0,  251,  266,  264,  395,
      251,  254,  251,  254,  251,  264,  251,  266,  254,  264,
      266,  398,  396,  254,  266,  264,  251,  252,  266,  252,
      255,  399,  255,  400,  266,  264,  401,  255,  252,  256,
      252,  256,  255,  402,  266,  252,  256,  256,  398,  403,
      252,  256,    0,  404,  252,    0,  252,  255,  399,  255,
      400,  405,    0,  401,  255,  252,  256,  252,  256,  255,
      402,  406,  252,  256,  256,    0,  403,  252,  256,  257,

      404,  257,  258,    0,  258,  407,  257,  257,  405,  258,
      257,  257,  259,    0,  258,  261,  408,  261,  406,    0,
      410,    0,  261,  259,    0,  259,  257,  261,  257,  258,
      259,  258,  407,  257,  257,  259,  258,  257,  257,  259,
      260,  258,  261,  408,  261,  412,  260,  410,  260,  261,
      259,  262,  259,  260,  261,    0,  414,  259,  260,  262,
        0,  262,  259,    0,    0,    0,  262,  260,  411,    0,
        0,  262,  412,  260,    0,  260,    0,  411,  262,  415,
      260,    0,  263,  414,  263,  260,  262,  265,  262,  263,
      263,  265,  267,  262,  263,  411,  267,  265,  262,  416,

      265,  268,  267,  268,  411,  417,  415,  265,  268,  263,
        0,  263,  267,  268,  265,    0,  263,  263,  265,  267,
      269,  263,    0,  267,  265,    0,  416,  265,  268,  267,
      268,  269,  417,  269,  265,  268,  418,  270,  269,  267,
      268,  419,  270,  269,  270,  420,  413,  269,  413,  270,
      271,    0,  271,    0,  270,  421,  423,  271,  269,  424,
      269,  271,  271,  418,  270,  269,  556,    0,  419,  270,
      269,  270,  420,  413,  272,  413,  270,  271,  272,  271,
      272,  270,  421,  423,  271,  272,  424,    0,  271,  271,
      272,    0,    0,  556,  275,  274,  557,    0,  275,  274,

        0,  272,    0,  274,  275,  272,  422,  272,    0,  274,
      422,    0,  272,    0,  275,  558,  559,  272,  273,  274,
      560,  275,  274,  557,  276,  275,  274,  273,  276,  273,
      274,  275,  276,  422,  273,  273,  274,  422,  276,  273,
      277,  275,  558,  559,  277,  273,  274,  560,  276,  561,
      277,  276,    0,  277,  273,  276,  273,  562,  563,  276,
      277,  273,  273,    0,  278,  276,  273,  277,  278,    0,
        0,  277,  278,    0,  564,  276,  561,  277,  278,  279,
      277,    0,  279,    0,  562,  563,  279,  277,  278,    0,
      281,  278,  279,    0,  281,  278,  280,  280,  280,  278,

      281,  564,  279,  280,  566,  278,  279,    0,  280,  279,
      281,    0,  282,  279,  569,  278,  282,  281,    0,  279,
      282,  281,  282,  280,  280,  280,    0,  281,  570,  279,
      280,  566,  282,    0,  283,  280,    0,  281,  283,  282,
      571,  569,  572,  282,  283,  283,    0,  282,  574,  282,
      575,  576,  286,  286,  283,  570,  287,  286,    0,  282,
      287,  283,    0,  286,  577,  283,  287,  571,    0,  572,
        0,  283,  283,  286,    0,  574,  287,  575,  576,  286,
      286,  283,  285,  287,  286,  285,    0,  287,    0,  285,
      286,  577,  285,  287,  579,  285,    0,  291,  580,    0,

      286,  291,  289,  287,  581,  285,  582,  291,  288,  285,
      288,  289,  285,  289,  288,  288,  285,  291,  289,  285,
      288,  579,  285,  289,  291,  580,  290,    0,  291,  289,
      290,  581,  285,  582,  291,  288,  290,  288,  289,  290,
      289,  288,  288,  583,  291,  289,  290,  288,    0,  584,
      289,  293,  292,  290,  431,  293,  292,  290,  431,  293,
      585,  586,  292,  290,  431,  293,  290,  292,  587,  590,
      583,  591,  292,  290,  431,  293,  584,    0,  293,  292,
        0,  431,  293,  292,    0,  431,  293,  585,  586,  292,
        0,  431,  293,    0,  292,  587,  590,    0,  591,  292,

        0,  431,  293,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  432,  433,  434,    0,  432,  433,  434,
      435,    0,  435,  432,  433,  434,    0,  435,  592,  593,
      594,  595,  435,  432,  433,  434,  436,    0,  436,    0,
      432,  433,  434,  436,  432,  433,  434,  435,  436,  435,
      432,  433,  434,  437,  435,  592,  593,  594,  595,  435,
      432,  433,  434,  436,  437,  436,  437,  438,  439,  438,
      436,  437,  439,    0,  438,  436,  437,  440,  439,  438,
      437,  440,  441,  596,  598,    0,  441,  440,  439,    0,
      599,  437,  441,  437,  438,  439,  438,  440,  437,  439,

      441,  438,  441,  437,  440,  439,  438,  600,  440,  441,
      596,  598,  442,  441,  440,  439,  442,  599,  443,  441,
      443,  444,  442,  444,  440,  443,  603,  441,  444,  441,
      443,    0,  442,  444,  600,    0,    0,    0,  604,  442,
        0,  606,  608,  442,  609,  443,    0,  443,  444,  442,
      444,    0,  443,  603,  447,  444,    0,  443,  447,  442,
      444,  445,  446,  445,  447,  604,  446,  445,  606,  608,
      447,  609,  446,  445,  447,  446,  448,    0,  445,  610,
      448,  447,  446,  445,  448,  447,  448,    0,  445,  446,
      445,  447,    0,  446,  445,    0,  448,  447,  611,  446,

      445,  447,  446,  448,  449,  445,  610,  448,  449,  446,
      445,  448,  450,  448,  449,  612,  450,  613,  616,  449,
      620,  622,  450,  448,  449,  611,  451,  614,  623,    0,
      451,  449,  450,  625,  451,  449,    0,    0,  614,  450,
      451,  449,  612,  450,  613,  616,  449,  620,  622,  450,
      451,  449,    0,  451,  614,  623,  452,  451,  452,  450,
      625,  451,    0,  452,  453,  614,  453,  451,  452,  454,
      453,  453,  627,  454,  457,  628,  453,  451,  457,  454,
      455,    0,  455,  452,  457,  452,    0,  455,    0,  454,
      452,  453,  455,  453,  457,  452,  454,  453,  453,  627,

      454,  457,  628,  453,  629,  457,  454,  455,  456,  455,
      456,  457,    0,  459,  455,  456,  454,  459,    0,  455,
      456,  457,  458,  459,    0,  631,  458,    0,  459,  632,
      458,  629,  633,  459,    0,  456,  458,  456,  634,  460,
      459,  460,  456,  636,  459,  460,  458,  456,  637,  458,
      459,  460,  631,  458,  461,  459,  632,  458,  461,  633,
      459,  460,    0,  458,  461,  634,  460,  462,  460,    0,
      636,  462,  460,  458,  461,  637,  463,  462,  460,  463,
        0,  461,  462,  463,    0,  461,  639,  462,  460,  463,
        0,  461,  465,    0,  462,    0,  465,    0,  462,  463,

        0,  461,  465,  463,  462,    0,  463,  464,  640,  462,
      463,  464,  465,  639,  462,    0,  463,  464,  464,  465,
      466,  626,  626,  465,  466,    0,  463,  464,  467,  465,
      466,    0,  467,  468,  464,  640,  467,  468,  464,  465,
      466,    0,  467,  468,  464,  464,  641,  466,  626,  626,
        0,  466,  467,  468,  464,  467,  469,  466,  469,  467,
      468,  642,  469,  467,  468,  644,  645,  466,  469,  467,
      468,  646,  647,  641,  470,  471,  470,  471,  469,  467,
      468,  470,  471,  469,    0,  469,  470,  471,  642,  469,
        0,    0,  644,  645,    0,  469,  649,  650,  646,  647,

      651,  470,  471,  470,  471,  469,  652,  655,  470,  471,
      472,  474,  472,  470,  471,  474,  472,  472,  473,    0,
      473,  474,  472,  649,  650,  473,    0,  651,    0,    0,
      473,  474,  475,  652,  655,  656,  475,  472,  474,  472,
      475,  657,  474,  472,  472,  473,  475,  473,  474,  472,
        0,    0,  473,  476,    0,  476,  475,  473,  474,  475,
      476,    0,  656,  475,  658,  476,  659,  475,  657,  477,
      477,  477,  662,  475,  663,    0,  477,  478,  478,  478,
      476,  477,  476,  475,  478,    0,  665,  476,  479,  478,
      479,  658,  476,  659,    0,  479,  477,  477,  477,  662,

      479,  663,  480,  477,  478,  478,  478,    0,  477,  666,
        0,  478,  480,  665,  480,  479,  478,  479,  667,  480,
        0,  481,  479,  481,  480,  668,  669,  479,  481,  480,
      481,  482,  670,  481,  483,  482,  666,  482,  483,  480,
        0,  480,  482,    0,  483,  667,  480,  482,  481,    0,
      481,  480,  668,  669,  483,  481,    0,  481,  482,  670,
      481,  483,  482,  484,  482,  483,  485,  484,    0,  482,
      485,  483,  671,  484,  482,    0,  485,    0,  484,  485,
      672,  483,  673,  484,    0,    0,  485,    0,  674,    0,
      484,  487,  486,  485,  484,  487,  486,  485,  486,  671,

      484,  487,  486,  485,  488,  484,  485,  672,  488,  673,
      484,  487,  486,  485,  488,  674,  489,  490,  487,  486,
      489,  490,  487,  486,  488,  486,  489,  490,  487,  486,
      491,  488,  676,  678,  491,  488,  489,  490,  487,  486,
      491,  488,  492,  489,  490,  680,  492,  489,  490,    0,
      491,  488,  492,  489,  490,    0,  810,  491,  492,  676,
      678,  491,  492,  489,  490,    0,  812,  491,  493,  492,
      493,    0,  680,  492,  494,  493,  494,  491,  496,  492,
      493,  494,  496,  810,    0,  492,  494,    0,  496,  492,
      814,  815,  495,  812,  495,  493,  816,  493,  496,  495,

      495,  494,  493,  494,  495,  496,  817,  493,  494,  496,
      497,  498,  498,  494,  497,  496,  498,  814,  815,  495,
      497,  495,  498,  816,  818,  496,  495,  495,  819,  820,
      497,  495,  498,  817,  821,    0,  822,  497,  498,  498,
      824,  497,  500,  498,  500,  825,  500,  497,  826,  498,
      827,  818,  500,    0,  828,  819,  820,  497,  829,  498,
      499,  821,  500,  822,  499,    0,  831,  824,  499,  500,
      499,  500,  825,  500,  499,  826,  501,  827,  501,  500,
      501,  828,  832,    0,  499,  829,  501,  499,  502,  500,
        0,  499,  502,  831,  833,  499,  501,  499,  502,    0,

      834,  499,  503,  501,  502,  501,  503,  501,  502,  832,
      504,  499,  503,  501,  504,  502,  835,  503,  836,  502,
      504,  833,  503,  501,  837,  502,  504,  834,  505,  503,
      504,  502,  505,  503,  838,  502,  839,  504,  505,  503,
        0,  504,  506,  835,  503,  836,  506,  504,  505,  503,
      506,  837,  840,  504,    0,  505,  506,  504,  843,  505,
      507,  838,  507,  839,  844,  505,  506,  507,    0,  506,
      845,  846,  507,  506,  508,  505,  508,  506,  847,  840,
      508,  508,  850,  506,  853,  843,  508,  507,  509,  507,
      509,  844,  510,  506,  507,  509,  510,  845,  846,  507,

      509,  508,  510,  508,    0,  847,  511,  508,  508,  850,
      511,  853,  510,  508,    0,  509,  511,  509,  854,  510,
        0,  512,  509,  510,  856,  512,  511,  509,  514,  510,
      514,  512,    0,  511,  512,  514,    0,  511,    0,  510,
      514,  512,    0,  511,  859,  854,    0,  518,  512,  518,
        0,  856,  512,  511,  518,  514,    0,  514,  512,  518,
      862,  512,  514,  516,  516,  516,    0,  514,  512,  513,
      516,  859,  863,  513,  518,  516,  518,  513,  864,    0,
      865,  518,  855,  513,  866,  855,  518,  862,  513,  867,
      516,  516,  516,  513,    0,  870,  513,  516,    0,  863,

      513,  517,  516,    0,  513,  864,  517,  865,  517,  855,
      513,  866,  855,  517,  871,  513,  867,  520,  517,  520,
      513,  515,  870,  872,  520,  520,  873,  874,  517,  520,
      515,    0,  515,  517,  515,  517,  876,  515,    0,    0,
      517,  871,  515,    0,  520,  517,  520,  519,  515,  877,
      872,  520,  520,  873,  874,  879,  520,  515,  519,  515,
      519,  515,  521,  876,  515,  519,  521,  880,  521,  515,
      519,  881,  882,  521,  519,    0,  877,    0,  521,  522,
        0,  522,  879,  884,    0,  519,  522,  519,    0,  521,
        0,  522,  519,  521,  880,  521,  885,  519,  881,  882,

      521,  886,  523,    0,  523,  521,  522,  524,  522,  523,
      884,  524,  525,  522,  523,  526,  525,  524,  522,  526,
      527,  887,  525,  885,  527,  526,  888,  524,  886,  523,
      527,  523,  525,    0,  524,  526,  523,    0,  524,  525,
      527,  523,  526,  525,  524,    0,  526,  527,  887,  525,
        0,  527,  526,  888,  524,    0,  528,  527,    0,  525,
      528,  529,  526,    0,  530,  529,  528,  527,  530,  528,
      531,  529,  531,  889,  530,  530,  528,  531,  532,  529,
      532,  529,  531,  528,  530,  532,  532,  528,  529,    0,
      532,  530,  529,  528,    0,  530,  528,  531,  529,  531,

      889,  530,  530,  528,  531,  532,  529,  532,  529,  531,
      890,  530,  532,  532,  533,  891,  533,  532,  534,  892,
      534,  533,  533,  894,  895,  534,  533,  535,  896,  535,
      534,  535,  898,    0,  535,    0,    0,  890,    0,  535,
        0,  533,  891,  533,  899,  534,  892,  534,  533,  533,
      894,  895,  534,  533,  535,  896,  535,  534,  535,  898,
      536,  535,  536,  537,  900,  537,  535,  536,  536,    0,
      537,  899,  536,  538,  901,  537,  539,  538,    0, 1002,
      539, 1004,    0,  538,    0,    0,  539,  536, 1006,  536,
      537,  900,  537,  538,  536,  536,  539,  537,    0,  536,

      538,  901,  537,  539,  538,  541, 1002,  539, 1004,  540,
      538,  540,  541,  539,  541, 1006,  540, 1007,    0,  541,
      538,  540, 1008,  539,  541,  542,    0,  544,    0,  542,
      543,  544,  541,    0,  543,  542,  540,  544,  540,  541,
      543,  541,  543,  540, 1007,  542,  541,  544,  540, 1008,
      543,  541,  542,  546,  544,  546,  542,  543,  544, 1009,
      546,  543,  542,    0,  544,  546,    0,  543,    0,  543,
     1011,  545,  542,    0,  544,  545, 1013,  543, 1014,  545,
      546,  547,  546,  547,    0,  545, 1009,  546,  547,    0,
      547, 1015,  546,  547,    0,  545,    0, 1011,  545, 1016,

      548, 1017,  545, 1013,    0, 1014,  545, 1019,  547,  548,
      547,  548,  545, 1021,    0,  547,  548,  547, 1015,    0,
      547,  548,  545,  549,    0,  549, 1016,  548, 1017, 1025,
      549,  549,    0, 1027, 1019,  549,  548, 1028,  548,  551,
     1021,  551,  550,  548,  550, 1029,  551,  551,  548,  550,
      549,  551,  549,  550,  550, 1036, 1025,  549,  549,  553,
     1027, 1037,  549,  553, 1028,  553,  551, 1038,  551,  550,
      553,  550, 1029,  551,  551,  553,  550,  552,  551,  552,
      550,  550, 1036,  552,  552,    0,  553,    0, 1037,  552,
      553,    0,  553,  554, 1038,  554, 1041,  553, 1043,  554,

      554,  682,  553,  682,  552,  554,  552,  682,  682, 1045,
      552,  552,  683,  682,  683,    0,  552, 1047,  683,  683,
      554,    0,  554, 1041,  683, 1043,  554,  554,  682, 1048,
      682,    0,  554,  684,  682,  682, 1045,  684,  685,  683,
      682,  683,  685,  684, 1047,  683,  683, 1049,  685,    0,
      687,  683,  687,  684, 1050, 1051, 1048,  687,  685, 1053,
      684,    0,  687,  686,  684,  685, 1054,  686,  688,  685,
      684, 1055,  688,  686, 1049,  685,  686,  687,  688,  687,
      684, 1050, 1051,  686,  687,  685, 1053,    0,  688,  687,
      686,    0, 1056, 1054,  686,  688, 1058,  690, 1055,  688,

      686,  690,  689,  686,  689,  688,  701,  690,  701,  689,
      686,    0,  691,  701,  689,  688,  691,  690,  701, 1056,
        0, 1060,  691, 1058,  690,    0, 1062,    0,  690,  689,
        0,  689,  691,  701,  690,  701,  689, 1063,  692,  691,
      701,  689,  692,  691,  690,  701,  692,  693, 1060,  691,
      694,  693,  692, 1062,  694,    0, 1064,  693, 1065,  691,
      694, 1066,  692, 1071, 1063,  692, 1073,  693,  695,  692,
      694,    0,  695,  692,  693,    0,  695,  694,  693,  692,
     1152,  694,  695, 1064,  693, 1065, 1156,  694, 1066,  692,
     1071,    0,  695, 1073,  693,  695,  696,  694,  697,  695,

      696,  698,  697,  695,  696,  698,  696, 1152,  697,  695,
     1157,  698, 1160, 1156,  698, 1161,  696, 1165,  697,  695,
      699,  698,    0,  696,  699,  697,    0,  696,  698,  697,
      699,  696,  698,  696,    0,  697, 1167, 1157,  698, 1160,
      699,  698, 1161,  696, 1165,  697,  700,  699,  698,  702,
      700,  699,    0,  702, 1168, 1171,  700,  699,  705,  702,
      705,  700, 1172, 1167,  703,  705,  700,  699,  703,  702,
      705, 1173, 1174,  700,  703,    0,  702,  700, 1177,  703,
      702, 1168, 1171,  700,  703,  705,  702,  705,  700, 1172,
      704,  703,  705,  700,  704,  703,  702,  705, 1173, 1174,

      704,  703,  706,  706,  706, 1177,  703,    0,    0,  706,
      704,  703,    0,  707,  706,  707,  708,  704,  708,    0,
      707,  704,  707,  708,  708,  707,    0,  704,  708,  706,
      706,  706,  710, 1178,  710,  709,  706,  704,  710,  710,
      707,  706,  707,  708,  710,  708,  709,  707,  709,  707,
      708,  708,  707,  709,    0,  708,    0,    0,  709,  710,
     1178,  710,  709,  711, 1181,  710,  710, 1183, 1184, 1185,
        0,  710,  711,  709,  711,  709,  713,  712,  713,  711,
      709,  712, 1186,  713,  711,  709, 1187,  712,  713,    0,
      711, 1181, 1234,    0, 1183, 1184, 1185,  712, 1237,  711,

      714,  711,  714,  713,  712,  713,  711,  714,  712, 1186,
      713,  711,  714, 1187,  712,  713,  715,    0,  715, 1234,
     1235, 1235,    0,  715,  712, 1237,    0,  714,  715,  714,
     1240, 1241,    0, 1244,  714, 1245,    0, 1246,    0,  714,
      716, 1250,  716,  715,  716,  715, 1251,  716,    0,  717,
      715,  717,  716,  717, 1252,  715,  717, 1240, 1241, 1235,
     1244,  717, 1245,  718, 1246,  718,    0,  716, 1250,  716,
      718,  716,  718, 1251,  716,  718,  717, 1254,  717,  716,
      717, 1252, 1279,  717,    0,  720, 1235,    0,  717, 1280,
      718, 1283,  718,  719,    0,  719,  720,  718,  720,  718,

      719,  719,  718,  720, 1254,  719,  721, 1288,  720, 1279,
        0,  722,  720, 1257, 1257,  722, 1280,  721, 1283,  721,
      719,  722,  719,  720,  721,  720, 1292,  719,  719,  721,
      720,  722,  719,  721, 1288,  720,    0,  723,  722,  724,
        0,  723,  722,  724,  721, 1305,  721,  723,  722,  724,
     1308,  721, 1257, 1292,  724, 1311,  721,  723,  722,  724,
        0,  726,    0,  725,  723,  726,  724,  725,  723,  726,
      724, 1316, 1305,  725,  723,  726,  724, 1308,    0, 1257,
        0,  724, 1311,  725,  723,  726,  724,  727,  726,  728,
      725,  727,  726,  728,  725, 1320,  726,  727, 1316,  728,

      725,    0,  726, 1324, 1304, 1304,    0,  727,    0,  728,
      725,  729,  726, 1326,  727,  729,  728,  730,  727,  729,
      728,  730, 1320, 1328,  727,  729,  728,  730,  730,  731,
     1324,    0, 1330,  731,  727,  729,  728,  730,  729,  731,
     1326, 1332,  729, 1334,  730,    0,  729, 1304,  730,  731,
     1328,  732,  729,  732,  730,  730,  731, 1336,  732, 1330,
      731, 1338,  729,  732,  730,  733,  731,  733, 1332, 1340,
     1334,    0,  733,    0, 1304,    0,  731,  733,  732,  734,
      732,  734, 1342,  735, 1336,  732,  734,  735, 1338,    0,
      732,  734,  733,  735,  733,    0, 1340, 1310, 1310,  733,

      737,    0,  737,  735,  733,    0,  734,  737,  734, 1342,
      735,  736,  737,  734,  735,  736,    0,    0,  734,    0,
      735,  736,    0,    0,  736,    0,    0,  737,    0,  737,
      735,  736,    0,    0,  737,    0,    0,    0,  736,  737,
     1310,    0,  736,  738,    0,  738,    0,    0,  736,  738,
      738,  736,    0,    0,  739,  738,  739,  741,  736,  741,
      739,  739,    0,    0,  741,    0,  739, 1310,    0,  741,
      738,    0,  738,  742,    0,  742,  738,  738,    0,    0,
      742,  739,  738,  739,  741,  742,  741,  739,  739,    0,
        0,  741,    0,  739,  740,    0,  741,    0,    0,  740,

      742,  740,  742,    0,    0,  740,  740,  742,  743,    0,
      743,  740,  742,    0,    0,  743,    0,  744,    0,  744,
      743,  740,    0,    0,  744,    0,  740,    0,  740,  744,
        0,    0,  740,  740,    0,  743,    0,  743,  740,    0,
        0,  745,  743,  745,  744,    0,  744,  743,  745,    0,
      746,  744,  746,  745,    0,    0,  744,  746,  746,  747,
        0,  747,  746,    0,    0,    0,  747,    0,  745,    0,
      745,  747,    0,    0,    0,  745,    0,  746,    0,  746,
      745,    0,    0,    0,  746,  746,  747,    0,  747,  746,
      748,  749,  748,  747,    0,  749,  750,  748,  747,    0,

      750,  749,  748,    0,    0,  751,  750,    0,    0,  751,
        0,  749,    0,    0,    0,  751,  750,  748,  749,  748,
        0,    0,  749,  750,  748,  751,    0,  750,  749,  748,
        0,    0,  751,  750,    0,    0,  751,  752,  749,  752,
        0,    0,  751,  750,  752,  752,    0,  753,  754,  752,
      754,  753,  751,  753,  754,  754,    0,    0,  753,    0,
      754,    0,    0,  753,  752,    0,  752,    0,    0,  755,
        0,  752,  752,  755,  753,  754,  752,  754,  753,  755,
      753,  754,  754,    0,  756,  753,    0,  754,  756,  755,
      753,  757,    0,  757,  756,    0,  755,  757,    0,    0,

      755,    0,    0,  757,  756,    0,  755,    0,    0,    0,
        0,  756,    0,  757,    0,  756,  755,    0,  757,  758,
      757,  756,  759,  758,  757,    0,  759,    0,    0,  758,
      757,  756,  759,    0,  760,  759,    0,    0,  760,  758,
      757,    0,  759,    0,  760,    0,  758,  760,  761,  759,
      758,    0,  761,  759,  760,    0,  758,    0,  761,  759,
        0,  760,  759,  763,    0,  760,  758,  763,  761,  759,
        0,  760,  762,  763,  760,  761,  762,    0,    0,  761,
      762,  760,  762,  763,    0,  761,    0,    0,    0,    0,
      763,    0,  762,    0,  763,  761,    0,    0,  764,  762,

      763,  765,  764,  762,    0,  765,    0,  762,  764,  762,
      763,  765,  766,    0,    0,    0,  766,    0,  764,  762,
      766,  765,    0,    0,    0,  764,  766,    0,  765,  764,
        0,    0,  765,    0,    0,  764,  766,    0,  765,  766,
        0,    0,  767,  766,    0,  764,  767,  766,  765,    0,
      767,  768,    0,  766,  769,  768,  767,    0,  769,    0,
        0,  768,    0,  766,  769,    0,  767,    0,    0,  767,
        0,  768,    0,  767,  769,    0,  770,  767,  768,    0,
      770,  769,  768,  767,  770,  769,  770,    0,  768,    0,
        0,  769,    0,  767,    0,  771,  770,    0,  768,  771,

        0,  769,    0,  770,    0,  771,    0,  770,  771,    0,
      772,  770,    0,  770,  772,  771,    0,    0,    0,    0,
      772,  773,  771,  770,  773,  772,  771,    0,  773,  774,
      772,    0,  771,  774,  773,  771,    0,  772,  776,  774,
      776,  772,  771,    0,  773,  776,    0,  772,  773,  774,
      776,  773,  772,    0,  775,  773,  774,  772,  775,  777,
      774,  773,  775,    0,  775,  776,  774,  776,  777,    0,
      777,  773,  776,    0,  775,  777,  774,  776,  778,    0,
      777,  775,  778,  779,    0,  775,  777,  779,  778,  775,
        0,  775,  781,  779,  781,  777,  780,  777,  778,  781,

      780,  775,  777,  779,  781,  778,  780,  777,  782,  778,
      779,    0,  782,    0,  779,  778,  780,    0,  782,  781,
      779,  781,    0,  780,    0,  778,  781,  780,  782,    0,
      779,  781,  783,  780,  784,  782,  783,  785,  784,  782,
        0,  785,  783,  780,  784,  782,  786,  785,    0,    0,
      786,    0,  783,    0,  784,  782,  786,  785,    0,  783,
        0,  784,    0,  783,  785,  784,  786,    0,  785,  783,
        0,  784,  787,  786,  785,    0,  787,  786,  788,  783,
      788,  784,  787,  786,  785,  788,    0,    0,    0,  789,
      788,  789,  787,  786,  798,    0,  789,    0,  798,  787,

        0,  789,    0,  787,  798,  788,    0,  788,  790,  787,
      790,    0,  788,  791,  798,  790,  789,  788,  789,  787,
      790,  798,  791,  789,  791,  798,    0,    0,  789,  791,
        0,  798,    0,    0,  791,  790,  792,  790,  792,    0,
      791,  798,  790,  792,    0,  792,    0,  790,  792,  791,
      793,  791,  793,    0,    0,    0,  791,  793,    0,    0,
        0,  791,  793,  792,  794,  792,  794,  795,    0,    0,
      792,  794,  792,  794,    0,  792,  794,  793,  795,  793,
      795,    0,    0,    0,  793,  795,    0,    0,    0,  793,
      795,  794,    0,  794,  795,    0,    0,    0,  794,    0,

      794,  797,  796,  794,  796,  795,  797,  795,  797,  796,
      796,    0,  795,  797,  796,    0,    0,  795,  797,    0,
        0,    0,  799,    0,    0,  799,  799,    0,  797,  796,
        0,  796,  799,  797,  800,  797,  796,  796,  800,    0,
      797,  796,  799,    0,  800,  797,  801,  802,    0,  799,
      801,  802,  799,  799,  800,    0,  801,  802,    0,  799,
      803,  800,    0,  802,  803,  800,  801,  802,    0,  799,
      803,  800,  804,  801,  802,  805,  804,  801,  802,  805,
      803,  800,  804,  801,  802,  805,    0,  803,    0,    0,
      802,  803,  804,  801,  802,  805,    0,  803,  806,  804,

      806,    0,  805,  804,    0,  806,  805,  803,    0,  804,
      806,  905,  805,  905,  906,    0,  906,    0,  905,  804,
        0,  906,  805,  905,    0,  806,  906,  806,    0,    0,
        0,    0,  806,    0,    0,    0,    0,  806,  905,    0,
      905,  906,  907,  906,  907,  905,    0,    0,  906,  907,
      905,    0,    0,  906,  907,  908,  907,  908,    0,    0,
      909,    0,  908,    0,  909,    0,    0,  908,  910,  907,
      909,  907,  910,    0,    0,    0,  907,    0,  910,    0,
      909,  907,  908,  907,  908,    0,  911,  909,  910,  908,
      911,  909,    0,    0,  908,  910,  911,  909,    0,  910,

        0,    0,    0,    0,  912,  910,  911,  909,  912,    0,
        0,    0,  913,  911,  912,  910,  913,  911,    0,  912,
      913,    0,    0,  911,  912,    0,  913,  914,  914,    0,
        0,  912,  914,  911,    0,  912,  913,    0,  914,  913,
        0,  912,    0,  913,    0,    0,  912,  913,  914,    0,
      915,  912,  915,  913,  914,  914,  915,    0,    0,  914,
        0,    0,  915,  913,  916,  914,  916,    0,    0,    0,
        0,  916,  915,    0,    0,  914,  916,  915,  917,  915,
      917,    0,    0,  915,  918,  917,  917,    0,  918,  915,
      917,  916,    0,  916,  918,    0,  919,    0,  916,  915,

      919,    0,    0,  916,  918,  917,  919,  917,    0,    0,
      920,  918,  917,  917,  920,  918,  919,  917,    0,    0,
      920,  918,  921,  919,  921,    0,    0,  919,  922,  921,
      920,  918,  922,  919,  921,    0,    0,  920,  922,    0,
      923,  920,    0,  919,  923,    0,    0,  920,  922,  921,
      923,  921,    0,    0,  924,  922,  921,  920,  924,  922,
      923,  921,  924,    0,    0,  922,  926,  923,  924,    0,
      926,  923,  925,    0,  925,  922,  926,  923,  924,  925,
        0,  924,    0,    0,  925,  924,  926,  923,  927,  924,
      928,    0,  927,  926,  928,  924,    0,  926,  927,  925,

      928,  925,    0,  926,    0,  924,  925,    0,  927,    0,
      928,  925,  931,  926,  929,  927,  931,  928,  929,  927,
        0,  928,  931,    0,  929,  927,  930,  928,  930,  929,
        0,    0,  931,  930,  929,  927,    0,  928,  930,  931,
        0,  929,  932,  931,    0,  929,  932,    0,    0,  931,
        0,  929,  932,  930,    0,  930,  929,    0,    0,  931,
      930,  929,  932,    0,  936,  930,  933,  934,  936,  932,
      933,  934,    0,  932,  936,    0,  933,  934,  935,  932,
      935,  933,  934,    0,  936,  935,  933,  934,    0,  932,
      935,  936,    0,  933,  934,  936,    0,  933,  934,    0,

        0,  936,    0,  933,  934,  935,    0,  935,  933,  934,
        0,  936,  935,  933,  934,  938,  937,  935,  937,  938,
      939,    0,  937,    0,  939,  938,    0,    0,  937,    0,
      939,    0,    0,    0,    0,  938,    0,    0,  937,    0,
      939,    0,  938,  937,    0,  937,  938,  939,    0,  937,
      940,  939,  938,    0,  940,  937,    0,  939,    0,  941,
      940,    0,  938,  941,  942,  937,  942,  939,  940,  941,
      940,  942,    0,  943,  941,  943,  942,  940,    0,  941,
      943,  940,    0,    0,    0,  943,  941,  940,    0,    0,
      941,  942,    0,  942,    0,  940,  941,  940,  942,    0,

      943,  941,  943,  942,  944,    0,  941,  943,  945,  944,
      945,  944,  943,    0,    0,  945,  944,  946,    0,  946,
      945,  944,    0,    0,  946,    0,    0,    0,    0,  946,
        0,  944,    0,    0,    0,  945,  944,  945,  944,    0,
        0,    0,  945,  944,  946,    0,  946,  945,  944,    0,
      947,  946,  947,  948,    0,  948,  946,  947,  947,  949,
      948,  949,  947,    0,    0,  948,  949,    0,    0,    0,
        0,  949,    0,    0,    0,    0,    0,  947,    0,  947,
      948,    0,  948,    0,  947,  947,  949,  948,  949,  947,
        0,    0,  948,  949,  950,  951,  950,    0,  949,  951,

        0,  950,  950,    0,    0,  951,  950,  952,    0,  952,
        0,    0,    0,    0,  952,  951,    0,  952,  953,  952,
      953,  950,  951,  950,    0,  953,  951,    0,  950,  950,
      953,    0,  951,  950,  952,    0,  952,    0,    0,    0,
        0,  952,  951,    0,  952,  953,  952,  953,  954,  955,
      954,  955,  953,    0,  956,  954,  955,  953,    0,    0,
      954,  955,  956,    0,  956,    0,    0,    0,    0,  956,
        0,    0,    0,    0,  956,  954,  955,  954,  955,    0,
        0,  956,  954,  955,    0,    0,    0,  954,  955,  956,
      957,  956,  957,  958,  959,  958,  956,  957,  959,    0,

      958,  956,  957,    0,  959,  958,  960,    0,  960,    0,
        0,    0,    0,  960,  959,    0,    0,  957,  960,  957,
      958,  959,  958,    0,  957,  959,  961,  958,    0,  957,
        0,  959,  958,  960,    0,  960,    0,  961,    0,  961,
      960,  959,    0,    0,  961,  960,    0,    0,  962,  961,
      962,    0,    0,  961,    0,  962,  962,  963,    0,    0,
      962,  963,    0,  963,  961,    0,  961,    0,  963,    0,
        0,  961,    0,  963,    0,  962,  961,  962,    0,    0,
        0,    0,  962,  962,  963,    0,    0,  962,  963,  964,
      963,  964,  965,    0,  965,  963,  964,  964,    0,  965,

      963,  964,  967,  966,  965,  966,  967,    0,    0,    0,
      966,    0,  967,    0,    0,  966,  964,    0,  964,  965,
        0,  965,  967,  964,  964,    0,  965,    0,  964,  967,
      966,  965,  966,  967,    0,    0,  968,  966,    0,  967,
      968,    0,  966,  969,  969,    0,  968,    0,  969,  967,
        0,  968,    0,    0,  969,    0,  968,    0,    0,    0,
        0,    0,    0,  968,  969,    0,    0,  968,    0,    0,
      969,  969,  970,  968,    0,  969,  970,    0,  968,    0,
      971,  969,  970,  968,  971,  970,    0,    0,    0,    0,
      971,  969,  970,  971,  972,    0,    0,    0,  972,  970,

      971,    0,    0,  970,  972,    0,  973,  971,    0,  970,
      973,  971,  970,    0,  972,    0,  973,  971,  974,  970,
      971,  972,  974,    0,    0,  972,  973,  971,  974,    0,
      975,  972,    0,  973,  975,    0,    0,  973,  974,    0,
      975,  972,    0,  973,  976,  974,    0,    0,  976,  974,
      975,    0,  976,  973,    0,  974,  977,  975,  976,    0,
      977,  975,  980,    0,  977,  974,  980,  975,  976,    0,
      977,  976,  980,  978,  978,  976,    0,  975,  978,  976,
      977,    0,  980,  977,  978,  976,  981,  977,  979,  980,
      981,  977,  979,  980,  978,  976,  981,  977,  979,  980,

      978,  978,    0,  979,    0,  978,  981,  977,  979,  980,
        0,  978,    0,  981,  983,  979,    0,  981,  983,  979,
        0,  978,  983,  981,    0,  979,  982,  982,  983,    0,
      979,  982,  984,  981,  984,  979,    0,  982,  983,  984,
        0,  983,    0,    0,  984,  983,    0,  982,    0,  983,
      985,    0,  985,  982,  982,  983,  985,  985,  982,  984,
        0,  984,  985,    0,  982,  983,  984,    0,  986,    0,
      986,  984,    0,    0,  982,  986,  986,  985,    0,  985,
      986,  987,    0,  985,  985,    0,    0,  988,    0,  985,
        0,    0,  987,    0,  987,  986,    0,  986,  988,  987,

      988,    0,  986,  986,  987,  988,    0,  986,  987,    0,
      988,  989,    0,  989,  988,    0,    0,    0,  989,  987,
        0,  987,  990,  989,  990,  988,  987,  988,    0,  990,
        0,  987,  988,    0,  990,    0,    0,  988,  989,    0,
      989,    0,  991,  992,  992,  989,  991,    0,  992,  990,
      989,  990,  991,    0,  992,    0,  990,    0,    0,    0,
        0,  990,  991,    0,  992,    0,    0,    0,  993,  991,
      992,  992,  993,  991,    0,  992,  994,    0,  993,  991,
      994,  992,    0,    0,    0,  995,  994,  995,  993,  991,
        0,  992,  995,  996,    0,  993,  994,  995,    0,  993,

        0,    0,    0,  994,  996,  993,  996,  994,    0,    0,
        0,  996,  995,  994,  995,  993,  996,    0,    0,  995,
      996,    0,    0,  994,  995,    0,  998,    0,  997,    0,
      997,  996,    0,  996,  997,  997,    0,  998,  996,  998,
      997,    0,    0,  996,  998,    0,    0,    0,    0,  998,
        0,    0,    0,  998,    0,  997,  999,  997,  999,    0,
        0,  997,  997,  999,  998,    0,  998,  997,  999, 1075,
     1000,  998, 1000, 1075, 1076,    0,  998, 1000, 1076, 1075,
        0,    0, 1000,  999, 1076,  999, 1077,    0, 1077, 1075,
      999,    0,    0, 1077, 1076,  999, 1075, 1000, 1077, 1000,

     1075, 1076,    0,    0, 1000, 1076, 1075,    0,    0, 1000,
     1078, 1076, 1078, 1077,    0, 1077, 1075, 1078,    0,    0,
     1077, 1076, 1078, 1080, 1079, 1077, 1079, 1080,    0,    0,
        0, 1079,    0, 1080,    0,    0, 1079, 1078,    0, 1078,
        0,    0, 1081, 1080, 1078,    0, 1081,    0,    0, 1078,
     1080, 1079, 1081, 1079, 1080,    0,    0, 1081, 1079, 1082,
     1080, 1082, 1081, 1079,    0, 1083, 1082, 1083,    0, 1081,
     1080, 1082, 1083, 1081,    0,    0,    0, 1083, 1084, 1081,
     1084,    0,    0,    0, 1081, 1084, 1082,    0, 1082, 1081,
     1084,    0, 1083, 1082, 1083,    0,    0,    0, 1082, 1083,

        0, 1085,    0, 1085, 1083, 1084,    0, 1084, 1085,    0,
        0,    0, 1084, 1085, 1086,    0, 1086, 1084,    0,    0,
        0, 1086, 1086,    0,    0,    0, 1086,    0, 1085,    0,
     1085,    0, 1087, 1087, 1087, 1085, 1088,    0,    0, 1087,
     1085, 1086,    0, 1086, 1087, 1088,    0, 1088, 1086, 1086,
        0,    0, 1088, 1086,    0,    0,    0, 1088,    0, 1087,
     1087, 1087,    0, 1088,    0,    0, 1087,    0, 1089,    0,
     1089, 1087, 1088,    0, 1088, 1089,    0,    0,    0, 1088,
     1089, 1090,    0, 1090, 1088,    0,    0,    0, 1090, 1090,
        0,    0, 1091, 1090, 1091, 1089,    0, 1089,    0, 1091,

        0, 1092, 1089,    0, 1091,    0,    0, 1089, 1090,    0,
     1090, 1092,    0, 1092,    0, 1090, 1090,    0, 1092, 1091,
     1090, 1091, 1093, 1092, 1093,    0, 1091,    0, 1092, 1093,
        0, 1091, 1094,    0, 1093, 1095,    0, 1095, 1092,    0,
     1092, 1094, 1095, 1094,    0, 1092,    0, 1095, 1094, 1093,
     1092, 1093,    0, 1094,    0,    0, 1093,    0,    0, 1094,
        0, 1093, 1095,    0, 1095, 1096,    0, 1096, 1094, 1095,
     1094, 1097, 1096, 1097, 1095, 1094,    0, 1096, 1097,    0,
     1094, 1098,    0, 1097,    0, 1098, 1099,    0,    0,    0,
     1099, 1098, 1096,    0, 1096, 1100, 1099, 1100, 1097, 1096,

     1097, 1098, 1100,    0, 1096, 1097, 1099, 1100, 1098,    0,
     1097,    0, 1098, 1099,    0,    0,    0, 1099, 1098, 1101,
        0, 1101, 1100, 1099, 1100,    0, 1101, 1101, 1098, 1100,
        0, 1101, 1102, 1099, 1100, 1103, 1102, 1104,    0, 1103,
     1105, 1104, 1102,    0, 1105, 1103, 1101, 1104, 1101,    0,
     1105,    0, 1102, 1101, 1101, 1103,    0, 1104, 1101, 1102,
     1105,    0, 1103, 1102, 1104,    0, 1103, 1105, 1104, 1102,
        0, 1105, 1103,    0, 1104,    0, 1106, 1105,    0, 1102,
     1106, 1107, 1103,    0, 1104, 1107, 1106, 1105,    0, 1108,
        0, 1107,    0, 1108,    0,    0, 1106,    0,    0, 1108,

        0, 1107,    0, 1106,    0,    0,    0, 1106, 1107, 1108,
        0, 1109, 1107, 1106,    0, 1109, 1108,    0, 1107,    0,
     1108, 1109,    0, 1106, 1109, 1110, 1108,    0, 1107, 1110,
        0, 1109,    0, 1111,    0, 1110, 1108, 1111, 1109, 1112,
        0, 1111, 1109, 1112,    0, 1110,    0, 1111, 1109, 1112,
        0, 1109, 1110,    0,    0,    0, 1110, 1111, 1109, 1112,
     1111, 1113, 1110,    0, 1111, 1113, 1112,    0, 1111,    0,
     1112, 1113, 1110, 1114, 1111, 1114, 1112,    0,    0,    0,
     1114, 1113,    0,    0, 1111, 1114, 1112, 1115, 1113, 1115,
        0,    0, 1113,    0, 1115,    0,    0,    0, 1113, 1115,

     1114,    0, 1114, 1116,    0, 1116, 1118, 1114, 1113,    0,
     1116, 1117, 1114, 1117, 1115, 1116, 1115, 1118, 1117, 1118,
        0, 1115,    0, 1117, 1118,    0, 1115,    0,    0, 1118,
     1116,    0, 1116, 1118,    0,    0,    0, 1116, 1117,    0,
     1117, 1119, 1116, 1119, 1118, 1117, 1118, 1120, 1119, 1120,
     1117, 1118,    0, 1119, 1120, 1120, 1118, 1121,    0, 1120,
        0, 1121,    0,    0,    0,    0,    0, 1121, 1119, 1122,
     1119,    0,    0, 1122, 1120, 1119, 1120, 1121,    0, 1122,
     1119, 1120, 1120, 1123, 1121,    0, 1120, 1123, 1121, 1122,
        0, 1124,    0, 1123, 1121, 1124, 1122,    0,    0,    0,

     1122, 1124,    0, 1123, 1121, 1125, 1122,    0,    0, 1125,
     1123, 1124,    0,    0, 1123, 1125, 1122, 1126, 1124, 1126,
     1123,    0, 1124, 1126,    0, 1125,    0,    0, 1124, 1126,
     1123, 1127, 1125, 1127,    0,    0, 1125, 1127, 1124, 1126,
        0,    0, 1125, 1127, 1126,    0, 1126, 1128,    0, 1128,
     1126,    0, 1125, 1127, 1128, 1129, 1126, 1129, 1127, 1128,
     1127, 1130, 1129, 1130, 1127,    0, 1126, 1129, 1130,    0,
     1127,    0,    0, 1130, 1128,    0, 1128,    0,    0,    0,
     1127, 1128, 1129,    0, 1129, 1131, 1128, 1131, 1130, 1129,
     1130, 1132, 1131, 1132, 1129, 1130,    0, 1131, 1132, 1133,

     1130, 1133,    0, 1132,    0,    0, 1133,    0,    0,    0,
        0, 1133, 1131,    0, 1131, 1134,    0, 1134, 1132, 1131,
     1132,    0, 1134, 1135, 1131, 1132, 1133, 1134, 1133,    0,
     1132,    0,    0, 1133, 1135, 1195, 1135,    0, 1133, 1195,
        0, 1135, 1134,    0, 1134, 1195, 1135, 1136, 1137, 1134,
     1135,    0,    0,    0, 1134, 1195,    0, 1137, 1136, 1137,
     1136, 1135, 1195, 1135, 1137, 1136, 1195,    0, 1135, 1137,
     1136,    0, 1195, 1135, 1136, 1137,    0,    0,    0,    0,
        0, 1138, 1195, 1138, 1137, 1136, 1137, 1136, 1138, 1138,
        0, 1137, 1136, 1138, 1139,    0, 1137, 1136,    0, 1140,

        0, 1140, 1139,    0, 1139, 1141, 1140, 1141, 1138, 1139,
     1138, 1140, 1141,    0, 1139, 1138, 1138, 1141,    0,    0,
     1138, 1139,    0, 1142,    0, 1142, 1140,    0, 1140, 1139,
     1142, 1139, 1141, 1140, 1141, 1142, 1139,    0, 1140, 1141,
        0, 1139,    0,    0, 1141,    0, 1143,    0, 1143, 1144,
     1142, 1144, 1142, 1143,    0, 1144, 1144, 1142, 1143,    0,
        0, 1144, 1142,    0,    0, 1145,    0, 1145,    0,    0,
        0,    0, 1145, 1143,    0, 1143, 1144, 1145, 1144, 1146,
     1143, 1146, 1144, 1144,    0, 1143, 1146,    0, 1144,    0,
        0, 1146, 1145, 1191, 1145, 1191,    0,    0,    0, 1145,

     1191,    0,    0,    0, 1145, 1191, 1146, 1192, 1146, 1192,
        0,    0,    0, 1146, 1192,    0,    0,    0, 1146, 1192,
     1191, 1193, 1191, 1193,    0,    0,    0, 1191, 1193,    0,
        0,    0, 1191, 1193, 1192, 1194, 1192, 1194,    0, 1196,
        0, 1192, 1194, 1196,    0,    0, 1192, 1194, 1193, 1196,
     1193, 1198, 1198, 1197,    0, 1193,    0, 1197,    0, 1196,
     1193,    0, 1194, 1197, 1194,    0, 1196,    0, 1199, 1194,
     1196,    0, 1199, 1197, 1194,    0, 1196, 1198, 1199,    0,
     1197, 1198,    0,    0, 1197,    0, 1196, 1198, 1199,    0,
     1197,    0,    0,    0,    0, 1199,    0, 1198, 1200, 1199,

     1197,    0, 1200, 1201, 1198, 1199, 1200, 1201, 1198,    0,
        0,    0, 1200, 1201, 1198, 1199, 1202, 1203,    0,    0,
     1202, 1203, 1200, 1201, 1198, 1200, 1202, 1203,    0, 1200,
     1201, 1204,    0, 1200, 1201, 1204, 1202, 1203,    0, 1200,
     1201, 1204,    0, 1202, 1203,    0, 1204, 1202, 1203, 1200,
     1201, 1204,    0, 1202, 1203, 1205, 1206, 1207, 1204, 1205,
     1206, 1207, 1204, 1202, 1203, 1205, 1206, 1207, 1204,    0,
        0,    0,    0, 1204,    0, 1205, 1206, 1207, 1204,    0,
        0,    0, 1205, 1206, 1207,    0, 1205, 1206, 1207, 1208,
        0, 1208, 1205, 1206, 1207,    0, 1208,    0, 1209,    0,

     1209, 1208, 1205, 1206, 1207, 1209,    0,    0, 1210,    0,
     1209,    0,    0,    0,    0,    0, 1208, 1210, 1208, 1210,
        0,    0,    0, 1208, 1210, 1209,    0, 1209, 1208, 1210,
        0, 1211, 1209, 1211,    0, 1210,    0, 1209, 1211,    0,
     1212,    0, 1212, 1211, 1210,    0, 1210, 1212,    0,    0,
        0, 1210, 1212, 1215,    0,    0, 1210, 1215, 1211, 1213,
     1211, 1213,    0, 1215,    0, 1211, 1213, 1212,    0, 1212,
     1211, 1213,    0, 1215, 1212, 1214,    0, 1214,    0, 1212,
     1215, 1214, 1214,    0, 1215, 1216, 1213, 1214, 1213, 1216,
     1215,    0,    0, 1213, 1217, 1216, 1217,    0, 1213,    0,

     1215, 1217, 1214,    0, 1214, 1216, 1217,    0, 1214, 1214,
        0,    0, 1216, 1218, 1214, 1218, 1216, 1219,    0, 1219,
     1218, 1217, 1216, 1217, 1219, 1218,    0,    0, 1217, 1219,
        0,    0, 1216, 1217,    0,    0,    0,    0,    0,    0,
     1218, 1220, 1218, 1220, 1219,    0, 1219, 1218, 1220, 1220,
        0, 1219, 1218, 1220, 1221, 1221, 1219, 1221,    0, 1222,
        0, 1222, 1221,    0,    0,    0, 1222, 1221, 1220,    0,
     1220, 1222,    0,    0,    0, 1220, 1220,    0,    0,    0,
     1220, 1221, 1221, 1223, 1221, 1223, 1222,    0, 1222, 1221,
     1223,    0,    0, 1222, 1221, 1223,    0, 1224, 1222, 1224,

        0, 1225,    0, 1225, 1224, 1224,    0,    0, 1225, 1224,
     1223,    0, 1223, 1225,    0,    0,    0, 1223,    0,    0,
        0,    0, 1223,    0, 1224,    0, 1224, 1226, 1225, 1226,
     1225, 1224, 1224, 1226, 1226, 1225, 1224,    0,    0, 1226,
     1225, 1227, 1227, 1227,    0, 1229,    0,    0, 1227, 1229,
     1228,    0, 1228, 1227, 1226, 1229, 1226, 1228, 1228,    0,
     1226, 1226, 1228, 1230,    0, 1229, 1226, 1230, 1227, 1227,
     1227,    0, 1229, 1230,    0, 1227, 1229, 1228,    0, 1228,
     1227,    0, 1229, 1230, 1228, 1228,    0, 1231,    0, 1228,
     1230, 1231, 1229,    0, 1230, 1232,    0, 1231,    0, 1232,

     1230,    0,    0,    0,    0, 1232,    0, 1231,    0, 1258,
     1230,    0,    0, 1258, 1231, 1232,    0, 1256, 1231, 1258,
        0, 1256, 1232,    0, 1231,    0, 1232, 1256,    0, 1258,
     1256,    0, 1232,    0, 1231, 1259, 1258, 1256,    0, 1259,
     1258,    0, 1232, 1260, 1256, 1259, 1258, 1260, 1256,    0,
     1259,    0,    0, 1260, 1256, 1259, 1258, 1256,    0,    0,
        0, 1261, 1259, 1260, 1256, 1261, 1259,    0,    0, 1263,
     1260, 1261, 1259, 1263, 1260,    0,    0, 1259,    0, 1263,
     1260, 1261, 1259, 1262, 1263, 1262,    0, 1262, 1261, 1263,
     1260,    0, 1261, 1262,    0, 1264, 1263, 1265, 1261, 1264,

     1263, 1265,    0, 1262,    0, 1264, 1263, 1265, 1261,    0,
     1262, 1263, 1262,    0, 1262, 1264, 1263, 1265,    0,    0,
     1262,    0, 1264, 1266, 1265,    0, 1264, 1266, 1265,    0,
     1262,    0, 1264, 1266, 1265,    0, 1266,    0,    0, 1267,
     1268, 1267, 1264, 1266, 1265, 1268, 1267, 1268,    0,    0,
     1266, 1267, 1268,    0, 1266,    0,    0, 1268,    0,    0,
     1266,    0,    0, 1266,    0,    0, 1267, 1268, 1267, 1269,
     1266, 1269, 1268, 1267, 1268, 1270, 1269, 1270, 1267, 1268,
        0, 1269, 1270, 1271, 1268, 1271,    0, 1270,    0,    0,
     1271,    0,    0,    0,    0, 1271, 1269,    0, 1269,    0,

        0, 1272, 1270, 1269, 1270, 1272,    0,    0, 1269, 1270,
     1271, 1272, 1271,    0, 1270, 1273,    0, 1271,    0, 1273,
     1274, 1272, 1271, 1275, 1274, 1273, 1273, 1275, 1272,    0,
     1274,    0, 1272, 1275,    0, 1273,    0,    0, 1272,    0,
     1274,    0, 1273, 1275, 1276, 1276, 1273, 1274, 1272, 1276,
     1275, 1274, 1273, 1273, 1275, 1276,    0, 1274, 1291, 1291,
     1275,    0, 1273,    0,    0, 1276,    0, 1274,    0, 1293,
     1275, 1276, 1276, 1293,    0,    0, 1276,    0,    0, 1293,
        0, 1294, 1276, 1295, 1291, 1294,    0, 1295, 1291, 1293,
        0, 1294, 1276, 1295, 1291, 1296, 1293, 1296,    0,    0,

     1293, 1294, 1296, 1295, 1291,    0, 1293, 1296, 1294,    0,
     1295, 1291, 1294,    0, 1295, 1291, 1293,    0, 1294,    0,
     1295, 1291, 1296,    0, 1296, 1297,    0, 1297, 1294, 1296,
     1295, 1291, 1297, 1298, 1296, 1298, 1299, 1297, 1299, 1300,
     1298, 1300,    0, 1299,    0, 1298, 1300,    0, 1299,    0,
        0, 1300, 1297,    0, 1297,    0,    0,    0,    0, 1297,
     1298,    0, 1298, 1299, 1297, 1299, 1300, 1298, 1300,    0,
     1299,    0, 1298, 1300,    0, 1299, 1301, 1302, 1300, 1312,
     1301, 1302,    0, 1312,    0,    0, 1301, 1302,    0, 1312,
        0, 1313,    0,    0,    0, 1313, 1301, 1302,    0, 1312,

        0, 1313,    0, 1301, 1302,    0, 1312, 1301, 1302,    0,
     1312, 1313,    0, 1301, 1302,    0, 1312,    0, 1313,    0,
        0,    0, 1313, 1301, 1302, 1314, 1312, 1314, 1313, 1322,
        0, 1322, 1314,    0,    0,    0, 1322, 1314, 1313,    0,
        0, 1322,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1314,    0, 1314,    0, 1322,    0, 1322, 1314,
        0,    0,    0, 1322, 1314,    0,    0,    0, 1322, 1354,
     1354, 1354, 1354, 1354, 1355,    0,    0, 1355, 1355, 1357,
     1357, 1357,    0, 1357, 1358,    0, 1358, 1358, 1358, 1359,
        0, 1359, 1359, 1359, 1360,    0, 1360, 1360, 1360, 1353,

     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 3077 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 3091 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 3378 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1354 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1353 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BIGINT)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(FOLLOWING)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(GROUPS)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(LOCKED)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(NOWAIT)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(OVER)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(PARTITION)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(PRECEDING)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(RANGE)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(ROWS)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(SHARE)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(SKIP)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(UNBOUNDED)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 218 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(VECTOR)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 221 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 228 "flex_lexer.l"
TOKEN(CURRENT_ROW)
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 229 "flex_lexer.l"
TOKEN(CHARACTER_VARYING)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 169:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 235 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 238 "flex_lexer.l"
TOKEN(SIMILAR)
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 239 "flex_lexer.l"
TOKEN(INDEX_IVFFLAT)
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 240 "flex_lexer.l"
TOKEN(INDEX_HNSW)
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 242 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 179:
#line 245 "flex_lexer.l"
case 180:
YY_RULE_SETUP
#line 245 "flex_lexer.l"
{
  yylval->fval = atof(yytext);
  return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 181:
YY_RULE_SETUP
#line 255 "flex_lexer.l"
{
  yylval->ival = LLONG_MIN;
  return SQL_INTVAL;
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 260 "flex_lexer.l"
{
  errno = 0;
  yylval->ival = strtoll(yytext, nullptr, 0);
  if (errno) {
    return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
    return 0;
  }
  return SQL_INTVAL;
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 270 "flex_lexer.l"
{
  // Crop the leading and trailing quote char
  yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 276 "flex_lexer.l"
{
  yylval->sval = strdup(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 281 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 282 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 283 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 284 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 285 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 287 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 289 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 4414 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1354 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1354 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1353);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 289 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

